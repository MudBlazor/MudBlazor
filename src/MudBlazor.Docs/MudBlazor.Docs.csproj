<!--https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-reference -->
<!--Use: dotnet msbuild -preprocess:<fileName>.xml to evaluate this project-->
<Project Sdk="Microsoft.NET.Sdk.Razor">

  <!--Hook for the generated static content-->
  <PropertyGroup>
    <ResolveStaticWebAssetsInputsDependsOn>
      IncludeGeneratedStaticFiles;
      $(ResolveStaticWebAssetsInputsDependsOn)
    </ResolveStaticWebAssetsInputsDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
  </PropertyGroup>

  <!--Outside Visual Studio SolutionDir is not available-->  
  <PropertyGroup>
    <SolutionDir Condition=" '$(SolutionDir)' == '' ">$(MSBuildThisFileDirectory)../</SolutionDir>
  </PropertyGroup>

  <!--Binary path for the code generator-->
  <Choose>
    <When Condition="'$(TargetFramework)' == 'netstandard2.1'">
      <PropertyGroup><BinDocsCompiler>$(SolutionDir)MudBlazor.Docs.Compiler/bin/Debug/netcoreapp3.1/MudBlazor.Docs.Compiler.dll</BinDocsCompiler></PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup><BinDocsCompiler>$(SolutionDir)MudBlazor.Docs.Compiler/bin/Debug/net6.0/MudBlazor.Docs.Compiler.dll</BinDocsCompiler></PropertyGroup>
    </Otherwise>
  </Choose>

  <!--Project path for code generator-->
  <PropertyGroup>
    <ProjectDocsCompiler>dotnet run --configuration release --project "$(SolutionDir)MudBlazor.Docs.Compiler/MudBlazor.Docs.Compiler.csproj"</ProjectDocsCompiler>
  </PropertyGroup>

  <!--Execute the code generator-->
  <Target Name="CompileDocs" BeforeTargets="BeforeBuild">
    <!--Command-line for the code generator-->
    <Message Text="Generating Docs and Tests" Importance="high" />
    <Exec Command="dotnet &quot;$(BinDocsCompiler)&quot;" Condition="Exists('$(BinDocsCompiler)')" />
    <Exec Command="$(ProjectDocsCompiler)" Condition="!Exists('$(BinDocsCompiler)')" />
  </Target>

  <!--This file contains any ExampleCode that is new and needs including in the build -->
  <Target Name="ReadFromFile" DependsOnTargets="CompileDocs">
    <ItemGroup>
      <NewFiles Include="NewFilesToBuild.txt" />
    </ItemGroup>
    <ReadLinesFromFile File="@(NewFiles)">
      <Output TaskParameter="Lines" ItemName="NewExampleCodeToBuild" />
    </ReadLinesFromFile>
  </Target>

  <!--Add Content that is being generated as part of the build cycle-->
  <!--We need to do this because the project is not yet aware of files that were generated after the build started-->  
  <Target Name="IncludeGeneratedFiles" BeforeTargets="BeforeBuild" DependsOnTargets="CompileDocs;ReadFromFile">
    <ItemGroup>
      <Compile Include="Models/Snippets.generated.cs" Condition="!Exists('Models/Snippets.generated.cs')" />
      <Compile Include="Models/DocStrings.generated.cs" Condition="!Exists('Models/DocStrings.generated.cs')" />
      <EmbeddedResource Include="@(NewExampleCodeToBuild)" Condition="@(NewExampleCodeToBuild-&gt;Count()) != 0" />
    </ItemGroup>
  </Target>
 
  <!--Update ExampleCode-->
  <ItemGroup>
    <EmbeddedResource Include="Pages\**\*.html" />
  </ItemGroup>

  <!--Is this a rebuild - Dont clean generated files as this breaks rebuild behaviour-->
  <Target Name="ShouldCleanGeneratedFiles" BeforeTargets="BeforeRebuild">
    <PropertyGroup>
      <CleanGeneratedFiles>false</CleanGeneratedFiles>
    </PropertyGroup>
  </Target>

  <Target Name="CleanGeneratedFiles" BeforeTargets="Clean" Condition="'$(CleanGeneratedFiles)' != 'false'">
    <ItemGroup>
      <FilesToClean Include="./Pages/**/*ExampleCode.*" />
      <FilesToClean Include="./Pages/**/*Example_DialogCode.*" />
      <FilesToClean Include="./NewFilesToBuild.txt" />
      <FilesToClean Include="./Models/Snippets.generated.cs" />
      <FilesToClean Include="./Models/DocStrings.generated.cs" />
      <FilesToClean Include="./wwwroot/MudBlazorDocs.min.css" />
    </ItemGroup>
    <Delete Files="@(FilesToClean)" />
  </Target>

  <!--Packages-->
  <ItemGroup>
    <PackageReference Include="FluentValidation" Version="10.3.4" />
    <PackageReference Include="Microsoft.AspNetCore.Components" Version="6.0.0.*" />
    <PackageReference Include="Microsoft.AspNetCore.Components.Web" Version="6.0.0.*" />
    <PackageReference Include="Microsoft.AspNetCore.WebUtilities" Version="2.2.0" />
  </ItemGroup>

  <!--Project dependencies-->
  <ItemGroup>
    <ProjectReference Include="../MudBlazor/MudBlazor.csproj" />
      <ProjectReference Include="../MudBlazor.Examples.Data/MudBlazor.Examples.Data.csproj" />
  </ItemGroup>

  <!--Excubo  webcompiler -  used for scss and js compilation-->
  <Target Name="ToolRestore">
      <Exec Command="dotnet tool restore" StandardOutputImportance="high" />
  </Target>

  <Target Name="WebCompiler" DependsOnTargets="ToolRestore">
      <Exec Command="dotnet webcompiler ./Styles/MudBlazorDocs.scss -c excubowebcompiler.json" StandardOutputImportance="high" StandardErrorImportance="high" />
  </Target>

  <!--Output of Excubo webcompiler-->
  <Target Name="IncludeGeneratedStaticFiles" DependsOnTargets="WebCompiler">
    <Error Condition="!Exists('wwwroot/MudBlazorDocs.min.css')" Text="Missing MudBlazorDocs.min.css in wwwroot" />
    <!--If we ever bundle js  for the docs site uncomment the below check-->
    <!--<Error Condition="!Exists('wwwroot/MudBlazorDocs.min.js')" Text="Missing MudBlazorDocs.min.js in wwwroot" />-->
    <ItemGroup>
      <Content Include="wwwroot/MudBlazorDocs.min.css" Condition="!Exists('wwwroot/MudBlazorDocs.min.css')" />
      <Content Include="wwwroot/MudBlazorDocs.min.js" Condition="!Exists('wwwroot/MudBlazorDocs.min.js')" />
    </ItemGroup>
  </Target>

  <!--Dont Include in build output-->
  <ItemGroup>
    <Content Remove="compilerconfig.json" />
    <Content Remove="excubowebcompiler.json" />
  </ItemGroup>

</Project>
