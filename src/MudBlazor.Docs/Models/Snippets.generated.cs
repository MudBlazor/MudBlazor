// NOTE: this file is autogenerated. Any changes will be overwritten!
namespace MudBlazor.Docs.Models
{
    public static partial class Snippets
    {

public const string AlertDenseExample = @"<MudAlert Severity=""Severity.Normal"" Dense=""true"">Dense Default</MudAlert>
<MudAlert Severity=""Severity.Info"" Dense=""true"">Dense Info</MudAlert>
<MudAlert Severity=""Severity.Success"" Dense=""true"">Dense Success</MudAlert>
<MudAlert Severity=""Severity.Warning"" Dense=""true"">Dense Warning</MudAlert>
<MudAlert Severity=""Severity.Error"" Dense=""true"">Dense Error</MudAlert>

<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Outlined"" Dense=""true"">Dense Default</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Outlined"" Dense=""true"">Dense Info</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Outlined"" Dense=""true"">Dense Success</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Outlined"" Dense=""true"">Dense Warning</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Outlined"" Dense=""true"">Dense Error</MudAlert>

<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"" Dense=""true"">Dense Default</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Filled"" Dense=""true"">Dense Info</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Filled"" Dense=""true"">Dense Success</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Filled"" Dense=""true"">Dense Warning</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"" Dense=""true"">Dense Error</MudAlert>";

public const string AlertDenseFilledExample = @"<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"" Dense=""true"">Dense Default</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Filled"" Dense=""true"">Dense Info</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Filled"" Dense=""true"">Dense Success</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Filled"" Dense=""true"">Dense Warning</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"" Dense=""true"">Dense Error</MudAlert>";

public const string AlertDenseOutlinedExample = @"<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Outlined"" Dense=""true"">Dense Default</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Outlined"" Dense=""true"">Dense Info</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Outlined"" Dense=""true"">Dense Success</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Outlined"" Dense=""true"">Dense Warning</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Outlined"" Dense=""true"">Dense Error</MudAlert>";

public const string AlertDenseTextExample = @"<MudAlert Severity=""Severity.Normal"" Dense=""true"">Dense Default</MudAlert>
<MudAlert Severity=""Severity.Info"" Dense=""true"">Dense Info</MudAlert>
<MudAlert Severity=""Severity.Success"" Dense=""true"">Dense Success</MudAlert>
<MudAlert Severity=""Severity.Warning"" Dense=""true"">Dense Warning</MudAlert>
<MudAlert Severity=""Severity.Error"" Dense=""true"">Dense Error</MudAlert>";

public const string AlertElevationExample = @"<MudGrid Class=""mt-6"">
    <MudItem md=""12"">
        <MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"" Elevation=""@elevation"">
            Elevated Alert, or is it?
        </MudAlert>
    </MudItem>
    <MudItem md=""12"">
        <MudSlider @bind-Value=""elevation"" Min=""0"" Max=""24"" Class=""my-4"">Elevation</MudSlider>
    </MudItem>
</MudGrid>

@code {
    public int elevation = 1;
}";

public const string AlertFilledExample = @"<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"">The reactor type is RBMK-1000</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Filled"">The reactor was fired up successfully</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Filled"">The reactor is running at optimum temperature</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Filled"">The reactor temperature exceeds the optimal range</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"">Meltdown is imminent</MudAlert>";

public const string AlertNoIconExample = @"<MudAlert Severity=""Severity.Normal"" NoIcon=""true"">Default No Icon</MudAlert>
<MudAlert Severity=""Severity.Info"" NoIcon=""true"">Info No Icon</MudAlert>
<MudAlert Severity=""Severity.Success"" NoIcon=""true"">Success No Icon</MudAlert>
<MudAlert Severity=""Severity.Warning"" NoIcon=""true"">Warning No Icon</MudAlert>
<MudAlert Severity=""Severity.Error"" NoIcon=""true"">Error No Icon</MudAlert>

<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Outlined"" NoIcon=""true"">Icon Default No</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Outlined"" NoIcon=""true"">Info No Icon</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Outlined"" NoIcon=""true"">Success No Icon</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Outlined"" NoIcon=""true"">Warning No Icon</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Outlined"" NoIcon=""true"">Error No Icon</MudAlert>

<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"" NoIcon=""true"">Default No Icon</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Filled"" NoIcon=""true"">Info No Icon</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Filled"" NoIcon=""true"">Success No Icon</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Filled"" NoIcon=""true"">Warning No Icon</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"" NoIcon=""true"">Error No Icon</MudAlert>";

public const string AlertNoIconFilledExample = @"<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"" NoIcon=""true"">Default No Icon</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Filled"" NoIcon=""true"">Info No Icon</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Filled"" NoIcon=""true"">Success No Icon</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Filled"" NoIcon=""true"">Warning No Icon</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"" NoIcon=""true"">Error No Icon</MudAlert>";

public const string AlertNoIconOutlinedExample = @"<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Outlined"" NoIcon=""true"">Icon Default No</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Outlined"" NoIcon=""true"">Info No Icon</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Outlined"" NoIcon=""true"">Success No Icon</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Outlined"" NoIcon=""true"">Warning No Icon</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Outlined"" NoIcon=""true"">Error No Icon</MudAlert>";

public const string AlertNoIconTextExample = @"<MudAlert Severity=""Severity.Normal"" NoIcon=""true"">Default No Icon</MudAlert>
<MudAlert Severity=""Severity.Info"" NoIcon=""true"">Info No Icon</MudAlert>
<MudAlert Severity=""Severity.Success"" NoIcon=""true"">Success No Icon</MudAlert>
<MudAlert Severity=""Severity.Warning"" NoIcon=""true"">Warning No Icon</MudAlert>
<MudAlert Severity=""Severity.Error"" NoIcon=""true"">Error No Icon</MudAlert>";

public const string AlertOutlinedExample = @"<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Outlined"">The reactor type is RBMK-1000</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Outlined"">The reactor was fired up successfully</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Outlined"">The reactor is running at optimum temperature</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Outlined"">The reactor temperature exceeds the optimal range</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Outlined"">Meltdown is imminent</MudAlert>";

public const string AlertSimpleExample = @"<MudAlert Severity=""Severity.Normal"">The reactor type is RBMK-1000</MudAlert>
<MudAlert Severity=""Severity.Info"">The reactor was fired up successfully</MudAlert>
<MudAlert Severity=""Severity.Success"">The reactor is running at optimum temperature</MudAlert>
<MudAlert Severity=""Severity.Warning"">The reactor temperature exceeds the optimal range</MudAlert>
<MudAlert Severity=""Severity.Error"">Meltdown is imminent</MudAlert>";

public const string AlertSquareExample = @"<MudAlert Severity=""Severity.Normal"" Square=""true"">Default Square</MudAlert>
<MudAlert Severity=""Severity.Info"" Square=""true"">Info Square</MudAlert>
<MudAlert Severity=""Severity.Success"" Square=""true"">Success Square</MudAlert>
<MudAlert Severity=""Severity.Warning"" Square=""true"">Warning Square</MudAlert>
<MudAlert Severity=""Severity.Error"" Square=""true"">Error Square</MudAlert>

<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Outlined"" Square=""true"">Default Square</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Outlined"" Square=""true"">Info Square</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Outlined"" Square=""true"">Success Square</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Outlined"" Square=""true"">Warning Square</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Outlined"" Square=""true"">Error Square</MudAlert>

<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"" Square=""true"">Default Square</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Filled"" Square=""true"">Info Square</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Filled"" Square=""true"">Success Square</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Filled"" Square=""true"">Warning Square</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"" Square=""true"">Error Square</MudAlert>";

public const string AlertSquareFilledExample = @"<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Filled"" Square=""true"">Default Square</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Filled"" Square=""true"">Info Square</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Filled"" Square=""true"">Success Square</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Filled"" Square=""true"">Warning Square</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Filled"" Square=""true"">Error Square</MudAlert>";

public const string AlertSquareOutlineExample = @"<MudAlert Severity=""Severity.Normal"" Variant=""Variant.Outlined"" Square=""true"">Default Square</MudAlert>
<MudAlert Severity=""Severity.Info"" Variant=""Variant.Outlined"" Square=""true"">Info Square</MudAlert>
<MudAlert Severity=""Severity.Success"" Variant=""Variant.Outlined"" Square=""true"">Success Square</MudAlert>
<MudAlert Severity=""Severity.Warning"" Variant=""Variant.Outlined"" Square=""true"">Warning Square</MudAlert>
<MudAlert Severity=""Severity.Error"" Variant=""Variant.Outlined"" Square=""true"">Error Square</MudAlert>";

public const string AlertSquareTextExample = @"<MudAlert Severity=""Severity.Normal"" Square=""true"">Default Square</MudAlert>
<MudAlert Severity=""Severity.Info"" Square=""true"">Info Square</MudAlert>
<MudAlert Severity=""Severity.Success"" Square=""true"">Success Square</MudAlert>
<MudAlert Severity=""Severity.Warning"" Square=""true"">Warning Square</MudAlert>
<MudAlert Severity=""Severity.Error"" Square=""true"">Error Square</MudAlert>";

public const string AppBarDenseExample = @"<MudAppBar Color=""Color.Primary"" Fixed=""false"" Dense=""true"">
    <MudIconButton Icon=""@Icons.Material.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" />
    <MudAppBarSpacer />
    <MudIconButton Icon=""@Icons.Custom.GitHub"" Color=""Color.Inherit"" />
</MudAppBar>";

public const string AppBarElevationExample = @"<MudAppBar Color=""Color.Primary"" Fixed=""false"" Elevation=""0"">
    <MudIconButton Icon=""@Icons.Material.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" />
    <MudAppBarSpacer />
    <MudIconButton Icon=""@Icons.Custom.GitHub"" Color=""Color.Inherit"" />
</MudAppBar>";

public const string AppBarSimpleExample = @"<MudAppBar Color=""Color.Primary"" Fixed=""false"">
    <MudIconButton Icon=""@Icons.Material.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" />
    <MudAppBarSpacer />
    <MudIconButton Icon=""@Icons.Custom.GitHub"" Color=""Color.Inherit"" />
</MudAppBar>";

public const string AutocompleteClrObjectsExample = @"@using MudBlazor.Docs.Data;

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""Element"" Label=""Periodic Table Element"" @bind-Value=""value1"" SearchFunc=""@Search"" ToStringFunc=""@(e=> $""{e.Name} ({e.Sign})"")"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""Element"" Label=""Periodic Table Element"" @bind-Value=""value2"" SearchFunc=""@Search"" ToStringFunc=""@(e=> $""{e.Name} ({e.Sign})"")"">
            <ItemTemplate Context=""e"">                          
                <MudText><MudIcon Icon=""@Icons.Material.CheckBoxOutlineBlank"" Class=""mb-n1 mr-3"" />@($""{e.Name} ({e.Sign})"")</MudText>
            </ItemTemplate>
            <ItemSelectedTemplate Context=""e"">                
                <MudText><MudIcon Icon=""@Icons.Material.CheckBox"" Class=""mb-n1 mr-3"" />@($""{e.Name} ({e.Sign})"")</MudText>
            </ItemSelectedTemplate>
        </MudAutocomplete>
    </MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudText Class=""mb-n3"" Typo=""Typo.body2"">
            Selected values: <MudChip>@(value1?.ToString() ?? ""Not selected"")</MudChip><MudChip>@(value2?.ToString() ?? ""Not selected"")</MudChip>
        </MudText>
    </MudItem>
</MudGrid>

@code {
    private IEnumerable<Element> datasource = PeriodicTable.GetElements(); //you can also search directly from database on Search()
    private Element value1, value2;

    private async Task<IEnumerable<Element>> Search(string value)
    {
        if (string.IsNullOrEmpty(value))
            return datasource;
        return datasource.Where(e => $""{e.Name} ({e.Sign})"".Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}";

public const string AutocompleteUsageExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""value1"" SearchFunc=""@Search1"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudAutocomplete T=""string"" Label=""US States"" @bind-Value=""value2"" SearchFunc=""@Search2"" ResetValueOnEmptyText=""true"" />
    </MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudText Class=""mb-n3"" Typo=""Typo.body2"">
            <MudChip>@(value1 ?? ""Not selected"")</MudChip><MudChip>@(value2 ?? ""Not selected"")</MudChip>
        </MudText>
    </MudItem>
</MudGrid>

@code {
    private string value1, value2;
    private string[] states =
    {
        ""Alabama"", ""Alaska"", ""American Samoa"", ""Arizona"",
        ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"",
        ""Delaware"", ""District of Columbia"", ""Federated States of Micronesia"",
        ""Florida"", ""Georgia"", ""Guam"", ""Hawaii"", ""Idaho"",
        ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"",
        ""Louisiana"", ""Maine"", ""Marshall Islands"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"",
        ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"",
        ""New Hampshire"", ""New Jersey"", ""New Mexico"", ""New York"",
        ""North Carolina"", ""North Dakota"", ""Northern Mariana Islands"", ""Ohio"",
        ""Oklahoma"", ""Oregon"", ""Palau"", ""Pennsylvania"", ""Puerto Rico"",
        ""Rhode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virgin Island"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming"",
    };

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> Search2(string value)
    {
        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new string[0];
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}";

public const string AvatarIconExample = @"<MudAvatar>
    <MudIcon Icon=""@Icons.Material.AccessAlarm""/>
</MudAvatar>
<MudAvatar Color=""Color.Primary"">
    <MudIcon Icon=""@Icons.Material.Folder"" />
</MudAvatar>
<MudAvatar Color=""Color.Secondary"">
    <MudIcon Icon=""@Icons.Material.FormatListNumbered"" />
</MudAvatar>";

public const string AvatarImageExample = @"<MudAvatar Image=""_content/MudBlazor.Docs/images/mony.png"" />
<MudAvatar Image=""_content/MudBlazor.Docs/images/toiletvisit.png"" />";

public const string AvatarLetterExample = @"<MudAvatar>A</MudAvatar>
<MudAvatar Color=""Color.Primary"">B</MudAvatar>
<MudAvatar Color=""Color.Secondary"">AB</MudAvatar>";

public const string AvatarSizeExample = @"<MudAvatar Image=""_content/MudBlazor.Docs/images/mony.png"" Size=""Size.Small"" />
<MudAvatar Image=""_content/MudBlazor.Docs/images/mony.png"" Size=""Size.Medium"" />
<MudAvatar Image=""_content/MudBlazor.Docs/images/mony.png"" Size=""Size.Large"" />
<MudAvatar Image=""_content/MudBlazor.Docs/images/mony.png"" Style=""height:70px; width:70px;"" />";

public const string AvatarVariantsExample = @"<MudAvatar Square=""true"">
    N
</MudAvatar>
<MudAvatar Rounded=""true"" Color=""Color.Secondary"">
    <MudIcon Icon=""@Icons.Material.FormatListNumbered"" />
</MudAvatar>
<MudAvatar Color=""Color.Primary"">
    <MudIcon Icon=""@Icons.Material.Comment"" />
</MudAvatar>";

public const string BadgeBasicExample = @"<MudBadge Content=""3"" Color=""Color.Primary"" Overlap=""true"">
    <MudIcon Icon=""@Icons.Material.Email"" Color=""Color.Default""/>
</MudBadge>

<MudBadge Content=""100"" Color=""Color.Primary"" Overlap=""true"">
    <MudIcon Icon=""@Icons.Material.Email"" Color=""Color.Default""/>
</MudBadge>

<MudBadge Icon=""@Icons.Material.Lock"" Color=""Color.Error"" Overlap=""true"" Bordered=""true"">
    <MudButton Color=""Color.Error"" Variant=""Variant.Filled"" DisableElevation=""true"">Security Issues</MudButton>
</MudBadge>

<MudBadge Dot=""true"" Color=""Color.Info"">
    <MudText>Bug Reports</MudText>
</MudBadge>";

public const string BadgeInteractiveExample = @"<MudGrid>
    <MudItem md=""8"" Class=""mud-text-align-center my-auto"">
        <MudBadge Content=""@BadgeContent"" Color=""Color.Primary"" Overlap=""@Overlap"" Bottom=""@Bottom"" Left=""@Left"" Dot=""@Dot"" Bordered=""@Bordered"" Icon=""@BadgeIcon"">
            @if (SelectedTestComponent == ""MudIcon"")
            {
                <MudIcon Icon=""@Icons.Custom.MudBlazor"" Color=""Color.Default"" Size=""Size.Large"" />
            }
            else if (SelectedTestComponent == ""MudButton"")
            {
                <MudButton Color=""Color.Primary"" Variant=""Variant.Filled"">MudButton</MudButton>
            }
            else if (SelectedTestComponent == ""MudIconButton"")
            {
                <MudIconButton Icon=""@Icons.Material.Email"" Color=""Color.Default"" />
            }
            else if (SelectedTestComponent == ""MudText"")
            {
                <MudText>MudText</MudText>
            }
        </MudBadge>
    </MudItem>
    <MudItem md=""4"">
        <MudCard>
            <MudCardContent>
                <MudSelect  T=""string"" Label=""Test Component"" Dense=""true"" OffsetY=""true"" Value=""@SelectedTestComponent"" ValueChanged=""OnSelectedTestComponent"" Class=""mb-4"">
                    <MudSelectItem T=""string""  Value=""@(""MudIcon"")"">MudIcon</MudSelectItem>
                    <MudSelectItem T=""string"" Value=""@(""MudButton"")"">MudButton</MudSelectItem>
                    <MudSelectItem T=""string"" Value=""@(""MudIconButton"")"">MudIconButton</MudSelectItem>
                    <MudSelectItem T=""string"" Value=""@(""MudText"")"">MudText</MudSelectItem>
                </MudSelect>
                <MudText Typo=""Typo.subtitle2"" GutterBottom=""true"">Badge Options</MudText>
                <MudCheckBox @bind-Checked=""@Bottom"" Label=""Bottom"" Color=""Color.Primary"" Style=""width:100%;"" />
                <MudCheckBox @bind-Checked=""@Dot"" Label=""Dot"" Color=""Color.Primary"" Style=""width:100%;"" />
                <MudCheckBox @bind-Checked=""@Left"" Label=""Left"" Color=""Color.Primary"" Style=""width:100%;"" />
                <MudCheckBox @bind-Checked=""@Overlap"" Label=""Overlap"" Color=""Color.Primary"" Style=""width:100%;"" />
                <MudCheckBox @bind-Checked=""@Bordered"" Label=""Bordered"" Color=""Color.Primary"" Style=""width:100%;"" />
                <MudCheckBox T=""bool"" CheckedChanged=""AddIcon"" Label=""Icon"" Color=""Color.Primary"" Style=""width:100%;"" />
                <MudText Typo=""Typo.subtitle2"" Class=""my-2"">Badge Content</MudText>
                <div style=""display: flex;"">
                    <MudButton OnClick=""AddValue"" Variant=""Variant.Filled"" Size=""Size.Small"" Color=""Color.Primary"" Style=""width:100%;"" Class=""mr-1"">Add @AddNumber</MudButton>
                    <MudButton OnClick=""ClearContent"" Variant=""Variant.Filled"" Size=""Size.Small"" Color=""Color.Secondary"" Style=""width:100%;"" Class=""ml-1"">Clear</MudButton>
                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    public bool Bottom { get; set; }
    public bool Dot { get; set; }
    public bool Left { get; set; }
    public bool Overlap { get; set; }
    public bool Bordered { get; set; }
    public string BadgeIcon { get; set; }

    public string SelectedTestComponent { get; set; } = ""MudIcon"";
    public string AddNumber { get; set; } = ""1"";

    public int? BadgeContent { get; set; }

    public void OnSelectedTestComponent(string value)
    {
        SelectedTestComponent = value;
    }

    public void AddIcon()
    {
        if (String.IsNullOrEmpty(BadgeIcon))
        {
            BadgeIcon = Icons.Custom.Radioactive;
        }
        else
        {
            BadgeIcon = null;
        }
    }

    public void AddValue()
    {
        if(BadgeContent == null)
        {
            AddNumber = ""25"";
            BadgeContent = 1;
        }
        else
        {
            BadgeContent += 25;
        }
    }

    public void ClearContent()
    {
        AddNumber = ""1"";
        BadgeContent = null;
        StateHasChanged();
    }
}";

public const string ButtonCustomizedExample = @"<MudButton Variant=""Variant.Filled"" EndIcon=""@Icons.Material.ArrowDownward"" Style=""background-color: yellowgreen; color: white; width: 200px; height: 60px;"">
    Download Now
</MudButton>";

public const string ButtonElevationExample = @"<MudButton Variant=""Variant.Filled"" DisableElevation=""true"" Color=""Color.Primary"">Disable elevation</MudButton>";

public const string ButtonFilledExample = @"<MudButton Variant=""Variant.Filled"">Default</MudButton>
<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"">Primary</MudButton>
<MudButton Variant=""Variant.Filled"" Color=""Color.Secondary"">Secondary</MudButton>
<MudButton Variant=""Variant.Filled"" Disabled=""true"">Disabled</MudButton>";

public const string ButtonIconLabelExample = @"<MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Material.Delete"" Color=""Color.Error"">Delete</MudButton>
<MudButton Variant=""Variant.Filled"" EndIcon=""@Icons.Material.Send"" Color=""Color.Primary"">Send</MudButton>
<MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Custom.Radioactive"" Color=""Color.Warning"">Warning</MudButton>
<MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Material.Mic"" Disabled=""true"">Talk</MudButton>
<MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Material.Save"" Color=""Color.Info""  Size=""Size.Small"">Save</MudButton>
<MudButton Variant=""Variant.Filled"" StartIcon=""@Icons.Material.Save"" Color=""Color.Success"" IconColor=""Color.Error"" Size=""Size.Large"">Save</MudButton>";

public const string ButtonOutlinedExample = @"<MudButton Variant=""Variant.Outlined"">Default</MudButton>
<MudButton Variant=""Variant.Outlined"" Color=""Color.Primary"">Primary</MudButton>
<MudButton Variant=""Variant.Outlined"" Color=""Color.Secondary"">Secondary</MudButton>
<MudButton Variant=""Variant.Outlined"" Disabled=""true"">Disabled</MudButton>";

public const string ButtonSizeExample = @"<SectionContentRow>
    <MudButton Variant=""Variant.Text"" Size=""Size.Small"">Small</MudButton>
    <MudButton Variant=""Variant.Text"" Size=""Size.Medium"">Medium</MudButton>
    <MudButton Variant=""Variant.Text"" Size=""Size.Large"">Large</MudButton>
</SectionContentRow>
<SectionContentRow>
    <MudButton Variant=""Variant.Outlined"" Size=""Size.Small"" Color=""Color.Secondary"">Small</MudButton>
    <MudButton Variant=""Variant.Outlined"" Size=""Size.Medium"" Color=""Color.Secondary"">Medium</MudButton>
    <MudButton Variant=""Variant.Outlined"" Size=""Size.Large"" Color=""Color.Secondary"">Large</MudButton>
</SectionContentRow>
<SectionContentRow>
    <MudButton Variant=""Variant.Filled"" Size=""Size.Small"" Color=""Color.Primary"">Small</MudButton>
    <MudButton Variant=""Variant.Filled"" Size=""Size.Medium"" Color=""Color.Primary"">Medium</MudButton>
    <MudButton Variant=""Variant.Filled"" Size=""Size.Large"" Color=""Color.Primary"">Large</MudButton>
</SectionContentRow>
<SectionContentRow>
    <MudIconButton Icon=""@Icons.Material.Delete"" Size=""Size.Small""></MudIconButton>
    <MudIconButton Icon=""@Icons.Material.Delete"" Size=""Size.Medium""></MudIconButton>
    <MudIconButton Icon=""@Icons.Material.Delete"" Size=""Size.Large""></MudIconButton>
</SectionContentRow>";

public const string ButtonTextExample = @"<MudButton Variant=""Variant.Text"">Default</MudButton>
<MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Primary</MudButton>
<MudButton Variant=""Variant.Text"" Color=""Color.Secondary"">Secondary</MudButton>
<MudButton Variant=""Variant.Text"" Disabled=""true"">Disabled</MudButton>";

public const string FabSimpleExample = @"<MudFab Color=""Color.Primary"" Icon=""@Icons.Material.Add"" />
<MudFab Color=""Color.Secondary"" Icon=""@Icons.Material.Edit"" />
<MudFab Icon=""@Icons.Material.Navigation"" Label=""Navigation"" />
<MudFab Icon=""@Icons.Material.Save"" Disabled=""true"" />";

public const string FabSizeExample = @"<SectionContentRow>
    <MudFab Color=""Color.Secondary"" Icon=""@Icons.Material.Add"" Size=""Size.Small"" />
    <MudFab Color=""Color.Secondary"" Icon=""@Icons.Material.Add"" Size=""Size.Medium"" />
    <MudFab Color=""Color.Secondary"" Icon=""@Icons.Material.Add"" Size=""Size.Large"" />
</SectionContentRow>
<SectionContentRow>
    <MudFab Color=""Color.Primary"" Icon=""@Icons.Material.ShoppingCart"" Size=""Size.Small"" Label=""To cart"" />
    <MudFab Color=""Color.Primary"" Icon=""@Icons.Material.ShoppingCart"" Size=""Size.Medium"" Label=""To cart"" />
    <MudFab Color=""Color.Primary"" Icon=""@Icons.Material.ShoppingCart"" Size=""Size.Large"" Label=""To cart"" />
</SectionContentRow>";

public const string CardCombinedExample = @"<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudAvatar Color=""Color.Secondary"">I</MudAvatar>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo=""Typo.body1"">Istra Croatia</MudText>
            <MudText Typo=""Typo.body2"">Peninsula in Europe</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon=""@Icons.Material.Settings"" Color=""Color.Default"" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardMedia Image=""_content/MudBlazor.Docs/images/content-template-pilars.png"" Height=""250"" />
    <MudCardContent>
        <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudIconButton Icon=""@Icons.Material.Favorite"" Color=""Color.Default"" />
        <MudIconButton Icon=""@Icons.Material.Share"" Color=""Color.Default"" />
    </MudCardActions>
</MudCard>";

public const string CardHeaderExample = @"<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo=""Typo.h6"">The Story Book</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon=""@Icons.Material.Settings"" Color=""Color.Default"" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudText>This day everything happend.</MudText>
        <MudText Typo=""Typo.body2"">The quick, brown fox jumps over a lazy dog.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Read More</MudButton>
    </MudCardActions>
</MudCard>";

public const string CardMediaExample = @"<MudCard>
    <MudCardMedia Image=""_content/MudBlazor.Docs/images/content-template-door.png"" Height=""200"" />
    <MudCardContent>
        <MudText Typo=""Typo.h5"">Old Paint</MudText>
        <MudText Typo=""Typo.body2"">Old paint found on a stone house door.</MudText>
        <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Share</MudButton>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Learn More</MudButton>
    </MudCardActions>
</MudCard>";

public const string CardOutlinedExample = @"<MudCard Outlined=""true"">
    <MudCardContent>
        <MudText>Story of the day</MudText>
        <MudText Typo=""Typo.body2"">The quick, brown fox jumps over a lazy dog.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Learn More</MudButton>
    </MudCardActions>
</MudCard>";

public const string CardSimpleExample = @"<MudCard>
    <MudCardContent>
        <MudText>Story of the day</MudText>
        <MudText Typo=""Typo.body2"">The quick, brown fox jumps over a lazy dog.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Learn More</MudButton>
    </MudCardActions>
</MudCard>";

public const string CheckboxBasicExample = @"<MudCheckBox @bind-Checked=""@Basic_CheckBox1""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Basic_CheckBox2"" Color=""Color.Primary""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Basic_CheckBox1"" Color=""Color.Secondary""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Basic_CheckBox1"" Disabled=""true""></MudCheckBox>

@code {
    public bool Basic_CheckBox1 { get; set; } = true;
    public bool Basic_CheckBox2 { get; set; } = false;
    public bool Basic_CheckBox3 { get; set; } = false;
}";

public const string CheckboxConversionExample = @"<MudCheckBox @bind-Checked=""boolean"">bool: @boolean</MudCheckBox>
<MudCheckBox @bind-Checked=""nullable"" Color=""Color.Primary"">bool?: @nullable</MudCheckBox>
<MudCheckBox @bind-Checked=""integer"" Color=""Color.Secondary"">int: @integer</MudCheckBox>
<MudCheckBox @bind-Checked=""str"" Color=""Color.Tertiary"">string: ""@(str)""</MudCheckBox>

@code{
    public bool boolean { get; set; } = true;
    public bool? nullable { get; set; } = true;
    public int integer { get; set; } = 1;
    public string str { get; set; } = ""on"";
}";

public const string CheckboxIndeterminateExample = @"<MudCheckBox @bind-Checked=""value"" Color=""@Color.Primary"">
    Value: @(value == null ? ""null"" : value.ToString())
</MudCheckBox>
<MudButton OnClick=""@(()=>value=null)"">Reset</MudButton>

@code {
    public bool? value { get; set; } = null;
}";

public const string CheckboxLabelExample = @"<MudCheckBox @bind-Checked=""@Label_CheckBox1"" Label=""Default""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Label_CheckBox2"" Label=""Primary"" Color=""Color.Primary""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Label_CheckBox3"" Label=""Secondary"" Color=""Color.Secondary""></MudCheckBox>
<MudCheckBox @bind-Checked=""@Label_CheckBox1"" Disabled=""true"" Label=""Disabled""></MudCheckBox>

@code {
    public bool Label_CheckBox1 { get; set; } = true;
    public bool Label_CheckBox2 { get; set; } = false;
    public bool Label_CheckBox3 { get; set; } = false;
}";

public const string ChipBasicExample = @"<MudChip>Default</MudChip>
<MudChip Color=""Color.Primary"">Primary</MudChip>
<MudChip Color=""Color.Secondary"">Secondary</MudChip>
<MudChip Color=""Color.Info"">Info</MudChip>
<MudChip Color=""Color.Success"">Success</MudChip>
<MudChip Color=""Color.Warning"">Warning</MudChip>
<MudChip Color=""Color.Error"">Error</MudChip>
<MudChip Color=""Color.Dark"">Dark</MudChip>
<MudDivider />
<MudChip Disabled=""true"">Disabled</MudChip>
<MudChip Disabled=""true"" Color=""Color.Primary"">Disabled</MudChip>
<MudChip Disabled=""true"" Color=""Color.Secondary"">Disabled</MudChip>
<MudChip Disabled=""true"" Color=""Color.Info"">Disabled</MudChip>
<MudChip Disabled=""true"" Color=""Color.Success"">Disabled</MudChip>
<MudChip Disabled=""true"" Color=""Color.Warning"">Disabled</MudChip>
<MudChip Disabled=""true"" Color=""Color.Error"">Disabled</MudChip>
<MudChip Disabled=""true"" Color=""Color.Dark"">Disabled</MudChip>";

public const string ChipClosableExample = @"<MudChip Color=""Color.Default"" OnClose=""Closed"">Closable</MudChip>
<MudChip Color=""Color.Error"" OnClose=""Closed"">Closable</MudChip>
<MudChip Color=""Color.Primary"" OnClose=""Closed"" CloseIcon=""@Icons.Material.AlarmAdd"">Closable</MudChip>
<MudChip Color=""Color.Success"" OnClose=""Closed"" CloseIcon=""@Icons.Material.AlarmOn"">Closable</MudChip>

@code {
    void Closed(MudChip chip) {
        // react to chip closed
    }
}";

public const string ChipIconExample = @"<MudChip Icon=""@Icons.Material.Extension"" Color=""Color.Dark"">Extensions</MudChip>
<MudChip Icon=""@Icons.Material.Person"" Color=""Color.Primary"" >Account</MudChip>
<MudChip Icon=""@Icons.Material.FlightTakeoff"" Color=""Color.Secondary"" >Your flight times</MudChip>
<MudChip Icon=""@Icons.Material.VerifiedUser"" Color=""Color.Info"">Verified User</MudChip>";

public const string ChipLabelExample = @"<MudChip Label=""true"">Default</MudChip>
<MudChip Icon=""@Icons.Custom.MudBlazor"" Label=""true"" Color=""Color.Primary"">MudBlazor</MudChip>
<MudChip Icon=""@Icons.Custom.Twitter"" Label=""true"" Color=""Color.Info"" OnClose=""CloseChip"">New Tweets</MudChip>
<MudChip Icon=""@Icons.Custom.Radioactive"" Label=""true"" Color=""Color.Warning"" Style=""color:black;"">Radioactive Areas</MudChip>

@code {
    void CloseChip()
    {
        // Code..
    }
}";

public const string ChipOutlinedExample = @"<MudChip Variant=""Variant.Outlined"">Default</MudChip>
<MudChip Color=""Color.Primary"" Variant=""Variant.Outlined"">Primary</MudChip>
<MudChip Color=""Color.Secondary"" Variant=""Variant.Outlined"">Secondary</MudChip>
<MudChip Color=""Color.Info"" Variant=""Variant.Outlined"">Info</MudChip>
<MudChip Icon=""@Icons.Material.Storage"" Label=""true"" Color=""Color.Dark"" Variant=""Variant.Outlined"">Server Storage</MudChip>
<MudChip Icon=""@Icons.Custom.Twitter"" Label=""true"" Color=""Color.Info"" Variant=""Variant.Outlined"">New Tweets</MudChip>
<MudChip Icon=""@Icons.Custom.Radioactive"" Label=""true"" Color=""Color.Warning"" Variant=""Variant.Outlined"">Radioactive Areas</MudChip>";

public const string ChipSizeExample = @"<MudChip Size=""Size.Small"">Small</MudChip>
<MudChip Size=""Size.Medium"">Medium</MudChip>
<MudChip Size=""Size.Large"">Large</MudChip>";

public const string ChipSetAddRemoveExample = @"<MudChipSet AllClosable=""true"" OnClose=""Closed"">
    @foreach (var value in values)
    {
        <MudChip Text=""@value""></MudChip>
    }
</MudChipSet>

Add chips <MudIconButton Icon=""@Icons.Material.Add"" OnClick=""Add""></MudIconButton>





@code
{
    int i = 1;
    List<string> values = new List<string>();
    public void Add() => values.Add(""Value "" + (i++));
    public void Closed(MudChip chip) => values.Remove(chip.Text);
}";

public const string ChipSetBasicExample = @"<MudChipSet @bind-SelectedChip=""selected"" Filter=""true"" Mandatory=""@mandatory"">
    <MudChip Text=""grey"">Default</MudChip>
    <MudChip Text=""purple"" Color=""Color.Primary"">Primary</MudChip>
    <MudChip Text=""pink"" Color=""Color.Secondary"">Secondary</MudChip>
    <MudChip Text=""blue"" Color=""Color.Info"">Info</MudChip>
    <MudChip Text=""green"" Color=""Color.Success"">Success</MudChip>
    <MudChip Text=""orange"" Color=""Color.Warning"">Warning</MudChip>
    <MudChip Text=""red"" Color=""Color.Error"">Error</MudChip>
    <MudChip Text=""black"" Color=""Color.Dark"">Dark</MudChip>
</MudChipSet>


@if (selected != null)
{
    <MudText>You selected the <MudText Color=""@selected.Color"" Inline=""true"">@selected.Text</MudText> chip.</MudText>
}
else
{
    <MudText>Select a chip.</MudText>
}
<MudCheckBox @bind-Checked=""mandatory"">Mandatory</MudCheckBox>


@code
{
    bool mandatory = true;
    MudChip selected;
}";

public const string ChipSetMultiselectionExample = @"<MudChipSet @bind-SelectedChips=""selected"" MultiSelection=""true"" Filter=""filter"">
    <MudChip Text=""Milk""></MudChip>
    <MudChip Text=""Eggs""></MudChip>
    <MudChip Text=""Soap""></MudChip>
    <MudChip Text=""Corn flakes""></MudChip>
    <MudChip Text=""Salad""></MudChip>
    <MudChip Text=""Apples""></MudChip>
    <MudChip Text=""Red wine""></MudChip>
</MudChipSet>


@if (selected != null && selected.Length>0)
{
    <MudText>You selected @string.Join("", "", selected.Select(chip=>chip.Text)).</MudText>
}
else
{
    <MudText>Nothing selected.</MudText>
}
<MudCheckBox @bind-Checked=""filter"">Filter</MudCheckBox>

@code
{
    bool filter = true;
    MudChip[] selected;
}";

public const string ContainedFixedExample = @"<MudPaper>
    <MudContainer Fixed=""true""></MudContainer>
</MudPaper>";

public const string ContainerFluidExample = @"<MudPaper>
    <MudContainer MaxWidth=""MaxWidth.Small""></MudContainer>
</MudPaper>";

public const string DatePickerBasicUsageExample = @"<MudDatePicker Label=""Picker in menu"" Value=""2020-10-19""/>
<MudDatePicker Label=""Only Calendar"" Value=""2020-10-19"" DisableToolbar=""true"" HelperText=""No header"" />
<MudDatePicker Label=""Date Format"" HelperText=""For custom cultures"" DateFormat=""dd/MM/yyyy"" Date=""@(new System.DateTime(2020,10,19))"" />";

public const string DatePickerColorExample = @"<MudDatePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Success"" Rounded=""true"" Date=""@(DateTime.Today.AddDays(1))"" />
<MudDatePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Secondary"" Rounded=""true"" Date=""@(DateTime.Today.AddDays(1))"" />";

public const string DatePickerElevationExample = @"<MudDatePicker PickerVariant=""PickerVariant.Static"" Rounded=""true"" Elevation=""1"" Date=""@(DateTime.Today.AddDays(1))"" />
<MudDatePicker PickerVariant=""PickerVariant.Static"" Rounded=""true"" Elevation=""12"" Date=""@(DateTime.Today.AddDays(1))"" />";

public const string DatePickerStaticExample = @"<MudDatePicker PickerVariant=""PickerVariant.Static"" Date=""@(DateTime.Today.AddDays(1))""/>
<MudDatePicker PickerVariant=""PickerVariant.Static"" Orientation=""Orientation.Landscape"" Date=""@(DateTime.Today.AddDays(1))""/>";

public const string DatePickerViewsExample = @"<MudDatePicker Label=""Year"" OpenTo=""OpenTo.Year"" Value=""2020-10-19""/>
<MudDatePicker Label=""Month"" OpenTo=""OpenTo.Month"" Value=""2020-10-19"" />
<MudDatePicker Label=""Date""  Value=""2020-10-19"" />";

public const string DialogOptionsExample = @"@inject IDialogService Dialog

<MudButton OnClick=""@((e) => OpenDialog(maxWidth))"">Open MaxWidth Dialog</MudButton>
<MudButton OnClick=""@((e) => OpenDialog(closeButton))"" Color=""Color.Primary"">Close Button Dialog</MudButton>
<MudButton OnClick=""@((e) => OpenDialog(noHeader))"" Color=""Color.Secondary"">No header Dialog</MudButton>
<MudButton OnClick=""@((e) => OpenDialog(disableBackdropClick))"" Color=""Color.Tertiary"">Disable backdrop dialog</MudButton>


@code {
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    DialogOptions closeButton = new DialogOptions() { CloseButton = true };
    DialogOptions noHeader = new DialogOptions() {  NoHeader = true };
    DialogOptions disableBackdropClick = new DialogOptions() { DisableBackdropClick = true };

    async Task OpenDialog(DialogOptions options)
    {
        Dialog.Show<DialogUsageExample_Dialog>(""Custom Options Dialog"", options);
    }
}";

public const string DialogPassingDataExample = @"@using MudBlazor.Docs.Pages.Components.Dialog.Models

@inject IDialogService Dialog

<div class=""d-flex"">
    @foreach (var item in Servers)
    {
        <MudPaper Class=""d-flex align-center pa-2 mx-2"">
            <MudText>@item.Name</MudText>
            <MudButton Variant=""Variant.Text"" Color=""Color.Error"" OnClick=""@((e) => DeleteServer(item))"">Delete</MudButton>
        </MudPaper>
    }
</div>

@code {

    async Task DeleteServer(Server server)
    {
        var parameters = new DialogParameters();
        parameters.Add(""server"", server);

        var dialog = Dialog.Show<DialogPassingDataExample_Dialog>(""Delete Server"", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            //In a real world scenario we would reload the data from the source here since we ""removed"" it in the dialog already.
            Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
            Servers.RemoveAll(item => item.Id == deletedServer);
        }
    }

    //Pretend we are loading this data from a database or API
    public List<Server> Servers { get; } = new List<Server>
    {
        new Server{ Id = Guid.NewGuid(), Name = ""Server1"", Location = ""Denmark"", IpAddress = ""193.254.123.1"" },
        new Server{ Id = Guid.NewGuid(), Name = ""Server2"", Location = ""Sweden"", IpAddress = ""127.0.0.1"" },
        new Server{ Id = Guid.NewGuid(), Name = ""Server3"", Location = ""Russia"", IpAddress = ""173.164.2.1"" },
        new Server{ Id = Guid.NewGuid(), Name = ""Server4"", Location = ""Germany"", IpAddress = ""193.168.1.1"" },
    };
}";

public const string DialogScrollableExample = @"@inject IDialogService Dialog

<MudButton Variant=""Variant.Outlined"" Color=""Color.Primary"" @onclick=""OpenSimpleDialog"">Scrollable Dialog</MudButton>

@code {
    bool HideSourceSimpleDialog = true;

    public void ShowSimpleDialogSource()
    {
        HideSourceSimpleDialog = !HideSourceSimpleDialog;
    }

    bool license_accepted = false;

    async Task OpenSimpleDialog()
    {
        var userSelect = Dialog.Show<DialogScrollableExample_Dialog>(""MudBlazor License"");
        var result = await userSelect.Result;

        if (!result.Cancelled)
        {
            license_accepted = (bool)(result.Data ?? false);
        }
    }
}";

public const string DialogTemplateExample = @"@inject IDialogService Dialog


<MudButton @onclick=""DeleteUser"" Variant=""Variant.Filled"" Color=""Color.Error"">Delete Records</MudButton>
<MudButton @onclick=""Confirm"" Variant=""Variant.Filled"" Color=""Color.Success"">Remove Email</MudButton>
<MudButton @onclick=""Download"" Variant=""Variant.Filled"" Color=""Color.Warning"">Slow Computer</MudButton>

@code {

    async Task DeleteUser()
    {
        var parameters = new DialogParameters();
        parameters.Add(""ContentText"", ""Do you really want to delete these records? This process cannot be undone."");
        parameters.Add(""ButtonText"", ""Delete"");
        parameters.Add(""Color"", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        Dialog.Show<DialogTemplateExample_Dialog>(""Delete"", parameters, options);
    }

    async Task Confirm()
    {
        var parameters = new DialogParameters();
        parameters.Add(""ContentText"", ""Are you sure you want to remove thisguy@emailz.com from this account?"");
        parameters.Add(""ButtonText"", ""Yes"");
        parameters.Add(""Color"", Color.Success);

        Dialog.Show<DialogTemplateExample_Dialog>(""Confirm"", parameters);
    }

    async Task Download()
    {
        var parameters = new DialogParameters();
        parameters.Add(""ContentText"", ""Your computer seems very slow, click the download button to download free RAM."");
        parameters.Add(""ButtonText"", ""Download"");
        parameters.Add(""Color"", Color.Info);

        Dialog.Show<DialogTemplateExample_Dialog>(""Slow Computer Detected"", parameters);
    }
}";

public const string DialogUsageExample = @"@inject IDialogService Dialog


<MudButton @onclick=""OpenDialog"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Open Simple Dialog
</MudButton>


@code {

    async Task OpenDialog()
    {
       Dialog.Show<DialogUsageExample_Dialog>(""Simple Dialog"");
    }
}";

public const string DividerInsertExample = @"<MudList>
    <MudListItem Avatar=""@Icons.Material.TrendingUp"">
        Trending
    </MudListItem>
    <MudDivider DividerType=""DividerType.Inset"" />
    <MudListItem Avatar=""@Icons.Material.StarRate"">
        Most Stars
    </MudListItem>
    <MudDivider DividerType=""DividerType.Inset"" />
    <MudListItem Avatar=""@Icons.Material.History"">
        History
    </MudListItem>
</MudList>";

public const string DividerListExample = @"<MudList Clickable=""true"">
    <MudListItem>Inbox</MudListItem>
    <MudDivider />
    <MudListItem>Sent</MudListItem>
    <MudDivider />
    <MudListItem>Drafts</MudListItem>
    <MudDivider />
    <MudListItem>Spam</MudListItem>
</MudList>";

public const string DividerMiddleExample = @"<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo=""Typo.h5"">Uranium-235</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText>This is the type of uranium used in the RBMK reactors.</MudText>
        <MudDivider DividerType=""DividerType.Middle"" Class=""my-6""/>
        <MudText GutterBottom=""true"">Select Reactor Type</MudText>
        <MudChip Color=""Color.Secondary"">RBMK-1000</MudChip><MudChip>RBMK-1500</MudChip><MudChip>RBMKP-2400</MudChip>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Read More</MudButton>
    </MudCardActions>
</MudCard>";

public const string DividerVerticalExample = @"<MudPaper Outlined=""true"">
    <MudIcon Icon=""@Icons.Material.FormatAlignRight"" />
    <MudIcon Icon=""@Icons.Material.FormatAlignCenter"" />
    <MudIcon Icon=""@Icons.Material.FormatAlignLeft"" />
    <MudDivider Vertical=""true"" FlexItem=""true"" />
    <MudIcon Icon=""@Icons.Material.FormatBold"" />
    <MudIcon Icon=""@Icons.Material.FormatItalic"" />
    <MudIcon Icon=""@Icons.Material.FormatUnderlined"" />
</MudPaper>";

public const string DrawerAnchorExample = @"<MudLayout>
    <MudAppBar Elevation=""1"">
        <MudIconButton Icon=""@Icons.Custom.GitHub"" Color=""Color.Inherit"" Link=""https://github.com/Garderoben/MudBlazor"" Target=""_blank"" />
        <MudAppBarSpacer />
        <MudIconButton Icon=""@Icons.Material.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@ToggleDrawer"" />
    </MudAppBar>
    <MudDrawer @bind-Open=""@open"" Clipped=""@clipped"" Anchor=""Anchor.Right"" Elevation=""1"">
        <MudDrawerHeader>
            <MudText Typo=""Typo.h6"">My App</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class=""pt-16 px-16"">
        <MudContainer Class=""mt-6"">
            <MudSwitch @bind-Checked=""clipped"" Color=""@Color.Secondary"">Drawer clipped</MudSwitch>
            <LoremIpsum />
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code{
    bool open = true;
    bool clipped = false;

    void ToggleDrawer()
    {
        open = !open;
    }
}";

public const string DrawerClippingExample = @"<MudLayout>
    <MudAppBar Elevation=""1"">
        <MudIconButton Icon=""@Icons.Material.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@ToggleDrawer"" />
        <MudAppBarSpacer />
        <MudIconButton Icon=""@Icons.Custom.GitHub"" Color=""Color.Inherit"" Link=""https://github.com/Garderoben/MudBlazor"" Target=""_blank"" />
    </MudAppBar>
    <MudDrawer @bind-Open=""@open"" Clipped=""@clipped"" Elevation=""1"">
        <MudDrawerHeader>
            <MudText Typo=""Typo.h6"">My App</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class=""pt-16 px-16"">
        <MudContainer Class=""mt-6"">
            <MudSwitch @bind-Checked=""clipped"" Color=""@Color.Secondary"">Drawer clipped</MudSwitch>
            <LoremIpsum/>
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code{
    bool open = true;
    bool clipped = true;
    void ToggleDrawer()
    {
        open = !open;
    }
}";

public const string DrawerDoubleExample = @"<MudLayout>
    <MudAppBar Elevation=""1"">
        <MudIconButton Icon=""@Icons.Material.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@ToggleDrawerOne"" />
        <MudAppBarSpacer />
        <MudIconButton Icon=""@Icons.Material.Settings"" Color=""Color.Inherit"" OnClick=""@ToggleDrawerTwo""  />
    </MudAppBar>
    <MudDrawer @bind-Open=""@drawerOneOpen"" Clipped=""@drawerOneClipped"" Anchor=""Anchor.Left"" Elevation=""25"">
        <MudDrawerHeader>
            <MudText Typo=""Typo.h6"">My App</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudDrawer @bind-Open=""@drawerTwoOpen"" Clipped=""@drawerTwoClipped"" Anchor=""Anchor.Right"" Elevation=""1"">
        <MudDrawerHeader>
            <MudText Typo=""Typo.h6"">Settings</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match=""NavLinkMatch.All"">Profile</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Orders</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Order History</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class=""pt-16 px-16"">
        <MudContainer MaxWidth=""MaxWidth.Small"" Class=""mt-6"">
            <MudSwitch @bind-Checked=""drawerOneClipped"" Color=""@Color.Primary"">Drawer One clipped</MudSwitch>
            <MudSwitch @bind-Checked=""drawerTwoClipped"" Color=""@Color.Secondary"">Drawer Two clipped</MudSwitch>
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code{
    bool drawerOneOpen = true;
    bool drawerOneClipped = false;

    void ToggleDrawerOne()
    {
        drawerOneOpen = !drawerOneOpen;
    }

    bool drawerTwoOpen = true;
    bool drawerTwoClipped = true;

    void ToggleDrawerTwo()
    {
        drawerTwoOpen = !drawerTwoOpen;
    }
}";

public const string DrawerPersistentExample = @"<MudLayout>
    <MudAppBar Elevation=""1"">
        <MudIconButton Icon=""@Icons.Material.Menu"" Color=""Color.Inherit"" Edge=""Edge.Start"" OnClick=""@ToggleDrawer"" />
        <MudAppBarSpacer />
        <MudIconButton Icon=""@Icons.Custom.GitHub"" Color=""Color.Inherit"" Link=""https://github.com/Garderoben/MudBlazor"" Target=""_blank"" />
    </MudAppBar>
    <MudDrawer @bind-Open=""@open"" Elevation=""1"">
        <MudDrawerHeader>
            <MudText Typo=""Typo.h6"">My App</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match=""NavLinkMatch.All"">Store</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Library</MudNavLink>
            <MudNavLink Match=""NavLinkMatch.All"">Community</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class=""pt-16 px-16"">
        <MudContainer Class=""mt-6"">
            <LoremIpsum />
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code{
    bool open = true;

    void ToggleDrawer()
    {
        open = !open;
    }
}";

public const string ExpansionPanelDisabledExample = @"<MudExpansionPanels>
    <MudExpansionPanel Text=""Panel One"">
        Panel One Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Two"" Disabled=""true"">
        Panel Two Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Three"">
        Panel Three Content
    </MudExpansionPanel>
</MudExpansionPanels>";

public const string ExpansionPanelMultiExample = @"<MudExpansionPanels MultiExpansion=""true"">
    <MudExpansionPanel Text=""Panel One"">
        Panel One Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Two"">
        Panel Two Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Three"">
        Panel Three Content
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Four"">
        Panel Four Content
    </MudExpansionPanel>
</MudExpansionPanels>";

public const string ExpansionPanelSimpleExample = @"<MudExpansionPanels>
    <MudExpansionPanel Text=""Panel One"">
        <LoremIpsum/>
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Two"">
        <LoremIpsum />
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Three"">
        <LoremIpsum />
    </MudExpansionPanel>
    <MudExpansionPanel Text=""Panel Four"">
        <LoremIpsum />
    </MudExpansionPanel>
</MudExpansionPanels>";

public const string FieldBasicExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Standard"" Variant=""Variant.Text"">Some Content <MudIcon Icon=""@Icons.Material.Favorite"" Color=""@Color.Warning"" /> follows here</MudField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Filled"" Variant=""Variant.Filled"">Some Content <MudIcon Icon=""@Icons.Material.Favorite"" Color=""@Color.Warning"" /> follows here</MudField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudField Label=""Outlined"" Variant=""Variant.Outlined"">Some Content <MudIcon Icon=""@Icons.Material.Favorite"" Color=""@Color.Warning"" /> follows here</MudField>
    </MudItem>
</MudGrid>";

public const string FieldMinimizePaddingExample = @"<MudGrid>
    <MudItem xs=""12"">
        <MudField Label=""Example with RadioGroup"" Variant=""Variant.Text"" InnerPadding=""false"">
            <MudRadioGroup>
                <MudRadio Label=""Option 1""></MudRadio>
                <MudRadio Label=""Option 2""></MudRadio>
                <MudRadio Label=""Option 3""></MudRadio>
            </MudRadioGroup>
        </MudField>
    </MudItem>
    <MudItem xs=""12"">
        <MudField Label=""Example with RadioGroup"" Variant=""Variant.Filled"" InnerPadding=""false"">
            <MudRadioGroup>
                <MudRadio Label=""Option 1""></MudRadio>
                <MudRadio Label=""Option 2""></MudRadio>
                <MudRadio Label=""Option 3""></MudRadio>
            </MudRadioGroup>
        </MudField>
    </MudItem>
    <MudItem xs=""12"">
        <MudField Label=""Example with RadioGroup"" Variant=""Variant.Outlined"" InnerPadding=""false"">
            <MudRadioGroup>
                <MudRadio Label=""Option 1""></MudRadio>
                <MudRadio Label=""Option 2""></MudRadio>
                <MudRadio Label=""Option 3""></MudRadio>
            </MudRadioGroup>
        </MudField>
    </MudItem>
</MudGrid>";

public const string EditFormExample = @"@using System.ComponentModel.DataAnnotations

<div style=""max-width: 400px;"">
    <EditForm Model=""@model"" OnValidSubmit=""OnValidSubmit"">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label=""First name"" HelperText=""Max. 8 characters""
                              @bind-Value=""model.Username"" For=""@(() => model.Username)"" />
                <MudTextField Label=""Email"" Class=""mt-3""
                              @bind-Value=""model.Email"" For=""@(() => model.Email)"" />
                <MudTextField Label=""Password"" HelperText=""Choose a strong password"" Class=""mt-3""
                              @bind-Value=""model.Password"" For=""@(() => model.Password)"" InputType=""InputType.Password"" />
                <MudTextField Label=""Password"" HelperText=""Repeat the password"" Class=""mt-3""
                              @bind-Value=""model.Password2"" For=""@(() => model.Password2)"" InputType=""InputType.Password"" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType=""ButtonType.Submit"" Variant=""Variant.Filled"" Color=""Color.Primary"" Class=""ml-auto"">Register</MudButton>
            </MudCardActions>
        </MudCard>
        <MudText Typo=""Typo.body2"" Align=""Align.Center"" Class=""my-4"">
            Fill out the form correctly to see the success message.
        </MudText>

        <MudExpansionPanels>
            <MudExpansionPanel Text=""Show Validation Summary"">
                @if (success)
                {
                    <MudText Color=""Color.Success"">Success</MudText>
                }
                else
                {
                    <MudText Color=""@Color.Error"">
                        <ValidationSummary />
                    </MudText>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>
    </EditForm>
</div>

@code {
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = ""Name length can't be more than 8."")]
        public string Username { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = ""Password must be at least 8 characters long."", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

}";

public const string MudFormExample = @"@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations


<div style=""max-width: 400px;"">
    <MudCard>
        <MudCardContent>
            <MudForm @ref=""form"" @bind-IsValid=""@success"" @bind-Errors=""@errors"">
                <MudTextField T=""string"" Label=""Username"" Required=""true"" RequiredError=""User name is required!""/>
                <MudTextField T=""string"" Class=""mt-3"" Label=""Email"" Required=""true"" RequiredError=""Email is required!""
                              Validation=""@(new EmailAddressAttribute() {ErrorMessage = ""The email address is invalid""})""/>
                <MudTextField T=""string"" Class=""mt-3"" Label=""Password"" HelperText=""Choose a strong password"" @ref=""pwField1""
                              InputType=""InputType.Password""
                              Validation=""@(new Func<string, IEnumerable<string>>(PasswordStrength))"" Required=""true""
                              RequiredError=""Password is required!""/>
                <MudTextField T=""string"" Class=""mt-3""
                              Label=""Password"" HelperText=""Repeat the password"" InputType=""InputType.Password""
                              Validation=""@(new Func<string, string>(PasswordMatch))""/>
                <MudCheckBox T=""bool"" Required=""true"" RequiredError=""You must agree"" Class=""ml-n2""
                             Label=""I agree that MudBlazor is awesome!""/>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" Disabled=""@(!success)"" Class=""ml-auto"">Register</MudButton>
        </MudCardActions>
    </MudCard>
    
    <MudPaper Class=""pa-4 justify-center my-4 mud-text-align-center"">
        <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""@(()=>form.Validate())"">Validate</MudButton>
        <MudButton Variant=""Variant.Filled"" Color=""Color.Secondary"" OnClick=""@(()=>form.Reset())"" Class=""mx-2"">Reset</MudButton>
        <MudButton Variant=""Variant.Filled"" OnClick=""@(()=>form.ResetValidation())"">Reset Validation</MudButton>
    </MudPaper>

    <MudExpansionPanels>
        <MudExpansionPanel Text=""@($""Show Errors ({errors.Length})"")"">
            @foreach (var error in errors)
            {
                <MudText Color=""@Color.Error"">@error</MudText>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
</div>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return ""Password is required!"";
            yield break;
        }
        if (pw.Length < 8)
            yield return ""Password must be at least of length 8"";
        if (!Regex.IsMatch(pw, @""[A-Z]""))
            yield return ""Password must contain at least one capital letter"";
        if (!Regex.IsMatch(pw, @""[a-z]""))
            yield return ""Password must contain at least one lowercase letter"";
        if (!Regex.IsMatch(pw, @""[0-9]""))
            yield return ""Password must contain at least one digit"";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return ""Passwords don't match"";
        return null;
    }

}";

public const string GridBasicExample = @"<MudGrid>
    <MudItem xs=""12"">
        <MudPaper>xs=12</MudPaper>
    </MudItem>
    <MudItem xs=""6"">
        <MudPaper>xs=6</MudPaper>
    </MudItem>
    <MudItem xs=""6"">
        <MudPaper>xs=6</MudPaper>
    </MudItem>
    <MudItem xs=""3"">
        <MudPaper>xs=3</MudPaper>
    </MudItem>
    <MudItem xs=""3"">
        <MudPaper>xs=3</MudPaper>
    </MudItem>
    <MudItem xs=""3"">
        <MudPaper>xs=3</MudPaper>
    </MudItem>
    <MudItem xs=""3"">
        <MudPaper>xs=3</MudPaper>
    </MudItem>
</MudGrid>";

public const string GridSpacingExample = @"<MudGrid>
    <MudItem xs=""12"">
        <MudGrid Spacing=""@spacing"" Justify=""Justify.Center"">
            <MudItem>
                <MudPaper />
            </MudItem>
            <MudItem>
                <MudPaper />
            </MudItem>
            <MudItem>
                <MudPaper />
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>
<MudPaper Class=""demo-grid-paper"" Elevation=""0"">
    <MudButton Color=""Color.Primary"" OnClick=""@AddSpacing"">Change Spacing</MudButton>
    <MudAppBarSpacer></MudAppBarSpacer>
    <MudText>Spacing: @spacing</MudText>
</MudPaper>

@code {
    public int spacing { get; set; } = 2;
    void AddSpacing()
    {
        if (spacing >= 10)
        {
            spacing = 0;
        }
        else
        {
            spacing += 1;
        }
        StateHasChanged();
    }
}";

public const string GridWithBreakpointsExample = @"<MudGrid>
    <MudItem xs=""12"">
        <MudPaper>xs=12</MudPaper>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudPaper>xs=12 sm=6</MudPaper>
    </MudItem>
    <MudItem xs=""12"" sm=""6"">
        <MudPaper>xs=12 sm=6</MudPaper>
    </MudItem>
    <MudItem xs=""6"" sm=""3"">
        <MudPaper>xs=6 sm=3</MudPaper>
    </MudItem>
    <MudItem xs=""6"" sm=""3"">
        <MudPaper>xs=6 sm=3</MudPaper>
    </MudItem>
    <MudItem xs=""6"" sm=""3"">
        <MudPaper>xs=6 sm=3</MudPaper>
    </MudItem>
    <MudItem xs=""6"" sm=""3"">
        <MudPaper>xs=6 sm=3</MudPaper>
    </MudItem>
</MudGrid>";

public const string BrowserResizeEventExample = @"@using MudBlazor.Services

<MudCard Class=""pa-5"">
    <MudText>Resize the window and see width and height change:<br /> 
        Browser window is @(width)x@(height)px</MudText>
</MudCard>

@code
{
    [Inject] IResizeListenerService ResizeListener { get; set; }

    int width = 0;
    int height = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ResizeListener.OnResized += OnResized;
        }
        var size = await ResizeListener.GetBrowserWindowSize();
        height = size.Height;
        width = size.Width;
        await base.OnAfterRenderAsync(firstRender);
    }

    private void OnResized(object sender, BrowserWindowSize size)
    {
        width = size.Width;
        height = size.Height;
        InvokeAsync(StateHasChanged);
    }
}";

public const string HiddenExample = @"@using MudBlazor.Services

<MudHidden Breakpoint=""Breakpoint.Xl"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>XL</MudText>
    </MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.Lg"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>LG</MudText>
    </MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.Md"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>MD</MudText>
    </MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.Sm"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>SM</MudText>
    </MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.Xs"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>XS</MudText>
    </MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.LgAndUp"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>LG and Up</MudText>
    </MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.MdAndUp"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>MD and Up</MudText>
    </MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.SmAndUp"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>SM and Up</MudText>
    </MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.LgAndDown"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>LG and Down</MudText>
    </MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.MdAndDown"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>MD and Down</MudText>
    </MudCard>
</MudHidden>
<MudHidden Breakpoint=""Breakpoint.SmAndDown"" Invert=""true"">
    <MudCard Class=""pa-5"">
        <MudText>SM and Down</MudText>
    </MudCard>
</MudHidden>";

public const string HighlighterUntilNextBoundaryExample = @"<MudTextField Style=""max-width:250px"" @bind-Value=""@highlightedText"" Immediate=""true"" Label=""Highlighted Text"" />
<MudPaper Class=""pa-4 mt-4"" Elevation=""0"">
    @foreach (var paragraph in paragraphs)
    {
        <MudText @key=""paragraph"" Class=""ma-2"">
            <MudHighlighter Text=""@paragraph""
                         HighlightedText=""@highlightedText""
                         UntilNextBoundary=""@untilNextBoundary""
                         CaseSensitive=""@caseSensitive""
                         Class=""@(untilNextBoundary ? ""pa-1 mud-elevation-2 mud-theme-primary"":"""")"" />
        </MudText>
    }

</MudPaper>
<MudSwitch @bind-Checked=""@untilNextBoundary"" Label=""UntilNextBoundary"" Color=""Color.Primary"" />
<MudSwitch @bind-Checked=""@caseSensitive"" Label=""CaseSensitive"" Color=""Color.Primary"" />


@code{
    string highlightedText = ""Mud"";
    bool untilNextBoundary;
    bool caseSensitive;
    IEnumerable<string> paragraphs = new List<string>
{
        ""MudBlazor is an ambitious Material Design component framework for Blazor with an emphasis on ease of use and clear structure."",
        ""MudLists are easily customizable and scrollable lists. Make them suit your needs with avatars, icons, or something like checkboxes."",
        ""Use mud-* classes to customize your MudBlazor components.""
    };

}";

public const string HighlighterWithCustomStyleExample = @"<MudPaper Elevation=""0"">
    <MudList>
        <MudListSubheader>
            <MudTextField @bind-Value=""@searchTerm"" AdornmentIcon=""@Filled.Brush""
                          Adornment=""Adornment.End"" Immediate=""true"" Variant=""Variant.Outlined"" />
        </MudListSubheader>

        @foreach (var sentence in sentences)
        {
            <MudListItem @key=""sentence"" Icon=""@Filled.Folder"">
                <MudHighlighter Class=""mud-primary-text""
                             Style=""background-color:transparent;font-weight:bold""
                             Text=""@sentence""
                             HighlightedText=""@searchTerm"" />
            </MudListItem>
        }
    </MudList>
</MudPaper>

@code {
    string searchTerm = ""it"";
    IEnumerable<string> sentences = new List<string>
    {
        ""This is the first item"", ""This is the second item"", ""This is the third item""
    };


}";

public const string HighlighterWithListExample = @"<MudPaper Elevation=""0"">
    <MudList>
        <MudListSubheader>
            <MudTextField @bind-Value=""@searchTerm"" AdornmentIcon=""@Filled.Brush""
                          Adornment=""Adornment.End"" Immediate=""true"" Variant=""Variant.Outlined"" />
        </MudListSubheader>

        @foreach (var sentence in sentences)
        {
            <MudListItem @key=""sentence"" Icon=""@Filled.Folder"">
                <MudHighlighter Text=""@sentence"" HighlightedText=""@searchTerm"" />
            </MudListItem>
        }
    </MudList>
</MudPaper>

@code {
    string searchTerm = ""item"";
    IEnumerable<string> sentences = new List<string>
    {
        ""This is the first item"", ""This is the second item"", ""This is the third item""
    };


}";

public const string HighlighterWithTableExample = @"@using MudBlazor.Docs.Data

<MudTable Items=""GetElements()"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value=""@searchTerm"" Placeholder=""Search"" Adornment=""Adornment.End"" AdornmentIcon=""@Filled.Search"" IconSize=""Size.Medium"" Class=""mt-0"" Immediate=""true""></MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh>Name</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel=""Name"">
            <MudHighlighter Text=""@context.Name"" HighlightedText=""@searchTerm"" />
        </MudTd>
    </RowTemplate>

</MudTable>

@code {

    string searchTerm = ""ch"";

    IEnumerable<Element> GetElements()
    {
        var allElements = PeriodicTable.GetElements();
        if (string.IsNullOrWhiteSpace(searchTerm)) return allElements;

        var filteredElements = allElements
            .Where(e => e.Name.ToUpper().Contains(searchTerm.ToUpper()));

        return filteredElements;
    }
}";

public const string IconButtonSimpleExample = @"<MudIconButton Icon=""@Icons.Material.Delete""></MudIconButton>
<MudIconButton Icon=""@Icons.Custom.GitHub"" Color=""Color.Primary""></MudIconButton>
<MudIconButton Icon=""@Icons.Material.Favorite"" Color=""Color.Secondary""></MudIconButton>
<MudIconButton Icon=""@Icons.Material.Share"" Disabled=""true""></MudIconButton>";

public const string IconToggleButtonExample = @"<MudIconButton Icon=""@Icons.Material.Delete""></MudIconButton>
<MudIconButton Icon=""@Icons.Custom.GitHub"" Color=""Color.Primary""></MudIconButton>
<MudIconButton Icon=""@Icons.Material.Favorite"" Color=""Color.Secondary""></MudIconButton>
<MudIconButton Icon=""@Icons.Material.Share"" Disabled=""true""></MudIconButton>";

public const string IconsColorExample = @"<MudIcon Icon=""@Icons.Custom.Radioactive"" Color=""Color.Default"" />
<MudIcon Icon=""@Icons.Custom.Radioactive"" Color=""Color.Primary"" />
<MudIcon Icon=""@Icons.Custom.Radioactive"" Color=""Color.Secondary"" />
<MudIcon Icon=""@Icons.Custom.Radioactive"" Color=""Color.Success"" />
<MudIcon Icon=""@Icons.Custom.Radioactive"" Color=""Color.Info"" />
<MudIcon Icon=""@Icons.Custom.Radioactive"" Color=""Color.Warning"" />
<MudIcon Icon=""@Icons.Custom.Radioactive"" Color=""Color.Error"" />
<MudIcon Icon=""@Icons.Custom.Radioactive"" Color=""Color.Dark"" />";

public const string IconsFontAwesomeExample = @"<link href=""https://use.fontawesome.com/releases/v5.14.0/css/all.css"" rel=""stylesheet"">
<MudIcon FontClass=""fab fa-internet-explorer"" Color=""Color.Primary"" />
<MudIcon FontClass=""fab fa-angellist"" Color=""Color.Secondary"" />
<MudIcon FontClass=""fas fa-dragon"" Color=""Color.Success"" />
<MudIcon FontClass=""fas fa-toilet-paper-slash"" />
<MudIcon FontClass=""fas fa-toilet-paper-slash"" Size=""Size.Small"" />
<MudIcon FontClass=""fas fa-toilet-paper-slash"" Size=""Size.Large"" />";

public const string IconsFontIconsExample = @"<link href=""https://fonts.googleapis.com/icon?family=Material+Icons"" rel=""stylesheet"">";

public const string IconsFontMaterialIconsExample = @"<link href=""https://fonts.googleapis.com/icon?family=Material+Icons"" rel=""stylesheet"">

<MudIcon FontIcon=""accessibility"" />
<MudIcon FontIcon=""invert_colors"" Color=""Color.Primary"" />
<MudIcon FontIcon=""android"" Color=""Color.Success"" />
<MudIcon FontIcon=""settings"" />
<MudIcon FontIcon=""settings"" Size=""Size.Small"" />
<MudIcon FontIcon=""settings"" Size=""Size.Large"" />";

public const string IconsSizeExample = @"<MudIcon Icon=""@Icons.Custom.Radioactive"" Size=""Size.Small"" />
<MudIcon Icon=""@Icons.Custom.Radioactive"" />
<MudIcon Icon=""@Icons.Custom.Radioactive"" Size=""Size.Large"" />";

public const string IconsUsageExample = @"<MudIcon Icon=""@Icons.Material.Favorite"" />
<MudIcon Icon=""@Icons.Material.Api"" />
<MudIcon Icon=""@Icons.Material.AddCircle"" />
<MudIcon Icon=""@Icons.Custom.GitHub"" />
<MudIcon Icon=""@Icons.Custom.Google"" />
<MudIcon Icon=""@Icons.Custom.Reddit"" />";

public const string LinkSimpleExample = @"<MudLink Href=""#"">Default</MudLink>
<MudLink Href=""#"" Typo=""Typo.body2"">Different Typography</MudLink>";

public const string LinkUnderlineExample = @"<MudLink Href=""#"">Default</MudLink>
<MudLink Href=""#"" Underline=""Underline.Always"">Always</MudLink>
<MudLink Href=""#"" Underline=""Underline.None"">None</MudLink>";

public const string ListFolderExample = @"<MudList>
    <MudListItem Avatar=""@Icons.Material.Image"">
        Photos
    </MudListItem>
    <MudListItem Avatar=""@Icons.Material.Work"">
        Work
    </MudListItem>
    <MudListItem Avatar=""@Icons.Material.Umbrella"">
        Vacation
    </MudListItem>
</MudList>";

public const string ListInteractiveExample = @"<MudGrid>
    <MudItem xs=""12"" md=""12"">
        <MudCheckBox @bind-Checked=""@Dense"" Label=""Dense"" Color=""Color.Default"" />
        <MudCheckBox @bind-Checked=""@Clickable"" Label=""Clickable"" Color=""Color.Primary"" />
        <MudCheckBox @bind-Checked=""@Gutters"" Label=""Disable Gutters"" Color=""Color.Secondary"" />
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudText Typo=""Typo.h6"" GutterBottom=""true"">Text only</MudText>
        <MudList Clickable=""@Clickable"" Dense=""@Dense"" DisableGutters=""@Gutters"">
            <MudListItem Text=""Single List Item"" />
            <MudListItem Text=""Single List Item"" />
            <MudListItem Text=""Single List Item"" />
        </MudList>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudText Typo=""Typo.h6"" GutterBottom=""true"">Icons with text</MudText>
        <MudList Clickable=""@Clickable"" Dense=""@Dense"" DisableGutters=""@Gutters"">
            <MudListItem Text=""Single List Item"" Icon=""@Icons.Material.Bookmark"" />
            <MudListItem Text=""Single List Item"" Icon=""@Icons.Material.Bookmark"" />
            <MudListItem Text=""Single List Item"" Icon=""@Icons.Material.Bookmark"" />
        </MudList>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudText Typo=""Typo.h6"" GutterBottom=""true"">Avatar with text</MudText>
        <MudList Clickable=""@Clickable"" Dense=""@Dense"" DisableGutters=""@Gutters"">
            <MudListItem Text=""Single List Item"" Avatar=""@Icons.Material.Image"" />
            <MudListItem Text=""Single List Item"" Avatar=""@Icons.Material.Image"" />
            <MudListItem Text=""Single List Item"" Avatar=""@Icons.Material.Image"" />
        </MudList>
    </MudItem>
</MudGrid>



@code {
    public bool Dense { get; set; }
    public bool Clickable { get; set; }
    public bool Gutters { get; set; }
}";

public const string ListNestedExample = @"<MudList Clickable=""true"">
    <MudListSubheader>
        Nested List Items
    </MudListSubheader>
    <MudListItem Icon=""@Icons.Material.Send"">
        Sent mail
    </MudListItem>
    <MudListItem Icon=""@Icons.Material.Drafts"">
        Drafts
    </MudListItem>
    <MudListItem Icon=""@Icons.Material.Inbox"" Text=""Inbox"">
        <NestedList>
            <MudListItem Icon=""@Icons.Material.StarRate"">
                Starred
            </MudListItem>
            <MudListItem Icon=""@Icons.Material.WatchLater"">
                Snoozed
            </MudListItem>
        </NestedList>
    </MudListItem>
</MudList>";

public const string ListSimpleExample = @"<MudList Clickable=""true"">
    <MudListItem Text=""Inbox"" Icon=""@Icons.Material.Inbox""/>
    <MudListItem Text=""Sent"" Icon=""@Icons.Material.Send""/>
    <MudDivider />
    <MudListItem Text=""Trash""/>
    <MudListItem Text=""Spam""/>
</MudList>";

public const string MenuCustomizationExample = @"<MudMenu Label=""Open Menu"">
    <MudMenuItem>Enlist</MudMenuItem>
    <MudMenuItem>Barracks</MudMenuItem>
    <MudMenuItem>Armory</MudMenuItem>
</MudMenu>

<MudMenu Label=""Open Menu"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    <MudMenuItem>Enlist</MudMenuItem>
    <MudMenuItem>Barracks</MudMenuItem>
    <MudMenuItem>Armory</MudMenuItem>
</MudMenu>

<MudMenu Label=""Open Menu"" Variant=""Variant.Outlined"" Color=""Color.Secondary"">
    <MudMenuItem>Enlist</MudMenuItem>
    <MudMenuItem>Barracks</MudMenuItem>
    <MudMenuItem>Armory</MudMenuItem>
</MudMenu>

<MudMenu Label=""Open Menu"" Variant=""Variant.Filled"" Disabled=""true"">
    <MudMenuItem>Enlist</MudMenuItem>
    <MudMenuItem>Barracks</MudMenuItem>
    <MudMenuItem>Armory</MudMenuItem>
</MudMenu>

<MudMenu StartIcon=""@Filled.Translate"" EndIcon=""@Filled.KeyboardArrowDown"" Label=""Swedish"" Color=""Color.Primary"" Variant=""Variant.Filled"">
    <MudMenuItem>Swedish</MudMenuItem>
    <MudMenuItem>Old Norse</MudMenuItem>
</MudMenu>";

public const string MenuIconButtonsExample = @"<MudMenu Icon=""@Icons.Material.MoreVert"">
    <MudMenuItem>Profile</MudMenuItem>
    <MudMenuItem>My account</MudMenuItem>
    <MudMenuItem>Logout</MudMenuItem>
</MudMenu>

<MudMenu Icon=""@Icons.Material.Settings"" Color=""Color.Primary"">
    <MudMenuItem>Profile</MudMenuItem>
    <MudMenuItem>My account</MudMenuItem>
    <MudMenuItem>Logout</MudMenuItem>
</MudMenu>

<MudMenu Icon=""@Icons.Material.Favorite"" Color=""Color.Secondary"">
    <MudMenuItem>Profile</MudMenuItem>
    <MudMenuItem>My account</MudMenuItem>
    <MudMenuItem>Logout</MudMenuItem>
</MudMenu>

<MudMenu Icon=""@Icons.Material.Build"" Disabled=""true"">
    <MudMenuItem>Profile</MudMenuItem>
    <MudMenuItem>My account</MudMenuItem>
    <MudMenuItem>Logout</MudMenuItem>
</MudMenu>";

public const string MenuSimpleExample = @"<MudMenu Label=""Open Menu"">
    <MudMenuItem>Enlist</MudMenuItem>
    <MudMenuItem>Barracks</MudMenuItem>
    <MudMenuItem>Armory</MudMenuItem>
</MudMenu>

<MudMenu Label=""Open Dense Menu"" Dense=""true"">
    <MudMenuItem>Dense Stuff</MudMenuItem>
    <MudMenuItem>Stuff is Dense</MudMenuItem>
    <MudMenuItem>Soo Dense</MudMenuItem>
</MudMenu>";

public const string MenuUsageExample = @"<MudMenu Label=""@Message"" Color=""Color.Primary"">
    <MudMenuItem Link=""/components/button"">Link</MudMenuItem>
    <MudMenuItem OnClick=""AddMessage"">On Click</MudMenuItem>
</MudMenu>

@code {
    string Message { get; set; } = ""Open Usage Menu"";

    void AddMessage()
    {
        Message = ""Menu Item clicked"";
    }
}";

public const string NavMenuExample = @"<MudNavMenu Class=""demo-navmenu"">
    <MudNavLink Href=""/dashboard"">Dashboard</MudNavLink>
    <MudNavLink Href=""/servers"">Servers</MudNavLink>
    <MudNavLink Href=""/billing"">Billing</MudNavLink>
    <MudNavGroup Title=""Settings"" Expanded=""true"">
        <MudNavLink Href=""/users"">Users</MudNavLink>
        <MudNavLink Href=""/security"">Security</MudNavLink>
    </MudNavGroup>
    <MudNavLink Href=""/about"">About</MudNavLink>
</MudNavMenu>";

public const string NavMenuIconExample = @"<MudNavMenu Class=""demo-navmenu"">
    <MudNavLink Href=""/dashboard"" Icon=""@Icons.Material.Dashboard"">Dashboard</MudNavLink>
    <MudNavLink Href=""/servers"" Icon=""@Icons.Material.Storage"">Servers</MudNavLink>
    <MudNavLink Href=""/billing"" Icon=""@Icons.Material.Receipt"">Billing</MudNavLink>
    <MudNavGroup Title=""Settings"" Icon=""@Icons.Material.Settings"" Expanded=""true"">
        <MudNavLink Href=""/users""  Icon=""@Icons.Material.People"">Users</MudNavLink>
        <MudNavLink Href=""/security"" Icon=""@Icons.Material.Security"">Security</MudNavLink>
    </MudNavGroup>
    <MudNavLink Href=""/about"">About</MudNavLink>
</MudNavMenu>";

public const string OverlayAbsoluteExample = @"<MudPaper Class=""px-4 pt-4 pb-16"">
    <MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""ToggleOverlay"">Show Overlay</MudButton>
    <MudOverlay Visible=""isVisible"" OnClick=""ToggleOverlay"" BackgroundColor=""rgba(0,0,0,0.5)"" FadeIn=""true"" Absolute=""true""></MudOverlay>
</MudPaper>



@code {
    private bool isVisible;

    public void ToggleOverlay()
    {
        isVisible = !isVisible;
        StateHasChanged();
    }
}";

public const string OverlayUsageExample = @"<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""ToggleOverlay"">Show Overlay</MudButton>
<MudOverlay Visible=""isVisible"" OnClick=""ToggleOverlay"" BackgroundColor=""rgba(0,0,0,0.5)"" FadeIn=""true""></MudOverlay>


@code {
    private bool isVisible;

    public void ToggleOverlay()
    {
        isVisible = !isVisible;
        StateHasChanged();
    }
}";

public const string PaperComponentExample = @"<MudPaper Elevation=""0""></MudPaper>
<MudPaper></MudPaper>
<MudPaper Elevation=""3""></MudPaper>";

public const string PaperVariantsExample = @"<MudPaper Outlined=""true""></MudPaper>
<MudPaper Outlined=""true"" Square=""true""></MudPaper>
<MudPaper Square=""true""></MudPaper>";

public const string ProgressCircularDeterminateExample = @"@using System;
@using System.Threading;

@implements IDisposable;

<MudProgressCircular Color=""Color.Default"" Value=""@Value"" />
<MudProgressCircular Color=""Color.Primary"" Value=""@Value"" />
<MudProgressCircular Color=""Color.Secondary"" Value=""@Value"" />
<MudProgressCircular Color=""Color.Success"" Value=""@Value"" />
<MudProgressCircular Color=""Color.Info"" Value=""@Value"" />

@code {
    public int Value { get; set; }

    public async void StartTimerAsync()
    {
        if (disposed)
            return;
        Value = 0;
        while (Value < 100)
        {
            Value = Value + 4;
            StateHasChanged();
            await Task.Delay(500);
            if (disposed)
                return;
        }
        Value = 0;
        StartTimerAsync();
    }
    protected override void OnInitialized()
        => StartTimerAsync();

    bool disposed;
    public void Dispose()
    {
        disposed = true;
    }

}";

public const string ProgressCircularInterminateExample = @"<MudProgressCircular Color=""Color.Default"" Indeterminate=""true"" />
<MudProgressCircular Color=""Color.Primary"" Indeterminate=""true""/>
<MudProgressCircular Color=""Color.Secondary"" Indeterminate=""true"" />
<MudProgressCircular Color=""Color.Success"" Indeterminate=""true"" />
<MudProgressCircular Color=""Color.Info"" Indeterminate=""true"" />";

public const string ProgressLinearBufferExample = @"<MudProgressLinear Color=""Color.Primary"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" />
<MudProgressLinear Color=""Color.Secondary"" Buffer=""true"" Value=""@Value"" BufferValue=""@BufferValue"" />

@code {
    public int Value { get; set; }
    public int BufferValue { get; set; }

    public async void StartTimerAsync()
    {
        if (disposed)
            return;
        Value = 100;
        BufferValue = 100;
        while (Value > 0)
        {
            Value = Value - 4;
            BufferValue = BufferValue - 5;
            StateHasChanged();
            await Task.Delay(500);
            if (disposed)
                return;
        }
        Value = 100;
        BufferValue = 100;
        StartTimerAsync();
    }
    protected override void OnInitialized()
        => StartTimerAsync();

    bool disposed;
    public void Dispose()
    {
        disposed = true;
    }

}";

public const string ProgressLinearDeterminateExample = @"<MudProgressLinear Color=""Color.Primary"" Value=""@Value"" />
<MudProgressLinear Color=""Color.Secondary"" Value=""@Value"" />

@code {
    public int Value { get; set; }

    public async void StartTimerAsync()
    {
        if (disposed)
            return;
        Value = 100;
        while (Value > 0)
        {
            Value = Value - 4;
            StateHasChanged();
            await Task.Delay(500);
            if (disposed)
                return;
        }
        Value = 100;
        StartTimerAsync();
    }
    protected override void OnInitialized()
        => StartTimerAsync();

    bool disposed;
    public void Dispose()
    {
        disposed = true;
    }

}";

public const string ProgressLinearInterminateExample = @"<MudProgressLinear Color=""Color.Primary"" Indeterminate=""true""/>
<MudProgressLinear Color=""Color.Secondary"" Indeterminate=""true""/>";

public const string RadioGroupExample = @"<MudForm>
    <MudRadioGroup @bind-SelectedLabel=""@SelectedLabel"" @bind-SelectedOption=""@SelectedOption"">
        <MudRadio Color=""Color.Primary"" Option=""Radio 1"">Primary</MudRadio>
        <MudRadio Color=""Color.Secondary"" Option=""Radio 2"">Secondary</MudRadio>
        <MudRadio Option=""Radio 3"">Default</MudRadio>
        <MudRadio Color=""Color.Primary"" Disabled=""true"" Option=""Radio 4"">Disabled</MudRadio>
    </MudRadioGroup>
</MudForm> 

@code {
    public string SelectedLabel { get; set; } = ""Primary"";
    public string SelectedOption { get; set; }
}";

public const string RadioLabelPlacementExample = @"<MudGrid>
    <MudItem xs=""12"" md=""2"">
        <MudRadioGroup SelectedOptionChanged=""@OnRadioSelect"" SelectedOption=""@SelectedOption"">
            <MudRadio Color=""Color.Primary"" Option=""1"">Bottom</MudRadio>
            <MudRadio Color=""Color.Primary"" Option=""2"">Start</MudRadio>
            <MudRadio Color=""Color.Primary"" Option=""3"">Top</MudRadio>
            <MudRadio Color=""Color.Primary"" Option=""4"">End</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""12"" md=""8"" Class=""mud-text-align-center my-auto"">
        <MudRadioGroup>
            <MudRadio Placement=""@LabelPlacement"" Color=""Color.Secondary"">Label Placement</MudRadio>
        </MudRadioGroup>
    </MudItem>
    <MudItem xs=""12"" md=""2"" Style=""width:100%""></MudItem>
</MudGrid>

@code {
    public string SelectedOption { get; set; }

    public Placement LabelPlacement { get; set; } = Placement.End;

    public void OnRadioSelect(string value)
    {
        switch (value)
        {
            case ""1"":
                LabelPlacement = Placement.Bottom;
                break;
            case ""2"":
                LabelPlacement = Placement.Start;
                break;
            case ""3"":
                LabelPlacement = Placement.Top;
                break;
            case ""4"":
                LabelPlacement = Placement.End;
                break;
        }
    }
}";

public const string BasicRatingExample = @"<MudRating SelectedValue=""2"" />";

public const string RaitngIconsAndColorExample = @"<MudGrid Spacing=""1"" Class=""d-flex flex-column"">
        <MudItem>
            <MudRating SelectedValue=""2"" FullIcon=""@Icons.Material.Visibility"" EmptyIcon=""@Icons.Material.VisibilityOff"" />
        </MudItem>
        <MudItem>
            <MudRating SelectedValue=""2"" FullIcon=""@Icons.Material.Favorite"" EmptyIcon=""@Icons.Material.FavoriteBorder"" Color=""Color.Secondary"" />
        </MudItem>
    </MudGrid>";

public const string RaitngMaxValueExample = @"<MudGrid Spacing=""1"" Class=""d-flex flex-column"">
        <MudItem>
            <MudRating SelectedValue=""1"" MaxValue=""3"" />
        </MudItem>
        <MudItem>
            <MudRating SelectedValue=""2"" />
        </MudItem>
        <MudItem>
            <MudRating SelectedValue=""3"" MaxValue=""10"" />
        </MudItem>
    </MudGrid>";

public const string RaitngSizesExample = @"<MudGrid Spacing=""1"" Class=""d-flex flex-column"">
        <MudItem>
            <MudRating SelectedValue=""2"" Size=""Size.Small"" />
        </MudItem>
        <MudItem>
            <MudRating SelectedValue=""2"" Size=""Size.Medium"" />
        </MudItem>
        <MudItem>
            <MudRating SelectedValue=""2"" Size=""Size.Large"" />
        </MudItem>
    </MudGrid>";

public const string RatingBindingsExample = @"<div class=""d-flex flex-column align-center"">
    <MudRating @bind-SelectedValue=""selectedVal"" HoveredValueChanged=""HandleHoveredValueChanged"" />
    <MudText Typo=""Typo.subtitle2"" Class=""deep-purple-text mt-2"">@LabelText</MudText>
</div>


@code {
    private int selectedVal = 0;
    private int? activeVal;

    private void HandleHoveredValueChanged(int? val) => activeVal = val;

    private string LabelText => (activeVal ?? selectedVal) switch
    {
        1 => ""Very bad"",
        2 => ""Bad"",
        3 => ""Sufficient"",
        4 => ""Good"",
        5 => ""Awesome!"",
        _ => ""Rate our product!""
    };
}";

public const string RatingDisabledExample = @"<MudRating Disabled=""true"" SelectedValue=""2"" />";

public const string RatingTestExample = @"@*I delete this file later*@

<MudForm>

    <h3>Default</h3>
    <MudRating SelectedValue=""2"" />
    <h3>More Values</h3>
    <MudRating SelectedValue=""5"" MaxValue=""10"" />
    <h3>Disabled</h3>
    <MudRating SelectedValue=""2"" Disabled=""true"" />
    <h3>Custom Icons, Color</h3>
    <MudRating SelectedValue=""2"" FullIcon=""@Icons.Material.Favorite"" EmptyIcon=""@Icons.Material.FavoriteBorder"" Color=""Color.Secondary"" />
    <div class=""d-flex flex-column my-6"">
        <h3>Size</h3>
        <MudRating Size=""Size.Small"" />
        <MudRating Size=""Size.Medium"" />
        <MudRating Size=""Size.Large"" />
    </div>
    <div class=""d-flex flex-column align-center my-6"">
        <h3>Hover feedback</h3>
        <MudRating @bind-SelectedValue=""selectedVal"" HoveredValueChanged=""HandleHoveredValueChanged"" />
        <MudText Typo=""Typo.subtitle1"" Class=""deep-purple-text"">@GetLabelText()</MudText>
    </div>

    <div class=""d-flex flex-column align-center my-12"">
        <h3>Normal</h3>
        <MudRating SelectedValue=""2"" />
    </div>

    <div class=""d-flex flex-column align-center my-12"">
        <h3>Custom styles</h3>
        <MudRating SelectedValue=""2"" Style=""transform: rotate(25deg);"" RatingItemsStyle=""padding: 0 15px; box-sizing: content-box;"" />
    </div>

</MudForm>

@code {
    private int selectedVal = 0;
    private int? activeVal;

    private void HandleSelectedValueChanged(int val) => selectedVal = val;

    private void HandleHoveredValueChanged(int? val) => activeVal = val;

    private string GetLabelText() => (activeVal ?? selectedVal) switch
    {
        1 => ""Very bad"",
        2 => ""Bad"",
        3 => ""Sufficient"",
        4 => ""Good"",
        5 => ""Awesome!"",
        _ => ""Rate our product!""
    };
}";

public const string MultiSelectExample = @"<MudGrid>
    <MudItem xs=""12"" md=""12"">
        <MudSelect T=""string"" Label=""US States"" HelperText=""Pick your favorite states"" MultiSelection=""true"" @bind-Value=""value"" @bind-SelectedValues=""options"">
            @foreach (var state in states)
            {
                <MudSelectItem T=""string"" Value=""@state"">@state</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudText Typo=""Typo.body2"">MudSelect.Value: ""@value""</MudText>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudText Typo=""Typo.body2"">MudSelect.SelectedValues: HashSet&lt;string&gt; { @(string.Join("", "", options.Select(x=>$""\""{x}\""""))) }</MudText>
    </MudItem>
</MudGrid>
   

@code {

    private string value { get; set; } = ""Nothing selected"";
    private HashSet<string> options { get; set; } = new HashSet<string>() { ""Alaska"" };

    private string[] states =
    {
        ""Alabama"", ""Alaska"", ""American Samoa"", ""Arizona"",
        ""Arkansas"", ""California"", ""Colorado"", ""Connecticut"",
        ""Delaware"", ""District of Columbia"", ""Federated States of Micronesia"",
        ""Florida"", ""Georgia"", ""Guam"", ""Hawaii"", ""Idaho"",
        ""Illinois"", ""Indiana"", ""Iowa"", ""Kansas"", ""Kentucky"",
        ""Louisiana"", ""Maine"", ""Marshall Islands"", ""Maryland"",
        ""Massachusetts"", ""Michigan"", ""Minnesota"", ""Mississippi"",
        ""Missouri"", ""Montana"", ""Nebraska"", ""Nevada"",
        ""New Hampshire"", ""New Jersey"", ""New Mexico"", ""New York"",
        ""North Carolina"", ""North Dakota"", ""Northern Mariana Islands"", ""Ohio"",
        ""Oklahoma"", ""Oregon"", ""Palau"", ""Pennsylvania"", ""Puerto Rico"",
        ""Rhode Island"", ""South Carolina"", ""South Dakota"", ""Tennessee"",
        ""Texas"", ""Utah"", ""Vermont"", ""Virgin Island"", ""Virginia"",
        ""Washington"", ""West Virginia"", ""Wisconsin"", ""Wyoming"",
    };

}";

public const string SelectCustomConverterExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudSelect T=""Pizza"" @bind-Value=""@pizza"" Label=""Select your pizza"" Variant=""Variant.Outlined"" ToStringFunc=""@converter"" OffsetY=""true"">
            <MudSelectItem Value=""@(new Pizza() { Name=""Cardinale""})"" />
            <MudSelectItem Value=""@(new Pizza() { Name=""Diavolo""})"" />
            <MudSelectItem Value=""@(new Pizza() { Name=""Margarita""})"" />
            <MudSelectItem Value=""@(new Pizza() { Name=""Spinaci""})"" />
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        @if(pizza==null) {
            <MudText Class=""mt-5"">Nothing selected yet.</MudText>
        }        
        else {
            <MudText Class=""mt-5"">Pizza: @pizza.Name</MudText>
        }
    </MudItem>    
</MudGrid>

@code {
    Pizza pizza;

    public class Pizza
    {
        public string Name { get; set; }
    }

    Func<Pizza,string> converter = p => p?.Name;
}";

public const string SelectDenseExample = @"<MudSelect T=""string"" Label=""Dense"" Dense=""true"">
    <MudSelectItem T=""string"" Value=""@(""Tyrannosaur"")""/>
    <MudSelectItem T=""string"" Value=""@(""Triceratops"")""/>
    <MudSelectItem T=""string"" Value=""@(""Oviraptor"")""/>
</MudSelect>";

public const string SelectDisabledExample = @"<MudSelect T=""string"" Label=""Disabled"" Disabled=""true"">
    <MudSelectItem T=""string"" Value=""@(""foo"")"">Foo</MudSelectItem>
    <MudSelectItem T=""string"" Value=""@(""bar"")"">Bar</MudSelectItem>
</MudSelect>";

public const string SelectInteractiveExample = @"<MudGrid>
    <MudItem xs=""12"" md=""3"">
        <MudForm>
            <MudSwitch T=""bool"" CheckedChanged=""@OnPostitionChange"" Color=""Color.Primary"" Label=""Open Top"" />
            <MudSwitch @bind-Checked=""@OffsetY"" Color=""Color.Secondary"" Label=""Offset Y"" />
            <MudSwitch @bind-Checked=""@Dense"" Color=""Color.Primary"" Label=""Dense"" />
        </MudForm>
    </MudItem>
    <MudItem xs=""12"" md=""1"" />
    <MudItem xs=""12"" md=""4"">
        <MudSelect T=""string"" Label=""Variants"" Variant=""@_variant"" Direction=""@_direction"" Dense=""@Dense"" OffsetY=""@OffsetY"" ValueChanged=""OnSelectedValue"">
            <MudSelectItem T=""string"" Value=""@(""text"")"">Text</MudSelectItem>
            <MudSelectItem T=""string"" Value=""@(""filled"")"">Filled</MudSelectItem>
            <MudSelectItem T=""string"" Value=""@(""outlined"")"">Outlined</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"" md=""4"" />
</MudGrid>

@code {

    public bool OpenTop { get; set; }
    public bool OffsetY { get; set; } = true;
    public bool Dense { get; set; } = true;

    public string variant { get; set; }

    public Direction _direction {get; set;}
    public Variant _variant { get; set; } = Variant.Filled;

    protected void OnPostitionChange()
    {
        OpenTop = !OpenTop;

        if (OpenTop)
        {
            _direction = Direction.Top;
        }
        else
        {
            _direction = Direction.Bottom;
        }
    }

    private void OnSelectedValue(string value)
    {
        if(value == ""text"")
        {
            _variant = Variant.Text;
        }
        if (value == ""filled"")
        {
            _variant = Variant.Filled;
        }
        if (value == ""outlined"")
        {
            _variant = Variant.Outlined;
        }
    }
}";

public const string SelectPresentationExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudSelect @bind-Value=""@country"" Label=""With render fragements"" Variant=""Variant.Outlined"" OffsetY=""true"">
            <MudSelectItem Value=""@(""Afghanistan"")"">
                <img src=""https://upload.wikimedia.org/wikipedia/commons/9/9a/Flag_of_Afghanistan.svg"" height=""14"" class=""mr-1""/> Afghanistan
            </MudSelectItem>
            <MudSelectItem Value=""@(""Australia"")"">
                <img src=""https://upload.wikimedia.org/wikipedia/commons/8/88/Flag_of_Australia_%28converted%29.svg"" height=""14"" class=""mr-1"" /> Australia
            </MudSelectItem>
            <MudSelectItem Value=""@(""Austria"")"">
                <img src=""https://upload.wikimedia.org/wikipedia/commons/4/41/Flag_of_Austria.svg"" height=""14"" class=""mr-1"" /> Austria
            </MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudSelect @bind-Value=""@country"" Label=""Without render fragements"" Variant=""Variant.Outlined"" OffsetY=""true"">
            <MudSelectItem Value=""@(""Afghanistan"")"" />
            <MudSelectItem Value=""@(""Andorra"")"" />
            <MudSelectItem Value=""@(""Australia"")"" />
            <MudSelectItem Value=""@(""Austria"")"" />
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudSelect @bind-Value=""@country"" Label=""Austria not representable"" Variant=""Variant.Outlined"" OffsetY=""true"">
            <MudSelectItem Value=""@(""Afghanistan"")"">
                <img src=""https://upload.wikimedia.org/wikipedia/commons/9/9a/Flag_of_Afghanistan.svg"" height=""14"" class=""mr-1"" /> Afghanistan
            </MudSelectItem>
            <MudSelectItem Value=""@(""Australia"")"">
                <img src=""https://upload.wikimedia.org/wikipedia/commons/8/88/Flag_of_Australia_%28converted%29.svg"" height=""14"" class=""mr-1"" /> Australia
            </MudSelectItem>
            <MudSelectItem Value=""@(""Andorra"")"">
                <img src=""https://upload.wikimedia.org/wikipedia/commons/1/19/Flag_of_Andorra.svg"" height=""14"" class=""mr-1"" /> Andorra
            </MudSelectItem>
        </MudSelect>
    </MudItem>

</MudGrid>

@code {
    string country=""Austria"";

   
}";

public const string SelectUsageExample = @"@using Microsoft.AspNetCore.Components
@using System.Globalization;

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudSelect Label=""Select fast-food"" @bind-Value=""stringValue"" HelperText=""String"">
            <MudSelectItem Value=""@(""Pizza"")"">Pizza</MudSelectItem>
            <MudSelectItem Value=""@(""Burger"")"">Burger</MudSelectItem>
            <MudSelectItem Value=""@(""Hotdog"")"">Hot Dog</MudSelectItem>
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudSelect Label=""Select drink"" @bind-Value=""enumValue"" HelperText=""Enum"">
            @foreach (Drink item in Enum.GetValues(typeof(Drink)))
            {
                <MudSelectItem Value=""@item"">@item</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudSelect Placeholder=""Select culture"" @bind-Value=""cultureValue"" HelperText=""CultureInfo"" ToStringFunc=""@convertFunc"">
            <MudSelectItem Value=""@(CultureInfo.GetCultureInfo(""en-US""))""></MudSelectItem>
            <MudSelectItem Value=""@(CultureInfo.GetCultureInfo(""de-AT""))""></MudSelectItem>
            <MudSelectItem Value=""@(CultureInfo.GetCultureInfo(""pt-BR""))""></MudSelectItem>
            <MudSelectItem Value=""@(CultureInfo.GetCultureInfo(""zh-CN""))""/>
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudText Class=""mb-n3"" Typo=""Typo.body2"">
            Selected values: 
            <MudChip>@(stringValue ?? ""Select fast-food"")</MudChip>
            <MudChip Color=""Color.Primary"">@enumValue</MudChip>
            <MudChip Color=""Color.Secondary"">@(cultureValue?.DisplayName ?? ""Select culture"")</MudChip>
        </MudText>
    </MudItem>
</MudGrid>



@code {
    private string stringValue { get; set; }
    private Drink enumValue { get; set; }
    public enum Drink { Tee, SparklingWater, SoftDrink, Cider, Beer, Wine, Moonshine }
    private CultureInfo cultureValue { get; set; }
    private Func<CultureInfo, string> convertFunc = ci => ci?.DisplayName;
}";

public const string SelectVariantsExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudSelect T=""string"" Label=""Coffee"">
            <MudSelectItem Value=""@(""Cappuccino"")"" />
            <MudSelectItem Value=""@(""Cafe Latte"")"" />
            <MudSelectItem Value=""@(""Espresso"")"" />
            <MudSelectItem Value=""@(""Irish Coffee"")"" />
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudSelect T=""double"" Label=""Price"" Strict=""true"" Variant=""Variant.Outlined"" Format=""F2"">
            <MudSelectItem T=""double"" Value=""4.50""/>
            <MudSelectItem T=""double"" Value=""4.99""/>
            <MudSelectItem T=""double"" Value=""3.60""/>
            <MudSelectItem T=""double"" Value=""21.99""/>
        </MudSelect>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudSelect T=""string"" Label=""Pies"" Variant=""Variant.Filled"">
            <MudSelectItem Value=""@(""Apple Pie"")"" />
            <MudSelectItem Value=""@(""Blackberry Pie"")"" />
            <MudSelectItem Value=""@(""Rhubarb Pie"")"" />
            <MudSelectItem Value=""@(""Lemon Pie"")"" />
        </MudSelect>
    </MudItem>
</MudGrid>";

public const string SimpleTableExample = @"<MudSimpleTable>
    <thead>
        <tr>
            @foreach (var h in headings)
            {
                <th>@h</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in rows)
        {
            <tr>
                @foreach (var x in row.Split())
                {
                    <td>@x</td>
                }
            </tr>
        }
    </tbody>
</MudSimpleTable>

@code {
    string[] headings = { ""ID"", ""Name"", ""Email"", ""Gender"", ""IP Address"" };
    string[] rows = {
        @""1 Krishna kpartner0@usatoday.com Male 28.25.250.202"",
        @""2 Webb wstitle1@ning.com Male 237.168.134.114"",
        @""3 Nathanil nneal2@cyberchimps.com Male 92.6.0.175"",
        @""4 Adara alockwood3@patch.com Female 182.174.217.152"",
        @""5 Cecilius cchaplin4@shinystat.com Male 195.124.144.18"",
        @""6 Cicely cemerine9@soup.io Female 138.94.191.43"",
    };
}";

public const string SimpleTableHoverDenseExample = @"<MudSimpleTable Hover=""true"" Dense=""@dense"">
    <thead>
        <tr>
            @foreach (var h in headings)
            {
                <th>@h</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var row in rows)
        {
            <tr>
                @foreach (var x in row.Split())
                {
                    <td>@x</td>
                }
            </tr>
        }
    </tbody>
</MudSimpleTable>
<MudSwitch @bind-Checked=""@dense"">Dense</MudSwitch>

@code {
    bool dense=true;
    string[] headings = { ""ID"", ""Name"", ""Email"", ""Gender"", ""IP Address"" };
    string[] rows = {
        @""1 Krishna kpartner0@usatoday.com Male 28.25.250.202"",
        @""2 Webb wstitle1@ning.com Male 237.168.134.114"",
        @""3 Nathanil nneal2@cyberchimps.com Male 92.6.0.175"",
        @""4 Adara alockwood3@patch.com Female 182.174.217.152"",
        @""5 Cecilius cchaplin4@shinystat.com Male 195.124.144.18"",
        @""6 Cicely cemerine9@soup.io Female 138.94.191.43"",
    };
}";

public const string SkeletonAnimationsExample = @"<MudSkeleton />
<MudSkeleton Animation=""Animation.False"" />
<MudSkeleton Animation=""Animation.Wave"" />";

public const string SkeletonPulsateExample = @"<MudCard>
    <MudSkeleton SkeletonType=""SkeletonType.Rectangle"" Height=""200px""/>
    <MudCardContent>
        <MudSkeleton Width=""30%"" Height=""42px;"" />
        <MudSkeleton Width=""80%"" />
        <MudSkeleton Width=""100%"" />
    </MudCardContent>
    <MudCardActions>
        <MudSkeleton Width=""64px"" Height=""40px"" Class=""ml-2"" />
        <MudSkeleton Width=""105px"" Height=""40px"" Class=""ml-3"" />
    </MudCardActions>
</MudCard>

<MudCard>
    <MudCardMedia Image=""_content/MudBlazor.Docs/images/content-template-door.png"" Height=""200"" />
    <MudCardContent>
        <MudText Typo=""Typo.h5"">Old Paint</MudText>
        <MudText Typo=""Typo.body2"">Old paint found on a stone house door.</MudText>
        <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Share</MudButton>
        <MudButton Variant=""Variant.Text"" Color=""Color.Primary"">Learn More</MudButton>
    </MudCardActions>
</MudCard>";

public const string SkeletonVariantsExample = @"<MudSkeleton />
<MudSkeleton SkeletonType=""SkeletonType.Circle"" Width=""50px"" Height=""50px"" />
<MudSkeleton SkeletonType=""SkeletonType.Rectangle"" Width=""200px"" Height=""110px"" />";

public const string SkeletonWaveExample = @"<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudSkeleton SkeletonType=""SkeletonType.Circle"" Animation=""Animation.Wave"" Height=""40px"" Width=""40px""/>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudSkeleton Animation=""Animation.Wave"" Width=""40%"" />
            <MudSkeleton Animation=""Animation.Wave"" Width=""60%"" />
        </CardHeaderContent>
    </MudCardHeader>
    <MudSkeleton SkeletonType=""SkeletonType.Rectangle"" Animation=""Animation.Wave"" Height=""250px"" />
    <MudCardContent>
        <MudSkeleton Animation=""Animation.Wave"" />
    </MudCardContent>
    <MudCardActions>
        <MudSkeleton SkeletonType=""SkeletonType.Circle"" Animation=""Animation.Wave"" Height=""30px"" Width=""30px"" Class=""ml-2 mb-2"" />
        <MudSkeleton SkeletonType=""SkeletonType.Circle"" Animation=""Animation.Wave"" Height=""30px"" Width=""30px"" Class=""ml-3 mb-2"" />
    </MudCardActions>
</MudCard>


<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudAvatar>I</MudAvatar>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo=""Typo.body1"">Istra Croatia</MudText>
            <MudText Typo=""Typo.body2"">Peninsula in Europe</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon=""@Icons.Material.Settings"" Color=""Color.Default"" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardMedia Image=""_content/MudBlazor.Docs/images/content-template-pilars.png"" Height=""250"" />
    <MudCardContent>
        <MudText Typo=""Typo.body2"">This photo was taken in a small village in Istra Croatia.</MudText>
    </MudCardContent>
    <MudCardActions>
        <MudIconButton Icon=""@Icons.Material.Favorite"" Color=""Color.Default"" />
        <MudIconButton Icon=""@Icons.Material.Share"" Color=""Color.Default"" />
    </MudCardActions>
</MudCard>";

public const string SliderBasicExample = @"<MudGrid>
    <MudItem>
        <MudSlider Value=""@value"">Volume</MudSlider>
        <MudSlider Disabled=""true"" Value=""@(20)"">Disabled Slider</MudSlider>
    </MudItem>
    <MudItem>
        <div class=""demo-slider-filler""></div>
        <MudSlider Value=""@value"" />
        <div class=""demo-slider-filler""></div>
        <MudSlider Value=""@value"" Disabled=""true"" />
    </MudItem>
</MudGrid>


@code {
    double value = 50.0;
}";

public const string SliderMinMaxExample = @"<MudSlider @bind-Value=""value1"" Min=""20"" Max=""80"">Value: @value1.ToString()</MudSlider>
<MudSlider @bind-Value=""value2"" Min=""-1"" Max=""1"" Step=""0.05"">Value: @value2.ToString(""F2"")</MudSlider>


@code {
    public double value1 = 50;
    public double value2 = -0.75;
}";

public const string SliderStepsExample = @"<MudSlider Step=""10"" Value=""70"">Temperature</MudSlider>
<MudSlider Step=""10"" Value=""50"" Disabled=""true"">Disabled</MudSlider>

@code {
    int step = 10;
}";

public const string SnackbarConfigurationExample = @"@inject ISnackbar Snackbar

<MudButton @onclick=""@(() => Snackbar.Add(""My Close button is gone!"", Severity.Normal, config => { config.ShowCloseIcon = false; }))"" Variant=""Variant.Filled"" Color=""Color.Primary"">
    Open Modified Snackbar
</MudButton>";

public const string SnackbarPositionExample = @"@inject ISnackbar Snackbar

<MudButton @onclick=""@(() => ChangePosition(""Top-Left"", Defaults.Classes.Position.TopLeft))"" Color=""Color.Primary"" >Top-Left</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Top-Center"", Defaults.Classes.Position.TopCenter))"" Color=""Color.Primary"" >Top-Center</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Top-Right"", Defaults.Classes.Position.TopRight))"" Color=""Color.Primary"" >Top-Right</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Bottom-Left"", Defaults.Classes.Position.BottomLeft))"" Color=""Color.Default"" >Bottom-Left</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Bottom-Center"", Defaults.Classes.Position.BottomCenter))"" Color=""Color.Default"" >Bottom-Center</MudButton>
<MudButton @onclick=""@(() => ChangePosition(""Bottom-Right"", Defaults.Classes.Position.BottomRight))"" Color=""Color.Default"" >Bottom-Right</MudButton>

@code {
    void ChangePosition(string message, string position)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;
        Snackbar.Add(message, Severity.Normal);
    }
}";

public const string SnackbarRequireInteractionExample = @"@inject ISnackbar Snackbar

<div class=""pa-0 ma-0"">
    <MudAlert Severity=""Severity.Warning"" Dense=""true"" Class=""rounded-0 rounded-t"">The reactor temperature exceeds the optimal range</MudAlert>
    <MudAlert Severity=""Severity.Error"" Dense=""true"" Class=""rounded-0"">Reactor meltdown is imminent!</MudAlert>
    <div class=""d-flex flex-column"" style=""height: 200px;"">
        <div class=""align-self-center mt-12"">
            <MudText Typo=""Typo.h6"">Fuel Rod Temperature: @FuelRodTemperature.ToString()C</MudText>
        </div>
        <div class=""align-self-center mt-6"">
            <MudTooltip Text=""Reactor Shutdown"">
                <MudButton Variant=""Variant.Filled"" DisableElevation=""true"" Color=""Color.Error"" @onclick=""@(() => ShutDown())"">Scram Button</MudButton>
            </MudTooltip>
        </div>
    </div>
    <MudAlert Severity=""Severity.Info"" Dense=""true"" Class=""rounded-0 rounded-b"">The reactor is about to have a meltdown deputy chief-engineer! You must act now!</MudAlert>
</div>

@code {

    public int FuelRodTemperature { get; set; } = 600;

    void ShutDown()
    {
        string message = ""Scram Initiated!"";
        Snackbar.Add(message, Severity.Success, config =>
        {
            config.RequireInteraction = true;
            config.ShowCloseIcon = false;
            config.Onclick = snackbar =>
            {
                UpdateTemperature();
                return Task.CompletedTask;
            };
        });
    }

    public void UpdateTemperature()
    {
        FuelRodTemperature += 100;
        Snackbar.Add(""Temperature is still going up!"", Severity.Warning);
        StateHasChanged();
    }
}";

public const string SnackbarSeverityExample = @"@inject ISnackbar Snackbar


<MudButton Color=""Color.Dark"" @onclick=""@(() => Snackbar.Add(""The reactor type is RBMK-1000"", Severity.Normal))"">Normal Snackbar</MudButton>
<MudButton Color=""Color.Info"" @onclick=""@(() => Snackbar.Add(""The reactor was fired up successfully"", Severity.Info))"">Info Snackbar</MudButton>
<MudButton Color=""Color.Success"" @onclick=""@(() => Snackbar.Add(""The reactor is running at optimum temperature"", Severity.Success))"">Success Snackbar</MudButton>
<MudButton Color=""Color.Warning"" @onclick=""@(() => Snackbar.Add(""The reactor temperature exceeds the optimal range"", Severity.Warning))"">Warning Snackbar</MudButton>
<MudButton Color=""Color.Error"" @onclick=""@(() => Snackbar.Add(""Reactor meltdown is imminent"", Severity.Error))"">Error Snackbar</MudButton>";

public const string SnackbarUsageExample = @"@inject ISnackbar Snackbar

<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" @onclick=""@(() => Snackbar.Add(""Simple Snackbar""))"">
    Open Snackbar
</MudButton>";

public const string SnackbarVariantsExample = @"@inject ISnackbar Snackbar

<MudButton @onclick=""@(() => ChangeVariant(""Text Snackbar"", Variant.Text))"" Color=""Color.Primary"">Open Text Snackbar Variants</MudButton>
<MudButton @onclick=""@(() => ChangeVariant(""Filled Snackbar"", Variant.Filled))"" Color=""Color.Secondary"">Open Filled Snackbar Variants</MudButton>
<MudButton @onclick=""@(() => ChangeVariant(""Outlined Snackbar"", Variant.Outlined))"" Color=""Color.Tertiary"">Open Outlined Snackbar Variants</MudButton>

@code {
    void ChangeVariant(string message, Variant variant)
    {
        Snackbar.Configuration.SnackbarVariant = variant;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        Snackbar.Add($""Normal {message}"", Severity.Normal);
        Snackbar.Add($""Info {message}"", Severity.Info);
        Snackbar.Add($""Success {message}"", Severity.Success);
        Snackbar.Add($""Warning {message}"", Severity.Warning);
        Snackbar.Add($""Error {message}"", Severity.Error);
    }
}";

public const string SparkLineExample = @"<MudSparkLine></MudSparkLine>";

public const string SwitchBasicExample = @"<MudSwitch @bind-Checked=""@Basic_Switch1"" />
<MudSwitch @bind-Checked=""@Basic_Switch2"" Color=""Color.Primary"" />
<MudSwitch @bind-Checked=""@Basic_Switch2"" Color=""Color.Secondary"" />
<MudSwitch T=""bool"" Disabled=""true"" />

@code{
    public bool Basic_Switch1 { get; set; } = false;
    public bool Basic_Switch2 { get; set; } = true;
    public bool Basic_Switch3 { get; set; } = true;
}";

public const string SwitchConversionExample = @"<MudSwitch @bind-Checked=""boolean"">bool: @boolean</MudSwitch>
<MudSwitch @bind-Checked=""nullable"" Color=""Color.Primary"">bool?: @nullable</MudSwitch>
<MudSwitch @bind-Checked=""integer"" Color=""Color.Secondary"">int: @integer</MudSwitch>
<MudSwitch @bind-Checked=""str"" Color=""Color.Tertiary"">string: ""@(str)""</MudSwitch>

@code{
    public bool boolean { get; set; } = true;
    public bool? nullable { get; set; } = true;
    public int integer { get; set; } = 1;
    public string str { get; set; } = ""on"";
}";

public const string SwitchWithLabelExample = @"<MudSwitch @bind-Checked=""@Label_Switch1"" Label=""Default"" />
<MudSwitch @bind-Checked=""@Label_Switch2"" Label=""Primary"" Color=""Color.Primary"" />
<MudSwitch @bind-Checked=""@Label_Switch2"" Label=""Secondary"" Color=""Color.Secondary"" />
<MudSwitch T=""bool"" Disabled=""true"" Label=""Disabled"" />

@code{
    public bool Label_Switch1 { get; set; } = false;
    public bool Label_Switch2 { get; set; } = true;
    public bool Label_Switch3 { get; set; } = true;
}";

public const string TableBasicExample = @"@using MudBlazor.Docs.Data

<MudTable Items=""@PeriodicTable.GetElements().Take(4)"" Hover=""true"" Breakpoint=""Breakpoint.Sm"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
</MudTable>";

public const string TableColGroupExample = @"@using MudBlazor.Docs.Data

<MudTable Items=""@PeriodicTable.GetElements()"">
    <ColGroup>
        <col style=""width: 60px;"" />
        <col />
        <col style=""width: 60%;"" />
        <col style=""width: 60px;"" />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh Style=""text-align:center"">Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"" Style=""text-align:right"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
}";

public const string TableExample = @"@using MudBlazor.Docs.Data

<MudTable Items=""@PeriodicTable.GetElements()"" Dense=""@dense"" Hover=""@hover"" Filter=""new Func<Element,bool>(FilterFunc)"" @bind-SelectedItem=""selected_item"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value=""search_string"" Placeholder=""Search"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Search"" IconSize=""Size.Medium"" Class=""mt-0""></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<MudSwitch @bind-Checked=""@hover"" Color=""Color.Primary"">Hover</MudSwitch>
<MudSwitch @bind-Checked=""@dense"" Color=""Color.Secondary"">Dense</MudSwitch>
<MudText Inline=""true"">Selected: @selected_item?.Name</MudText>

@code {
    bool dense = false;
    bool hover = true;
    bool fixed_header = false;
    string search_string = """";
    Element selected_item = null;
    HashSet<Element> selected_items = new HashSet<Element>();

    bool FilterFunc(Element element)
    {
        if (string.IsNullOrWhiteSpace(search_string))
            return true;
        if (element.Sign.Contains(search_string))
            return true;
        if (element.Name.Contains(search_string))
            return true;
        if ($""{element.Number} {element.Position} {element.Molar}"".Contains(search_string))
            return true;
        return false;
    }
}";

public const string TableFixedHeaderExample = @"@using MudBlazor.Docs.Data

<MudTable Items=""@PeriodicTable.GetElements()"" FixedHeader=""true"" Height=""400px"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions=""new int[]{50, 100}"" />
    </PagerContent>
</MudTable>
<MudSwitch @bind-Checked=""@fixed_header"">Fixed Header</MudSwitch>

@code {
    bool fixed_header = true;
}";

public const string TableInlineEditExample = @"@using MudBlazor.Docs.Data
@inject ISnackbar Snackbar

<MudTable Items=""@PeriodicTable.GetElements()"" Dense=""@dense"" Hover=""@hover"" Filter=""new Func<Element,bool>(FilterFunc)"" @bind-SelectedItem=""selected_item"" SortLabel=""Sort By"" CommitEditTooltip=""Commit Edit"" OnCommitEditClick=""@(() => Snackbar.Add(""Commit Edit Handler Invoked""))"">
    <ToolBarContent>
        <MudText Typo=""Typo.h6"">Periodic Elements</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value=""search_string"" Placeholder=""Search"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.Search"" IconSize=""Size.Medium"" Class=""mt-0""></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style=""width:50px;"" />
        <col style=""width:80px;"" />
        <col style=""width:50%;"" />
        <col />
        <col />
        <col style=""width:50px;"" />
    </ColGroup>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Number)"">Nr</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Sign)"">Sign</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection=""SortDirection.Ascending"" SortBy=""new Func<Element, object>(x=>x.Name)"">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Position)"">Position</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Molar)"">Mass</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd>@context.Number</MudTd>
        <MudTd>
            <MudTextField @bind-Value=""@context.Sign"" />
        </MudTd>
        <MudTd>
            <MudTextField @bind-Value=""@context.Name"" />
        </MudTd>
        <MudTd>
            <MudTextField @bind-Value=""@context.Position"" />
        </MudTd>
        <MudTd>
            <MudTextField @bind-Value=""@context.Molar"" />
        </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
<MudSwitch @bind-Checked=""@hover"" Color=""Color.Primary"">Hover</MudSwitch>
<MudSwitch @bind-Checked=""@dense"" Color=""Color.Secondary"">Dense</MudSwitch>
<MudText Inline=""true"">Selected: @selected_item?.Name</MudText>

@code {
    bool dense = false;
    bool hover = true;
    bool fixed_header = false;
    string search_string = """";
    Element selected_item = null;
    HashSet<Element> selected_items = new HashSet<Element>();

    bool FilterFunc(Element element)
    {
        if (string.IsNullOrWhiteSpace(search_string))
            return true;
        if (element.Sign.Contains(search_string))
            return true;
        if (element.Name.Contains(search_string))
            return true;
        if ($""{element.Number} {element.Position} {element.Molar}"".Contains(search_string))
            return true;
        return false;
    }
}";

public const string TableMultiSelectExample = @"@using MudBlazor.Docs.Data

<MudTable Items=""@PeriodicTable.GetElements()"" MultiSelection=""true"" @bind-SelectedItems=""selected_items"" Hover=""@hover"">
    <HeaderContent>
        <MudTh>Nr</MudTh>
        <MudTh>Sign</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Molar mass</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions=""new int[]{50, 100}"" />
    </PagerContent>
</MudTable>
<MudText Inline=""true"">Selected items: @(selected_items==null ? """" : string.Join("", "", selected_items.OrderBy(x=>x.Sign).Select(x=>x.Sign)))</MudText>

@code {
    bool hover = true;
    HashSet<Element> selected_items = new HashSet<Element>();
}";

public const string TableSortingExample = @"@using MudBlazor.Docs.Data

<MudTable Items=""@PeriodicTable.GetElements()"" Hover=""true"" SortLabel=""Sort By"">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Number)"">Nr</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Sign)"">Sign</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection=""SortDirection.Ascending"" SortBy=""new Func<Element, object>(x=>x.Name)"">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Position)"">Position</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy=""new Func<Element, object>(x=>x.Molar)"">Mass</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel=""Nr"">@context.Number</MudTd>
        <MudTd DataLabel=""Sign"">@context.Sign</MudTd>
        <MudTd DataLabel=""Name"">@context.Name</MudTd>
        <MudTd DataLabel=""Position"">@context.Position</MudTd>
        <MudTd DataLabel=""Molar mass"">@context.Molar</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions=""new int[]{50, 100}"" />
    </PagerContent>
</MudTable>";

public const string TabsCenteredExample = @"<MudTabs Elevation=""1"" Rounded=""true"" Centered=""true"">
    <MudTabPanel Text=""One""/>
    <MudTabPanel Text=""Two""/>
    <MudTabPanel Text=""Three""/>
</MudTabs>";

public const string TabsColorsExample = @"<MudTabs Elevation=""1"" Rounded=""true"" Color=""@Color.Primary"">
    <MudTabPanel Text=""Api"" Icon=""@Icons.Material.Api"" />
    <MudTabPanel Text=""Build"" Icon=""@Icons.Material.Build"" />
    <MudTabPanel Text=""Bug Report"" Icon=""@Icons.Material.BugReport"" />
</MudTabs>

<MudTabs Elevation=""1"" Rounded=""true"" Color=""@Color.Secondary"">
    <MudTabPanel Text=""Api"" Icon=""@Icons.Material.Api"" />
    <MudTabPanel Text=""Build"" Icon=""@Icons.Material.Build"" />
    <MudTabPanel Text=""Bug Report"" Icon=""@Icons.Material.BugReport"" />
</MudTabs>

<MudTabs Elevation=""1"" Rounded=""true"" Color=""@Color.Tertiary"">
    <MudTabPanel Text=""Api"" Icon=""@Icons.Material.Api"" />
    <MudTabPanel Text=""Build"" Icon=""@Icons.Material.Build"" />
    <MudTabPanel Text=""Bug Report"" Icon=""@Icons.Material.BugReport"" />
</MudTabs>

<MudTabs Elevation=""1"" Rounded=""true"" Color=""@Color.Info"">
    <MudTabPanel Text=""Api"" Icon=""@Icons.Material.Api"" />
    <MudTabPanel Text=""Build"" Icon=""@Icons.Material.Build"" />
    <MudTabPanel Text=""Bug Report"" Icon=""@Icons.Material.BugReport"" />
</MudTabs>

<MudTabs Elevation=""1"" Rounded=""true"" Color=""@Color.Success"">
    <MudTabPanel Text=""Api"" Icon=""@Icons.Material.Api"" />
    <MudTabPanel Text=""Build"" Icon=""@Icons.Material.Build"" />
    <MudTabPanel Text=""Bug Report"" Icon=""@Icons.Material.BugReport"" />
</MudTabs>

<MudTabs Elevation=""1"" Rounded=""true"" Color=""@Color.Warning"">
    <MudTabPanel Text=""Api"" Icon=""@Icons.Material.Api"" />
    <MudTabPanel Text=""Build"" Icon=""@Icons.Material.Build"" />
    <MudTabPanel Text=""Bug Report"" Icon=""@Icons.Material.BugReport"" />
</MudTabs>

<MudTabs Elevation=""1"" Rounded=""true"" Color=""@Color.Error"">
    <MudTabPanel Text=""Api"" Icon=""@Icons.Material.Api"" />
    <MudTabPanel Text=""Build"" Icon=""@Icons.Material.Build"" />
    <MudTabPanel Text=""Bug Report"" Icon=""@Icons.Material.BugReport"" />
</MudTabs>

<MudTabs Elevation=""1"" Rounded=""true"" Color=""@Color.Dark"">
    <MudTabPanel Text=""Api"" Icon=""@Icons.Material.Api"" />
    <MudTabPanel Text=""Build"" Icon=""@Icons.Material.Build"" />
    <MudTabPanel Text=""Bug Report"" Icon=""@Icons.Material.BugReport"" />
</MudTabs>";

public const string TabsDisabledExample = @"<MudTabs Elevation=""1"" Rounded=""true"">
    <MudTabPanel Text=""Active""/>
    <MudTabPanel Text=""Disabled"" Disabled=""true""/>
    <MudTabPanel Text=""Active""/>
</MudTabs>";

public const string TabsIconAndTextExample = @"<MudTabs Elevation=""1"" Rounded=""true"">
    <MudTabPanel Text=""Api"" Icon=""@Icons.Material.Api""/>
    <MudTabPanel Text=""Build"" Icon=""@Icons.Material.Build""/>
    <MudTabPanel Text=""Bug Report"" Icon=""@Icons.Material.BugReport""/>
</MudTabs>";

public const string TabsIconExample = @"<MudTabs Elevation=""1"" Rounded=""true"">
    <MudTabPanel Icon=""@Icons.Material.Api""/>
    <MudTabPanel Icon=""@Icons.Material.Build""/>
    <MudTabPanel Icon=""@Icons.Material.BugReport""/>
</MudTabs>";

public const string TabsSimpleExample = @"<MudTabs Elevation=""1"">
    <MudTabPanel Text=""Item One"">
        <MudText>Item One</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Item Two"">
        <MudText>Item Two</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Item Three"">
        <MudText>Item Three</MudText>
    </MudTabPanel>
</MudTabs>";

public const string TabsVerticalExample = @"<MudTabs Vertical=""true"" Border=""true"">
    <MudTabPanel Text=""Item One"">
        <MudText>Item One</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Item Two"">
        <MudText>Item Two</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Item Three"">
        <MudText>Item Three</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Item Four"">
        <MudText>Item Four</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Item Five"">
        <MudText>Item Five</MudText>
    </MudTabPanel>
    <MudTabPanel Text=""Item Six"">
        <MudText>Item Six</MudText>
    </MudTabPanel>
</MudTabs>";

public const string TabsWithBagdesExample = @"<MudTabs Elevation=""1"" Rounded=""true"">
    <MudTabPanel Icon=""@Icons.Material.Api"" BadgeData='""live""' BadgeColor=""Color.Info"" />
    <MudTabPanel Icon=""@Icons.Material.Build"" BadgeData='""...""' />
    <MudTabPanel Icon=""@Icons.Material.BugReport"" BadgeData='""99+""' BadgeColor=""Color.Error"" />
</MudTabs>

<MudTabs Elevation=""1"" Rounded=""true"" Class=""my-4"">
    <MudTabPanel Icon=""@Icons.Material.Api"" Text=""API"" BadgeData='""!""' BadgeColor=""Color.Error"" />
    <MudTabPanel Icon=""@Icons.Material.Build"" Text=""Build"" BadgeData=""1"" BadgeColor=""Color.Success"" />
    <MudTabPanel Icon=""@Icons.Material.BugReport"" Text=""Bugs"" BadgeData=""0"" />
</MudTabs>

<MudTabs Elevation=""1"" Rounded=""true"">
    <MudTabPanel Text=""API"" BadgeData='""S""' />
    <MudTabPanel Text=""Build"" BadgeData='""...""' BadgeColor=""Color.Dark"" />
    <MudTabPanel Text=""Bugs"" BadgeData='""N""' />
</MudTabs>";

public const string TemplateExample = @"";

public const string TextFieldAdornmentsExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""12"" md=""12"">
        <MudTextField @bind-Value=""Amount"" Label=""Amount"" Variant=""Variant.Text"" Adornment=""Adornment.Start"" AdornmentText=""Kr"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""Amount"" Label=""Amount"" Variant=""Variant.Text"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.AttachMoney"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""Weight"" HelperText=""Weight"" Variant=""Variant.Text"" Adornment=""Adornment.End"" AdornmentText=""Kg"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""Password"" Label=""Password"" Variant=""Variant.Text"" InputType=""@PasswordInput"" Adornment=""Adornment.End"" AdornmentIcon=""@PasswordInputIcon"" OnAdornmentClick=""ButtonTestclick"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""Amount"" Label=""Amount"" Variant=""Variant.Filled"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.AttachMoney"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""Weight"" HelperText=""Weight"" Variant=""Variant.Filled"" Adornment=""Adornment.End"" AdornmentText=""Kg"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField  @bind-Value=""Password"" Label=""Password""  Variant=""Variant.Filled"" InputType=""@PasswordInput"" Adornment=""Adornment.End"" AdornmentIcon=""@PasswordInputIcon"" OnAdornmentClick=""ButtonTestclick"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""Amount"" Label=""Amount"" Variant=""Variant.Outlined"" Adornment=""Adornment.Start"" AdornmentIcon=""@Icons.Material.AttachMoney"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""Weight"" HelperText=""Weight"" Variant=""Variant.Outlined"" Adornment=""Adornment.End"" AdornmentText=""Kg"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField  @bind-Value=""Password"" Label=""Password"" Variant=""Variant.Outlined"" InputType=""@PasswordInput"" Adornment=""Adornment.End"" AdornmentIcon=""@PasswordInputIcon"" OnAdornmentClick=""ButtonTestclick"" />
    </MudItem>
</MudGrid>


@code {
    public double? Amount { get; set; }
    public int? Weight { get; set; }
    public string Password { get; set;} = ""superstrong123"";

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else {
            isShow = true;
            PasswordInputIcon = Icons.Material.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}";

public const string TextFieldBasicExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""TextValue"" Label=""Standard"" Variant=""Variant.Text""></MudTextField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""TextValue"" Label=""Filled"" Variant=""Variant.Filled""></MudTextField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""TextValue"" Label=""Outlined"" Variant=""Variant.Outlined""></MudTextField>
    </MudItem>
</MudGrid>

@code {
    public string TextValue { get; set; }
}";

public const string TextFieldBindingExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""@element.Name"" Label=""Name""/>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""@element.Molar"" Label=""Molar""/>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""@element.Number"" Label=""Number""/>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""@updatedon"" Format=""yyyy/MM/dd"" Label=""Last Update""/>
    </MudItem>
</MudGrid>
<div>
    <MudText Typo=""@MudBlazor.Typo.h6"">Data:</MudText>
    <MudText>Name: @element.Name</MudText>
    <MudText>Molar: @element.Molar</MudText>
    <MudText>Number: @element.Number</MudText>
    <MudText>Last Update: @updatedon </MudText>
</div>


@code {
    DateTime updatedon = DateTime.Today;
    Data.Element element = new Data.Element { Group = """", Name = ""Hydrogen"", Molar = 1.00794, Number = 1 };

}";

public const string TextFieldDenseExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""TextValue"" Label=""Standard"" Variant=""Variant.Text"" Margin=""Margin.Dense""></MudTextField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""TextValue"" Label=""Filled"" Variant=""Variant.Filled"" Margin=""Margin.Dense""></MudTextField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField @bind-Value=""TextValue"" Label=""Outlined"" Variant=""Variant.Outlined"" Margin=""Margin.Dense""></MudTextField>
    </MudItem>
</MudGrid>

@code {
    public string TextValue { get; set; }
}";

public const string TextFieldFormPropsExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""HelperText"" Label=""With Helper"" HelperText=""Some helping Text"" Variant=""Variant.Text"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""Disabled"" Label=""Disabled"" Variant=""Variant.Text"" Disabled=""true"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""Password"" Label=""Password"" InputType=""InputType.Password"" Variant=""Variant.Text"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""ReadOnly"" Label=""Read Only"" ReadOnly=""true"" Variant=""Variant.Text"" />
    </MudItem>

    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""HelperText"" Label=""With Helper"" HelperText=""Some helping Text"" Variant=""Variant.Filled"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""Disabled"" Label=""Disabled"" Variant=""Variant.Filled"" Disabled=""true"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""Password"" Label=""Password"" InputType=""InputType.Password"" Variant=""Variant.Filled"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""ReadOnly"" Label=""Read Only"" ReadOnly=""true"" Variant=""Variant.Filled"" />
    </MudItem>

    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""HelperText"" Label=""With Helper"" HelperText=""Some helping Text"" Variant=""Variant.Outlined"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""Disabled"" Label=""Disabled"" Variant=""Variant.Outlined"" Disabled=""true"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""Password"" Label=""Password"" InputType=""InputType.Password"" Variant=""Variant.Outlined"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""3"">
        <MudTextField @bind-Value=""ReadOnly"" Label=""Read Only"" ReadOnly=""true"" Variant=""Variant.Outlined"" />
    </MudItem>
</MudGrid>

@code {
    public string HelperText { get; set; }
    public string Disabled { get; set; }
    public string Password { get; set; }
    public string ReadOnly { get; set; } = ""Can't change me"";
}";

public const string TextFieldInputsExample = @"<MudInput Value=""@(""Basic Input"")"" />
<MudInput T=""string"" Placeholder=""Placeholder"" />
<MudInput Value=""@(""Disabled"")"" Disabled=""true"" />
<MudInput Value=""@(""Error"")"" Error=""true"" />";

public const string TextFieldMultilineExample = @"<MudGrid>
    <MudItem xs=""12"" sm=""12"" md=""12"">
        <MudTextField T=""string"" Label=""Multiline"" Variant=""Variant.Text"" Text=""@sampleText"" Lines=""5"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""6"">
        <MudTextField T=""string"" Label=""Filled"" Variant=""Variant.Filled"" Text=""@sampleText"" Lines=""3"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""6"">
        <MudTextField T=""string"" Label=""Outlined"" Variant=""Variant.Outlined"" Text=""@sampleText"" Lines=""3"" />
    </MudItem>
</MudGrid>

@code
{
    string sampleText = ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."";
}";

public const string TimePickerBasicUsageExample = @"<MudTimePicker Label=""12 hours"" AmPm=""true"" @bind-Time=""time""/>
<MudTimePicker Label=""24 hours"" @bind-Time=""time""/>

@code{
    TimeSpan? time = new TimeSpan(00, 45, 00);
}";

public const string TimePickerColorExample = @"<MudTimePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Success"" Rounded=""true"" Value=""03:37 PM"" AmPm=""true"" />
<MudTimePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Secondary"" Rounded=""true"" Value=""13:37""/>";

public const string TimePickerElevationExample = @"<MudTimePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Success"" Rounded=""true"" Elevation=""1"" Value=""03:37 PM"" AmPm=""true"" />
<MudTimePicker PickerVariant=""PickerVariant.Static"" Color=""Color.Secondary"" Rounded=""true"" Elevation=""12"" Value=""13:37"" />";

public const string TimePickerStaticExample = @"<MudTimePicker PickerVariant=""PickerVariant.Static"" @bind-Time=""time"" AmPm=""true"" />
<MudTimePicker PickerVariant=""PickerVariant.Static"" Orientation=""Orientation.Landscape"" @bind-Time=""time""/>

@code{
    TimeSpan? time = new TimeSpan(13, 37, 00);
}";

public const string TimePickerViewsExample = @"<MudTimePicker Label=""Minutes"" Value=""13:37"" OpenTo=""OpenTo.Minutes"" />";

public const string ToggleIconButtonEventCallbackExample = @"<MudToggleIconButton Toggled=""@AlarmOn"" ToggledChanged=""(toggleValue) => IncrementSwitchedOn(toggleValue)""
                     Icon=""@Icons.Material.AlarmOff"" Color=""@Color.Error"" 
                     ToggledIcon=""@Icons.Material.AlarmOn"" ToggledColor=""@Color.Success"" />

<MudBody1>Alarm is @(AlarmOn ? ""On"" : ""Off"")</MudBody1>
<MudBody1>@($""I have been switched on {SwitchedOnCount} times."")</MudBody1>

@code {
    public bool AlarmOn { get; set; }
    public int SwitchedOnCount { get; set; }

    public void IncrementSwitchedOn(bool toggleValue)
    {
        // You can do things before assignment
        // ...

        // Assignment of one-way bound parameter
        AlarmOn = toggleValue;

        // And after assignment has been made
        // ...

        if (AlarmOn)
        {
            SwitchedOnCount++;
        }

    }
}";

public const string ToggleIconButtonTwoWayBindingExample = @"<MudToggleIconButton @bind-Toggled=""@AlarmOn""
                     Icon=""@Icons.Material.AlarmOff"" Color=""@Color.Error""
                     ToggledIcon=""@Icons.Material.AlarmOn"" ToggledColor=""@Color.Success""/>

<MudBody1>Alarm is @(AlarmOn ? ""On"" : ""Off"")</MudBody1>

@code {
    public bool AlarmOn { get; set; }
}";

public const string TooltipDelayedExample = @"<MudTooltip Text=""Delete"" Delayed=""1"">
    <MudIconButton Icon=""@Icons.Material.Delete"" />
</MudTooltip>
<MudTooltip Text=""Add"" Delayed=""1"">
    <MudFab Icon=""@Icons.Material.Add"" Color=""Color.Secondary"" />
</MudTooltip>";

public const string TooltipPostionExample = @"<MudTooltip Text=""Start/Left"" Placement=""Placement.Start"">
    <MudButton>Start/Left</MudButton>
</MudTooltip>
<MudTooltip Text=""Top"" Placement=""Placement.Top"">
    <MudButton>Top</MudButton>
</MudTooltip>
<MudTooltip Text=""Bottom"" Placement=""Placement.Bottom"">
    <MudButton>Bottom</MudButton>
</MudTooltip>
<MudTooltip Text=""End/Right"" Placement=""Placement.End"">
    <MudButton>End/Right</MudButton>
</MudTooltip>";

public const string TooltipSimpleExample = @"<MudTooltip Text=""Delete"">
    <MudIconButton Icon=""@Icons.Material.Delete"" />
</MudTooltip>
<MudTooltip Text=""Add"">
    <MudFab Icon=""@Icons.Material.Add"" Color=""Color.Secondary"" />
</MudTooltip>";

public const string TextAlignmentExample = @"<MudText Align=""Align.Left""><b>Left</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.Right""><b>Right</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.Center""><b>Center</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.Justify""><b>Justify</b> Lorem ipsum dolor sit amet.</MudText>
<MudText Align=""Align.Inherit""><b>Inherit</b> Lorem ipsum dolor sit amet.</MudText>";

public const string TextGeneralExample = @"<MudText Typo=""Typo.h1"">h1. Heading</MudText>
<MudText Typo=""Typo.h2"">h2. Heading</MudText>
<MudText Typo=""Typo.h3"">h3. Heading</MudText>
<MudText Typo=""Typo.h4"">h4. Heading</MudText>
<MudText Typo=""Typo.h5"">h5. Heading</MudText>
<MudText Typo=""Typo.h6"">h6. Heading</MudText>
<MudText Typo=""Typo.subtitle1"">subtitle1. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur</MudText>
<MudText Typo=""Typo.subtitle2"">subtitle2. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur</MudText>
<MudText Typo=""Typo.body1"">body1. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur unde suscipit, quam beatae rerum inventore consectetur, neque doloribus, cupiditate numquam dignissimos laborum fugiat deleniti? Eum quasi quidem quibusdam.</MudText>
<MudText Typo=""Typo.body2"">body2. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur unde suscipit, quam beatae rerum inventore consectetur, neque doloribus, cupiditate numquam dignissimos laborum fugiat deleniti? Eum quasi quidem quibusdam.</MudText>
<MudText Typo=""Typo.button"">BUTTON TEXT</MudText>
<MudText Typo=""Typo.caption"">caption text</MudText>
<MudText Typo=""Typo.overline"">OVERLINE TEXT</MudText>";

public const string OverviewThemesCustomExample = @"<MudThemeProvider Theme=""MyCustomTheme"" />

@code{
    MudTheme MyCustomTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = Colors.Blue.Default,
            Secondary = Colors.Green.Accent4,
            AppbarBackground = Colors.Red.Default,
        },

        LayoutProperties = new LayoutProperties()
        {
            DrawerWidth = ""260px""
        }
    };
}";

public const string OverviewThemesDefaultExample = @"<MudThemeProvider />";

public const string OverviewThemesMultipleExample = @"<MudThemeProvider Theme=""currentTheme"" />

<MudButton OnClick=""@((e) => DarkMode())"">Toggle Dark/Light Mode</MudButton>

@code{

    protected override void OnInitialized()
    {
        currentTheme = defaultTheme;
    }

    void DarkMode()
    {
        if (currentTheme == defaultTheme)
        {
            currentTheme = darkTheme;
        }
        else
        {
            currentTheme = defaultTheme;
        }
    }

    MudTheme currentTheme = new MudTheme();
    MudTheme defaultTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Black = ""#272c34""
        }
    };

    MudTheme darkTheme = new MudTheme()
    {
        Palette = new Palette()
        {
            Black = ""#27272f"",
            Background = ""#32333d"",
            BackgroundGrey = ""#27272f"",
            Surface = ""#373740"",
            DrawerBackground = ""#27272f"",
            DrawerText = ""rgba(255,255,255, 0.50)"",
            DrawerIcon = ""rgba(255,255,255, 0.50)"",
            AppbarBackground = ""#27272f"",
            AppbarText = ""rgba(255,255,255, 0.70)"",
            TextPrimary = ""rgba(255,255,255, 0.70)"",
            TextSecondary = ""rgba(255,255,255, 0.50)"",
            ActionDefault = ""#adadb1"",
            ActionDisabled = ""rgba(255,255,255, 0.26)"",
            ActionDisabledBackground = ""rgba(255,255,255, 0.12)""
        }
    };
}";

public const string BorderRadiusCornerExample = @"<div class=""mud-theme-info py-4 px-6 mx-4 rounded-tl-xl"">
    <MudText Align=""Align.Center"">.rounded-tl-xl</MudText>
</div>
<div class=""mud-theme-tertiary py-4 px-6 mx-4 rounded-tr-xl"">
    <MudText Align=""Align.Center"">.rounded-tr-xl</MudText>
</div>
<div class=""mud-theme-secondary py-4 px-6 mx-4 rounded-br-xl"">
    <MudText Align=""Align.Center"">.rounded-br-xl</MudText>
</div>
<div class=""mud-theme-primary py-4 px-6 mx-4 rounded-bl-xl"">
    <MudText Align=""Align.Center"">.rounded-bl-xl</MudText>
</div>";

public const string BorderRadiusDefaultExample = @"<div class=""mud-theme-primary py-4 px-6 mx-4 rounded"">
    <MudText Align=""Align.Center"">.rounded</MudText>
</div>";

public const string BorderRadiusPillnCircleExample = @"<div class=""mud-theme-secondary py-4 px-6 mx-4 rounded-pill"">
    <MudText Align=""Align.Center"">.rounded-pill</MudText>
</div>

<div class=""mud-theme-primary pa-7 rounded-circle""></div>";

public const string BorderRadiusRemoveExample = @"<div class=""mud-theme-primary py-4 px-8 rounded-0"">
    <MudText Align=""Align.Center"">.rounded-0</MudText>
</div>";

public const string BorderRadiusSidesExample = @"<div class=""mud-theme-primary py-4 px-6 mx-4 rounded-t-xl"">
    <MudText Align=""Align.Center"">.rounded-t-xl</MudText>
</div>
<div class=""mud-theme-secondary py-4 px-6 mx-4 rounded-r-xl"">
    <MudText Align=""Align.Center"">.rounded-r-xl</MudText>
</div>
<div class=""mud-theme-tertiary py-4 px-6 mx-4 rounded-b-xl"">
    <MudText Align=""Align.Center"">.rounded-b-xl</MudText>
</div>
<div class=""mud-theme-info py-4 px-6 mx-4 rounded-l-xl"">
    <MudText Align=""Align.Center"">.rounded-l-xl</MudText>
</div>";

public const string BorderRadiusSizeExample = @"<div class=""mud-theme-primary py-4 px-6 mx-4 rounded-0"">
    <MudText Align=""Align.Center"">.rounded-0</MudText>
</div>
<div class=""mud-theme-secondary py-4 px-6 mx-4 rounded-sm"">
    <MudText Align=""Align.Center"">.rounded-sm</MudText>
</div>
<div class=""mud-theme-tertiary py-4 px-6 mx-4 rounded"">
    <MudText Align=""Align.Center"">.rounded</MudText>
</div>
<div class=""mud-theme-info py-4 px-6 mx-4 rounded-lg"">
    <MudText Align=""Align.Center"">.rounded-lg</MudText>
</div>
<div class=""mud-theme-primary py-4 px-6 mx-4 rounded-xl"">
    <MudText Align=""Align.Center"">.rounded-xl</MudText>
</div>";

public const string ColorsMaterialExample = @"<MudGrid>
    <MudItem>
        <MudPaper Class=""pa-2 mb-2 purple-text text-accent-3"">
            <MudText Align=""Align.Center"">.purple-text .text-accent-3</MudText>
        </MudPaper>
        <MudPaper Class=""pa-2"" Style=""@purple"">
            <MudText Align=""Align.Center"">Colors.Purple.Accent3</MudText>
        </MudPaper>
    </MudItem>
    <MudItem>
        <MudPaper Class=""pa-2 mb-2 blue-grey darken-4 light-green-text text-accent-3"">
            <MudText Align=""Align.Center"">.blue-grey .darken-4 .light-green-text .text-accent-3</MudText>
        </MudPaper>
        <MudPaper Class=""pa-2"" Style=""@bluegrey"">
            <MudText Align=""Align.Center"">Colors.BlueGrey.Darken4 Colors.LightGreen.Accent3</MudText>
        </MudPaper>
    </MudItem>
</MudGrid>

@code{
    string purple = $""color:{Colors.Purple.Accent3};"";
    string bluegrey = $""color:{Colors.LightGreen.Accent3};background-color:{Colors.BlueGrey.Darken4};"";
}";

public const string ColorsMudBlazorExample = @"<MudPaper Class=""pa-2 mud-info"">
    <MudText Align=""Align.Center"">.mud-info</MudText>
</MudPaper>
<MudPaper Class=""pa-2 mud-secondary-text"">
    <MudText Align=""Align.Center"">.mud-secondary-text</MudText>
</MudPaper>
<MudPaper Class=""pa-2 mud-theme-primary"">
    <MudText Align=""Align.Center"">.mud-theme-primary</MudText>
</MudPaper>";

public const string CustomConverterExample = @"<MudSimpleTable Elevation=""0"" Hover=""false"" Class=""mt-4"" Dense=""false"">
    <colgroup>
        <col style=""width: 70%;"" />
        <col style=""width: 15%;"" />
        <col style=""width: 15%;"" />
    </colgroup>
    <thead>
        <tr>
            <th>Mode</th>
            <th>TextField</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><CodeInline>Free decimal places (default)</CodeInline></td>
            <td>
                <MudTextField @bind-Value=""@decimal_value_free"" Class=""mt-n1"" Immediate=""true"" />
            </td>
            <td><MudText Inline=""true"">@ToS(decimal_value_free) </MudText></td>
        </tr>
        <tr>
            <td><CodeInline>No decimal places (what about int value?)</CodeInline></td>
            <td>
                <MudTextField Converter=""@(new DefaultConverter<decimal>() { GetFunc = (e) => Math.Round(decimal.Parse(e), 0), SetFunc = (e) => e.ToString(""#0"")})"" 
                              @bind-Value=""@decimal_value_0d"" Class=""mt-n1"" Immediate=""false"" />
            </td>
            <td><MudText Inline=""true"">@ToS(decimal_value_0d) </MudText></td>
        </tr>
        <tr>
            <td><CodeInline>Two decimal places</CodeInline></td>
            <td>
                <MudTextField Converter=""@(new DefaultConverter<decimal>() { GetFunc = (e) => Math.Round(decimal.Parse(e), 2),  SetFunc = (e) => e.ToString(""0.00"")})"" 
                              @bind-Value=""@decimal_value_2d"" Class=""mt-n1"" Immediate=""false"" />
            </td>
            <td><MudText Inline=""true"">@ToS(decimal_value_2d) </MudText></td>
        </tr>
        <tr>
            <td><CodeInline>Three decimal places</CodeInline></td>
            <td>
                <MudTextField Converter=""@(new DefaultConverter<decimal>() { GetFunc = (e) => Math.Round(decimal.Parse(e), 3), SetFunc = (e) => e.ToString(""0.000"")})""
                              @bind-Value=""@decimal_value_3d"" Class=""mt-n1"" Immediate=""false"" />
            </td>
            <td><MudText Inline=""true"">@ToS(decimal_value_3d) </MudText></td>
        </tr>
    </tbody>
</MudSimpleTable>

@code {
    decimal decimal_value_free = 99.99999999m;
    decimal decimal_value_0d = 99;
    decimal decimal_value_2d = 99.99m;
    decimal decimal_value_3d = 99.999m;

    string ToS(object value)
    {
        if (value == null)
            return ""null"";
        return """" + value;
    }

}";

public const string SpecialConverterExample = @"@using System.Globalization;

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudSwitch Color=""Color.Primary"" @bind-Checked=""@state"">Flip the switch</MudSwitch>
    </MudItem>
    
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""Switch state"" Variant=""Variant.Outlined"" Converter=""@converter"" @bind-Value=""@state"" Immediate=""true""/>
    </MudItem>

</MudGrid>

@code {
    bool state = true;

    Converter<bool> converter = new Converter<bool>
    {
        SetFunc = value => value ? ""ON"" : ""OFF"",
        GetFunc = text => (text ?? """").ToLowerInvariant() == ""on"",
    };
}";

public const string TurkeyTestExample = @"@using System.Globalization;

<MudGrid>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""en-US"" Variant=""Variant.Outlined"" Culture=""@en"" @bind-Value=""date"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""de-AT"" Variant=""Variant.Outlined"" Culture=""@de"" @bind-Value=""date""></MudTextField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""cn-ZH"" Variant=""Variant.Outlined"" Culture=""@cn"" @bind-Value=""date""></MudTextField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""en-US: dddd, MMM dd"" Variant=""Variant.Outlined"" Culture=""@en"" Format=""dddd, MMM dd"" @bind-Value=""date"" />
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""de-AT: dddd, dd. MM."" Variant=""Variant.Outlined"" Culture=""@de"" Format=""dddd, dd. MM."" @bind-Value=""date""></MudTextField>
    </MudItem>
    <MudItem xs=""12"" sm=""6"" md=""4"">
        <MudTextField Label=""cn-ZH: yy年MM月dd日"" Variant=""Variant.Outlined"" Culture=""@cn"" Format=""yyyy年MM月dd日"" @bind-Value=""date""></MudTextField>
    </MudItem>
</MudGrid>

@code {
    CultureInfo en = @CultureInfo.GetCultureInfo(""en-US"");
    CultureInfo de = CultureInfo.GetCultureInfo(""de-AT"");
    CultureInfo cn = CultureInfo.GetCultureInfo(""cn-ZH"");
    DateTime date = DateTime.Now;
}";

public const string DisplayDblockExample = @"<div>
    <div class=""d-block pa-2 mud-theme-primary"">d-block</div>
    <div class=""d-block pa-2 mud-theme-dark"">d-block</div>
</div>";

public const string DisplayDinlineExample = @"<div>
    <div class=""d-inline pa-2 mud-theme-primary"">d-inline</div>
    <div class=""d-inline pa-2 mud-theme-dark"">d-inline</div>
</div>";

public const string DisplayVisibilyExample = @"<MudPaper Elevation=""0"" Class=""pa-4"" Style=""height:100px; width:180px;"">
    <div class=""d-none d-sm-flex d-md-none mud-theme-primary rounded"" style=""height:100%; width:100%;""></div>
</MudPaper>
<MudPaper Elevation=""0"" Class=""pa-4"" Style=""height:100px; width:180px;"">
    <div class=""d-lg-none mud-theme-secondary rounded"" style=""height:100%; width:100%;""></div>
</MudPaper>
<MudPaper Elevation=""0"" Class=""pa-4"" Style=""height:100px; width:180px;"">
    <div class=""d-none d-lg-block mud-theme-tertiary rounded"" style=""height:100%; width:100%;""></div>
</MudPaper>";

public const string ElevationUsageExample = @"<div class=""mud-elevation-0"">0</div>
<div class=""mud-elevation-1"">1</div>
<div class=""mud-elevation-2"">2</div>
<div class=""mud-elevation-3"">3</div>
<div class=""mud-elevation-4"">4</div>
<div class=""mud-elevation-5"">5</div>
<div class=""mud-elevation-6"">6</div>
<div class=""mud-elevation-7"">7</div>
<div class=""mud-elevation-8"">8</div>
<div class=""mud-elevation-9"">9</div>
<div class=""mud-elevation-10"">10</div>
<div class=""mud-elevation-11"">11</div>
<div class=""mud-elevation-12"">12</div>
<div class=""mud-elevation-13"">13</div>
<div class=""mud-elevation-14"">14</div>
<div class=""mud-elevation-15"">15</div>
<div class=""mud-elevation-16"">16</div>
<div class=""mud-elevation-17"">17</div>
<div class=""mud-elevation-18"">18</div>
<div class=""mud-elevation-19"">19</div>
<div class=""mud-elevation-20"">20</div>
<div class=""mud-elevation-21"">21</div>
<div class=""mud-elevation-22"">22</div>
<div class=""mud-elevation-23"">23</div>
<div class=""mud-elevation-24"">24</div>
<div class=""mud-elevation-25"">25</div>";

public const string FlexAlignContentExample = @"<MudGrid>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex align-content-start flex-wrap py-2 px-1"" Style=""height:200px;"">
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">1</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">2</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">3</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">4</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">5</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">6</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">7</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">8</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">9</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">10</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">11</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">12</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">13</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">14</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">15</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">16</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex align-content-end flex-wrap py-2 px-1"" Style=""height:200px;"">
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">1</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">2</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">3</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">4</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">5</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">6</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">7</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">8</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">9</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">10</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">11</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">12</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">13</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">14</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">15</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">16</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex align-content-center flex-wrap py-2 px-1"" Style=""height:200px;"">
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">1</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">2</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">3</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">4</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">5</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">6</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">7</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">8</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">9</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">10</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">11</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">12</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">13</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">14</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">15</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">16</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex align-content-space-between flex-wrap py-2 px-1"" Style=""height:200px;"">
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">1</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">2</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">3</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">4</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">5</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">6</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">7</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">8</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">9</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">10</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">11</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">12</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">13</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-secondary"" Style=""width:36px; text-align:center;"">14</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-info"" Style=""width:36px; text-align:center;"">15</MudPaper>
            <MudPaper Class=""pa-2 mx-2 my-1 mud-theme-primary"" Style=""width:36px; text-align:center;"">16</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudPaper Class=""d-flex align-content-space-around flex-wrap px-2"" Style=""height:250px;"">
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary"" Style=""width:79px; text-align:center;"">1</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"" Style=""width:79px; text-align:center;"">2</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info"" Style=""width:79px; text-align:center;"">3</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary"" Style=""width:79px; text-align:center;"">4</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"" Style=""width: 79px; text-align: center;"">5</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info"" Style=""width: 79px; text-align: center;"">6</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary"" Style=""width: 79px; text-align: center;"">7</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"" Style=""width: 79px; text-align: center;"">8</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info"" Style=""width: 79px; text-align: center;"">9</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary"" Style=""width: 79px; text-align: center;"">10</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"" Style=""width: 79px; text-align: center;"">11</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info"" Style=""width: 79px; text-align: center;"">12</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary"" Style=""width: 79px; text-align: center;"">13</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"" Style=""width: 79px; text-align: center;"">14</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info"" Style=""width: 79px; text-align: center;"">15</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary"" Style=""width: 79px; text-align: center;"">16</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"" Style=""width: 79px; text-align: center;"">17</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info"" Style=""width: 79px; text-align: center;"">18</MudPaper>
        </MudPaper>
    </MudItem>
</MudGrid>";

public const string FlexAlignExample = @"<MudGrid>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex align-start py-2 px-1"" Style=""height:150px;"">
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary"">Flex Item 1</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info"">Flex Item 3</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex align-end py-2 px-1"" Style=""height:150px;"">
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary"">Flex Item 1</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info"">Flex Item 3</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex align-center py-2 px-1"" Style=""height:150px;"">
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary"">Flex Item 1</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info"">Flex Item 3</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex align-baseline py-2 px-1"" Style=""height:150px;"">
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary"">Flex Item 1</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info"">Flex Item 3</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudPaper Class=""d-flex align-stretch py-2 px-1"" Style=""height:150px;"">
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary"">Flex Item 1</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info"">Flex Item 3</MudPaper>
        </MudPaper>
    </MudItem>
</MudGrid>";

public const string FlexAlignSelfExample = @"<MudGrid>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex py-2 px-1"" Style=""height:150px;"">
            <MudPaper Class=""pa-2 ml-auto mud-theme-primary"">Flex Item</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary align-self-start"">Aligned Flex Item</MudPaper>
            <MudPaper Class=""pa-2 mr-auto mud-theme-primary"">Flex Item</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex py-2 px-1"" Style=""height:150px;"">
            <MudPaper Class=""pa-2 ml-auto mud-theme-primary"">Flex Item</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary align-self-end"">Aligned Flex Item</MudPaper>
            <MudPaper Class=""pa-2 mr-auto mud-theme-primary"">Flex Item</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex py-2 px-1"" Style=""height:150px;"">
            <MudPaper Class=""pa-2 ml-auto mud-theme-primary"">Flex Item</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary align-self-center"">Aligned Flex Item</MudPaper>
            <MudPaper Class=""pa-2 mr-auto mud-theme-primary"">Flex Item</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex py-2 px-1"" Style=""height:150px;"">
            <MudPaper Class=""pa-2 ml-auto mud-theme-primary"">Flex Item</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary align-self-baseline"">Aligned Flex Item</MudPaper>
            <MudPaper Class=""pa-2 mr-auto mud-theme-primary"">Flex Item</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex py-2 px-1"" Style=""height:150px;"">
            <MudPaper Class=""pa-2 ml-auto mud-theme-primary"">Flex Item</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary align-self-auto"">Aligned Flex Item</MudPaper>
            <MudPaper Class=""pa-2 mr-auto mud-theme-primary"">Flex Item</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex py-2 px-1"" Style=""height:150px;"">
            <MudPaper Class=""pa-2 ml-auto mud-theme-primary"">Flex Item</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary align-self-stretch"">Aligned Flex Item</MudPaper>
            <MudPaper Class=""pa-2 mr-auto mud-theme-primary"">Flex Item</MudPaper>
        </MudPaper>
    </MudItem>
</MudGrid>";

public const string FlexAutoMarginsExample = @"<MudGrid>
    <MudItem xs=""12"" md=""12"">
        <MudPaper Class=""d-flex py-2 px-1"">
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary"">Flex Item 1</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info"">Flex Item 3</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudPaper Class=""d-flex py-2 px-1"">
            <MudPaper Class=""pa-2 ml-2 mr-auto mud-theme-primary"">Flex Item 1</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info"">Flex Item 3</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudPaper Class=""d-flex py-2 px-1"">
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary"">Flex Item 1</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
            <MudPaper Class=""pa-2 mr-2 ml-auto mud-theme-info"">Flex Item 3</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex align-start flex-column py-2 px-1"" Style=""height:200px;"">
            <MudPaper Class=""pa-2 my-1 mx-2 mb-auto mud-theme-primary"">Flex Item 1</MudPaper>
            <MudPaper Class=""pa-2 my-1 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
            <MudPaper Class=""pa-2 my-1 mx-2 mud-theme-info"">Flex Item 3</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <MudPaper Class=""d-flex align-end flex-column py-2 px-1"" Style=""height:200px;"">
            <MudPaper Class=""pa-2 my-1 mx-2 mud-theme-primary"">Flex Item 1</MudPaper>
            <MudPaper Class=""pa-2 my-1 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
            <MudPaper Class=""pa-2 my-1 mx-2 mt-auto mud-theme-info"">Flex Item 3</MudPaper>
        </MudPaper>
    </MudItem>
</MudGrid>";

public const string FlexDirectionExample = @"<MudGrid>
    <MudItem xs=""12"" md=""12"">
        <MudPaper Class=""d-flex flex-row py-2 px-1"">
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary"">Flex Item 1</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info"">Flex Item 3</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudPaper Class=""d-flex flex-row-reverse py-2 px-1"">
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary"">Flex Item 1</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info"">Flex Item 3</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <div class=""d-flex flex-column"">
            <MudPaper Class=""my-2 pa-4 mud-theme-primary"">Flex Item 1</MudPaper>
            <MudPaper Class=""my-2 pa-4 mud-theme-secondary"">Flex Item 2</MudPaper>
            <MudPaper Class=""my-2 pa-4 mud-theme-info"">Flex Item 3</MudPaper>
        </div>
    </MudItem>
    <MudItem xs=""12"" md=""6"">
        <div class=""d-flex flex-column-reverse"">
            <MudPaper Class=""my-2 pa-4 mud-theme-primary"">Flex Item 1</MudPaper>
            <MudPaper Class=""my-2 pa-4 mud-theme-secondary"">Flex Item 2</MudPaper>
            <MudPaper Class=""my-2 pa-4 mud-theme-info"">Flex Item 3</MudPaper>
        </div>
    </MudItem>
</MudGrid>";

public const string FlexEnableExample = @"<MudPaper Class=""d-flex pa-4"">
    I'm a flexbox container.
</MudPaper>
<MudPaper Class=""d-flex pa-4"">
    I'm a flexbox container.
</MudPaper>
<MudPaper Class=""d-inline-flex pa-4"">
    I'm an inline flexbox container.
</MudPaper>
<MudPaper Class=""d-inline-flex pa-4"">
    I'm an inline flexbox container.
</MudPaper>";

public const string FlexGrowAndShrinkExample = @"<MudGrid>
    <MudItem xs=""12"" md=""12"">
        <MudPaper Class=""d-flex py-2 px-1"">
            <MudPaper Class=""flex-grow-0 flex-shrink-0 pa-2 mx-2 mud-theme-primary order-3"">First Flex Item</MudPaper>
            <MudPaper Class=""flex-grow-1 flex-shrink-0 pa-2 mx-2 mud-theme-secondary order-2"">Second Flex Item</MudPaper>
            <MudPaper Class=""flex-grow-0 flex-shrink-1 pa-2 mx-2 mud-theme-info order-1"">Third Flex Item</MudPaper>
        </MudPaper>
    </MudItem>
</MudGrid>";

public const string FlexJustifyExample = @"<MudPaper Class=""d-flex justify-start py-2 px-1"">
    <MudPaper Class=""pa-2 mx-2 mud-theme-primary"">Flex Item 1</MudPaper>
    <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
    <MudPaper Class=""pa-2 mx-2 mud-theme-info"">Flex Item 3</MudPaper>
</MudPaper>

<MudPaper Class=""d-flex justify-end py-2 px-1 mt-6"">
    <MudPaper Class=""pa-2 mx-2 mud-theme-primary"">Flex Item 1</MudPaper>
    <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
    <MudPaper Class=""pa-2 mx-2 mud-theme-info"">Flex Item 3</MudPaper>
</MudPaper>

<MudPaper Class=""d-flex justify-center py-2 px-1 mt-6"">
    <MudPaper Class=""pa-2 mx-2 mud-theme-primary"">Flex Item 1</MudPaper>
    <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
    <MudPaper Class=""pa-2 mx-2 mud-theme-info"">Flex Item 3</MudPaper>
</MudPaper>

<MudPaper Class=""d-flex justify-space-between py-2 px-1 mt-6"">
    <MudPaper Class=""pa-2 mx-2 mud-theme-primary"">Flex Item 1</MudPaper>
    <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
    <MudPaper Class=""pa-2 mx-2 mud-theme-info"">Flex Item 3</MudPaper>
</MudPaper>

<MudPaper Class=""d-flex justify-space-around py-2 px-1 mt-6"">
    <MudPaper Class=""pa-2 mx-2 mud-theme-primary"">Flex Item 1</MudPaper>
    <MudPaper Class=""pa-2 mx-2 mud-theme-secondary"">Flex Item 2</MudPaper>
    <MudPaper Class=""pa-2 mx-2 mud-theme-info"">Flex Item 3</MudPaper>
</MudPaper>";

public const string FlexOrderExample = @"<MudGrid>
    <MudItem xs=""12"" md=""12"">
        <MudPaper Class=""d-flex py-2 px-1"">
            <MudPaper Class=""pa-2 mx-2 mud-theme-primary order-3"">First Flex Item</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-secondary order-2"">Second Flex Item</MudPaper>
            <MudPaper Class=""pa-2 mx-2 mud-theme-info order-1"">Third Flex Item</MudPaper>
        </MudPaper>
    </MudItem>
</MudGrid>";

public const string FlexWrapExample = @"<MudGrid>
    <MudItem xs=""12"" md=""12"">
        <MudPaper Class=""d-flex flex-nowrap px-1"">
            <MudPaper Class=""pa-2 ma-2 mud-theme-primary"">Flex Item</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-secondary"">Flex Item</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-info"">Flex Item</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-primary"">Flex Item</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-secondary"">Flex Item</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-info"">Flex Item</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudPaper Class=""d-flex flex-wrap px-1"">
            <MudPaper Class=""pa-2 ma-2 mud-theme-primary"" Style=""width:75px; text-align:center;"">1</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-secondary"" Style=""width:75px; text-align:center;"">2</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-info"" Style=""width:75px; text-align:center;"">3</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-primary"" Style=""width:75px; text-align:center;"">4</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-secondary"" Style=""width:75px; text-align:center;"">5</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-info"" Style=""width:75px; text-align:center;"">6</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-primary"" Style=""width:75px; text-align:center;"">7</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-secondary"" Style=""width:75px; text-align:center;"">8</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-info"" Style=""width:75px; text-align:center;"">9</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-primary"" Style=""width:75px; text-align:center;"">10</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-secondary"" Style=""width:75px; text-align:center;"">11</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-info"" Style=""width:75px; text-align:center;"">12</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-primary"" Style=""width:75px; text-align:center;"">13</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-secondary"" Style=""width:75px; text-align:center;"">14</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-info"" Style=""width:75px; text-align:center;"">15</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-primary"" Style=""width:75px; text-align:center;"">16</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-secondary"" Style=""width:75px; text-align:center;"">17</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-info"" Style=""width:75px; text-align:center;"">18</MudPaper>
        </MudPaper>
    </MudItem>
    <MudItem xs=""12"" md=""12"">
        <MudPaper Class=""d-flex flex-wrap-reverse px-1"">
            <MudPaper Class=""pa-2 ma-2 mud-theme-primary"" Style=""width:75px; text-align:center;"">1</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-secondary"" Style=""width:75px; text-align:center;"">2</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-info"" Style=""width:75px; text-align:center;"">3</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-primary"" Style=""width:75px; text-align:center;"">4</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-secondary"" Style=""width:75px; text-align:center;"">5</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-info"" Style=""width:75px; text-align:center;"">6</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-primary"" Style=""width:75px; text-align:center;"">7</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-secondary"" Style=""width:75px; text-align:center;"">8</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-info"" Style=""width:75px; text-align:center;"">9</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-primary"" Style=""width:75px; text-align:center;"">10</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-secondary"" Style=""width:75px; text-align:center;"">11</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-info"" Style=""width:75px; text-align:center;"">12</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-primary"" Style=""width:75px; text-align:center;"">13</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-secondary"" Style=""width:75px; text-align:center;"">14</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-info"" Style=""width:75px; text-align:center;"">15</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-primary"" Style=""width:75px; text-align:center;"">16</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-secondary"" Style=""width:75px; text-align:center;"">17</MudPaper>
            <MudPaper Class=""pa-2 ma-2 mud-theme-info"" Style=""width:75px; text-align:center;"">18</MudPaper>
        </MudPaper>
    </MudItem>
</MudGrid>";

public const string SpacingBreakpointExample = @"<MudPaper Class=""pa-md-6 mx-lg-auto mud-theme-secondary"">
    <MudText Typo=""Typo.body1"">Adjust screen size to see the changes.</MudText>
</MudPaper>";

public const string SpacingCenteringExample = @"<MudPaper Class=""mx-auto pa-6 mud-theme-success"">
    <MudText Typo=""Typo.body1"">Centered!</MudText>
</MudPaper>";

public const string SpacingExample = @"<MudPaper Class=""pa-4 mr-16"">
    <MudText Typo=""Typo.subtitle2"">pa-4 mr-16</MudText>
</MudPaper>
<MudPaper Class=""pa-4"">
    <MudText Typo=""Typo.subtitle2"">pa-4</MudText>
</MudPaper>
<MudPaper Class=""pa-4 ml-8"">
    <MudText Typo=""Typo.subtitle2"">pa-4 ml-8</MudText>
</MudPaper>";

public const string SpacingNegativeExample = @"<MudPaper Class=""mx-auto pa-4 mud-theme-secondary"" Style=""height:100px; width:150px;"">
</MudPaper>
<MudPaper Class=""mt-n12 mx-auto pa-6 mud-theme-primary"" Elevation=""12"" Style=""width: 350px;"">
    <MudText Typo=""Typo.body1"">This card uses negative top margin!</MudText>
</MudPaper>";

public const string UsageExample = @"<MudText Typo=""Typo.h6"">MudBlazor is @Text</MudText>
<MudButton Variant=""Variant.Filled"" Color=""Color.Primary"" OnClick=""ButtonOnClick"">@ButtonText</MudButton>

@code {
    public string Text { get; set; } = ""????"";
    public string ButtonText { get; set; } = ""Click Me"";
    public int ButtonClicked { get; set; }

    void ButtonOnClick()
    {
        ButtonClicked += 1;
        Text = $""Awesome x {ButtonClicked}"";
        ButtonText = ""Click Me Again"";
    }
}";

    }
}

