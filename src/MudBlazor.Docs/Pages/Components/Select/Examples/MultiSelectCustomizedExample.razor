@namespace MudBlazor.Docs.Examples
@using System.Linq

<MudGrid>
    <MudItem xs="12" sm="8">
        <MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" MultiSelection="true" ValuePresenter="_valuePresenter" @bind-Value="value" @bind-SelectedValues="options" T="string" Label="US States" AdornmentIcon="@Icons.Filled.Search" AnchorOrigin="Origin.BottomCenter">
            @foreach (var state in states)
            {
                <MudSelectItem T="string" Value="@state" Text="@state" />
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12" sm="4">
        <MudRadioGroup @ref="_radioGroup" T="int" SelectedOptionChanged="GroupOptionChanged">
            <MudRadio Option="0" Color="Color.Primary">Standard Text</MudRadio>
            <MudRadio Option="1" Color="Color.Primary">Customized Text</MudRadio>
            <MudRadio Option="2" Color="Color.Primary">Chip</MudRadio>
        </MudRadioGroup>
        <MudGrid Class="mt-3 px-4">
            <MudItem xs="6">
                <MudText Typo="Typo.subtitle2">Value:</MudText>
                <MudText Typo="Typo.subtitle2">"</MudText>
                <MudText Typo="Typo.body2" Class="pl-4">@value</MudText>
                <MudText Typo="Typo.subtitle2">"</MudText>
            </MudItem>
            <MudItem xs="6">
                <MudText Typo="Typo.subtitle2">SelectedValues: HashSet&lt;string&gt;</MudText>
                <MudText Typo="Typo.subtitle2">{</MudText>
                <MudText Typo="Typo.body2" Class="pl-4">@(string.Join(", ", options.Select(x => $"\"{x}\"")))</MudText>
                    <MudText Typo="Typo.subtitle2">}</MudText>
                </MudItem>
            </MudGrid>
    </MudItem>
</MudGrid>

@code {
    MudRadioGroup<int> _radioGroup;
    //MudSwitch<bool> _switch;
    bool multiselectionTextChoice;
    ValuePresenter _valuePresenter = ValuePresenter.Text; 
    string value { get; set; } = "Nothing selected";
    IEnumerable<string> options { get; set; } = new HashSet<string>() { "Alaska" };

    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    private string GetMultiSelectionText(List<string> selectedValues)
    {
        if (multiselectionTextChoice)
        {
            return $"Selected state{(selectedValues.Count > 1 ? "s" : "")}: {string.Join(", ", selectedValues.Select(x => x))}";
        }
        else
        {
            return $"{selectedValues.Count} state{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
        }
    }

    private void GroupOptionChanged()
    {
        if (_radioGroup.SelectedOption == 0)
        {
            multiselectionTextChoice = false;
            _valuePresenter = ValuePresenter.Text;
        }
        else if (_radioGroup.SelectedOption == 1)
        {
            multiselectionTextChoice = true;
            _valuePresenter = ValuePresenter.Text;
        }
        else if (_radioGroup.SelectedOption == 2)
        {
            _valuePresenter = ValuePresenter.Chip;
        }
    }
}
