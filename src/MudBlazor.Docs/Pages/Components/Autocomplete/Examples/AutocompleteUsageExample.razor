@namespace MudBlazor.Docs.Examples

<MudGrid>
    <MudChipSet AllClosable="true">
        @{
            foreach (var tag in _selectedTags)
            {
                <MudChip Text="@tag" />
            }
        }
    </MudChipSet>
    <MudAutocomplete @ref="_autoComplete" T="string" Label="Type a value and hit enter to create a chip" @bind-Value="value1" SearchFunc="@Search1"
                     ResetValueOnEmptyText="true"
                     CoerceText="false" CoerceValue="true" OnKeyUp="HandleKeyUp" />


</MudGrid>

@code {
    private string value1;
    private HashSet<string> _selectedTags = new();
    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
    };

    private MudAutocomplete<string> _autoComplete { get; set; }

    private async Task HandleKeyUp(KeyboardEventArgs obj)
    {
        if (string.IsNullOrWhiteSpace(value1))
        {
            return;
        }

        if (obj.Key == "Enter")
        {
            _selectedTags.Add(value1);
            await _autoComplete.Clear();
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<string>> Search1(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
