@using System.Collections
@namespace MudBlazor.Docs.Examples

<MudPaper Width="450px" MaxHeight="500px" Class="overflow-y-auto" Elevation="0">
  <MudTreeView Items="@TreeItems">
	  <ItemTemplate>
		  <MudTreeViewItem @bind-Expanded="@context.Expanded" Items="@context.TreeItems">
			  <Content>
				  <MudTreeViewItemToggleButton @bind-Expanded="@context.Expanded" Visible="@context.HasChild" />
				  <MudCheckBox T="bool?" Value="@(context.HasPartialChildSelection() ? null : context.Checked)" ValueChanged="@((e) => CheckedChanged(context))"></MudCheckBox>
				  <MudText>@context.Text</MudText>
			  </Content>
		  </MudTreeViewItem>
	  </ItemTemplate>
  </MudTreeView>
</MudPaper>

@code {

    private List<TreeItemData> TreeItems { get; set; } = new();

    public class TreeItemData : IEnumerable<TreeItemData>
    {
        public TreeItemData Parent { get; set; } = null;

        public string Text { get; set; }

        public bool Expanded { get; set; } = false;

        public bool Checked { get; set; } = false;

        public bool HasChild => TreeItems != null && TreeItems.Count > 0;

        public List<TreeItemData> TreeItems { get; set; } = new();

        public TreeItemData(string text)
        {
            Text = text;
        }

        public void Add(TreeItemData item)
        {
            item.Parent = this;
            this.TreeItems.Add(item);
        }

        public bool HasPartialChildSelection()
        {
            int iChildrenCheckedCount = (from c in TreeItems where c.Checked select c).Count();
            return HasChild && iChildrenCheckedCount > 0 && iChildrenCheckedCount < TreeItems.Count();
        }

        public IEnumerator<TreeItemData> GetEnumerator() => TreeItems.GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();

        public bool? GetChecked()
        {
            if (TreeItems.Count == 0)
                return Checked;
            if (HasPartialChildSelection())
                return null;
            return Checked = TreeItems.All(x => x.Checked);
        }
    }

    protected void CheckedChanged(TreeItemData item)
    {
        item.Checked = !item.Checked;
        // checked status on any child items should mirror this parent item
        if (item.HasChild) {
            foreach (TreeItemData child in item.TreeItems) {
                child.Checked = item.Checked;
            }
        }
        // if there's a parent and all children are checked/unchecked, parent should match
        if (item.Parent != null) {
            item.Parent.Checked = item.Parent.TreeItems.All(i => i.Checked);
        }
    }

    protected override void OnInitialized()
    {
        TreeItems.Add(new TreeItemData("Water cooled reactors") {
                Expanded = true,
                TreeItems = new() {
                    new TreeItemData("Pressurized water reactor (PWR)"),
                    new TreeItemData("Boiling water reactor (BWR)"),
                    new TreeItemData("Supercritical water reactor (SCWR)"),
                    new TreeItemData("Reduced moderation water reactor (RMWR)"),
                }
            });
        TreeItems.Add(new TreeItemData("Liquid metal cooled reactor (LMR)") {
            new TreeItemData("Sodium-cooled fast reactor"),
            new TreeItemData("Lead-cooled fast reactor"),
        });
        TreeItems.Add(new TreeItemData("Gas cooled reactors (GCR)"));
        TreeItems.Add(new TreeItemData("Molten-salt reactors (MSR)"));
        TreeItems.Add(new TreeItemData("Organic nuclear reactors (OCR)"));
    }
}