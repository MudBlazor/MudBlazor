@using System.Collections.ObjectModel
@namespace MudBlazor.Docs.Examples

<MudPaper Width="300px" Elevation="0">
    <MudTreeView ServerData="LoadServerData" Items="TreeItems">
        <ItemTemplate>
            <MudTreeViewItem Text="@context.Text" Value="@context.Value" Icon="@context.Icon" LoadingIconColor="Color.Info" CanExpand="@context.Expandable"
                             EndText="@((context as ExampleTreeItemData).Number?.ToString())" EndTextTypo="@Typo.caption" />
        </ItemTemplate>
    </MudTreeView>
</MudPaper>

@code {
    private List<ExampleTreeItemData> TreeItems { get; set; } = new();

    public class ExampleTreeItemData : TreeItemData<string>
    {
        public ExampleTreeItemData(string value) : base(value)
        {
            Text = value;
        }

        public int? Number { get; set; }
    }

    protected override void OnInitialized()
    {
        TreeItems.Add(new ExampleTreeItemData("All Mail") { Icon = Icons.Material.Filled.Email });
        TreeItems.Add(new ExampleTreeItemData("Trash") { Icon = Icons.Material.Filled.Delete });
        TreeItems.Add(new ExampleTreeItemData("Categories") {
                Icon = Icons.Material.Filled.Label,
                Expanded = true,
                Children = [
                        new ExampleTreeItemData("Social") { Icon = Icons.Material.Filled.Group, Number = 90 },
                        new ExampleTreeItemData("Updates") { Icon = Icons.Material.Filled.Info, Number = 2294 },
                        new ExampleTreeItemData("Forums") { Icon = Icons.Material.Filled.QuestionAnswer, Number = 3566 },
                        new ExampleTreeItemData("Promotions") { Icon = Icons.Material.Filled.LocalOffer, Number = 733 }
                    ]
            });
        TreeItems.Add(new ExampleTreeItemData("History") { Icon = Icons.Material.Filled.Label, Expandable = false });
    }

    public async Task<IReadOnlyCollection<TreeItemData<string>>> LoadServerData(string parentValue)
    {
        await Task.Delay(500);
        var parentNode = TreeItems.FirstOrDefault(x => x.Value == parentValue);
        return parentNode?.Children;
    }

}