@using System.Collections.ObjectModel
@namespace MudBlazor.Docs.Examples

<MudPaper Width="300px" Elevation="0">
    <MudTreeView ServerData="LoadServerData" Items="TreeItems">
        <ItemTemplate>
            <MudTreeViewItem Value="@context.Value" Icon="@context.Icon" LoadingIconColor="Color.Info" CanExpand="@context.Expandable"/>
        </ItemTemplate>
    </MudTreeView>
</MudPaper>

@code {
    private List<TreeItemData<string>> TreeItems { get; set; } = new();

    protected override void OnInitialized()
    {
        TreeItems.Add(new TreeItemData<string> {
                Value = "All Mail", Icon = Icons.Material.Filled.Label, Expanded = true,
                Children = [
                        new TreeItemData<string> { Value = "Promotions", Icon = Icons.Material.Filled.Group, 
                                Children = [
                                    new TreeItemData<string> { Value = "L.E.D Door Mats", Icon = Icons.Material.Outlined.Lightbulb, Expandable = false },
                                    new TreeItemData<string> { Value = "Car Beauty Salon", Icon = Icons.Material.Filled.CarRepair, Expandable = false },
                                    new TreeItemData<string> { Value = "Fakedoors.com", Icon = Icons.Material.Outlined.DoorFront, Expandable = false },
                                    new TreeItemData<string> { Value = "Bluetooth Toilet", Icon = Icons.Material.Filled.Wc, Expandable = false }
                                ]},
                    new TreeItemData<string> { Value = "Updates", Icon = Icons.Material.Filled.Info, Expandable = false },
                    new TreeItemData<string> { Value = "Forums", Icon = Icons.Material.Filled.QuestionAnswer, Expandable = false },
                    new TreeItemData<string> { Value = "Social", Icon = Icons.Material.Filled.LocalOffer, Expandable = false }
                ]});
        TreeItems.Add(new TreeItemData<string> { Value = "Trash", Icon = Icons.Material.Filled.Delete });
    }

    public async Task<IReadOnlyCollection<TreeItemData<string>>> LoadServerData(string parentValue)
    {
        // wait 500ms to simulate a server load, then recursively search through our tree to find the child items for the given value
        await Task.Delay(500);
        foreach (var item in TreeItems) {
            if (item.Value == parentValue)
                return item.Children;
            if (!item.HasChildren)
                continue;
            var descendentItem = FindTreeItemData(parentValue, item);
            if (descendentItem != null)
                return descendentItem.Children;
        }
        return null;
    }

    private TreeItemData<string> FindTreeItemData(string value, TreeItemData<string> parent)
    {
        foreach (var child in parent.Children) {
            if (child.Value == value)
                return child;
            if (!child.HasChildren)
                continue;
            var descendentItem = FindTreeItemData(value, child);
            if (descendentItem != null)
                return descendentItem;
        }
        return null;
    }

}