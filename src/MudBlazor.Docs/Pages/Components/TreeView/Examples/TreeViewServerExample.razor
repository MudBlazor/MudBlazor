@using System.Collections.ObjectModel
@namespace MudBlazor.Docs.Examples

<MudPaper Width="300px" Elevation="0">
    <MudTreeView ServerData="LoadServerData" Items="TreeItems">
        <ItemTemplate>
            <MudTreeViewItem Text="@context.Text" Value="@context.Value" Icon="@context.Icon" LoadingIconColor="Color.Info" CanExpand="@context.Expandable"
                             EndText="@((context as ExampleTreeItemData).Number?.ToString())" EndTextTypo="@Typo.caption" />
        </ItemTemplate>
    </MudTreeView>
</MudPaper>

@code {
    private List<ExampleTreeItemData> TreeItems { get; set; } = new();

    public class ExampleTreeItemData : TreeItemData<string>
    {
        public ExampleTreeItemData(string value) : base(value)
        {
            Text = value;
        }

        public int? Number { get; set; }
    }

    protected override void OnInitialized()
    {
        TreeItems.Add(new ExampleTreeItemData("All Mail") { Icon = Icons.Material.Filled.Email, Number = 2345 });
        TreeItems.Add(new ExampleTreeItemData("Trash") { Icon = Icons.Material.Filled.Delete, Expandable = false });
        TreeItems.Add(new ExampleTreeItemData("Categories") {
                Icon = Icons.Material.Filled.Label,
                Expanded = true,
                Children = [
                            new ExampleTreeItemData("Promotions") { 
                                Icon = Icons.Material.Filled.Group, 
                                Number = 4,
                                Children = [
                                    new ExampleTreeItemData("L.E.D Door Mats") { Icon = Icons.Material.Outlined.Lightbulb, Expandable = false },
                                    new ExampleTreeItemData("Car Beauty Salon") { Icon = Icons.Material.Filled.CarRepair, Expandable = false },
                                    new ExampleTreeItemData("Fakedoors.com") { Icon = Icons.Material.Outlined.DoorFront, Expandable = false },
                                    new ExampleTreeItemData("Bluetooth Toilet") { Icon = Icons.Material.Filled.Wc, Expandable = false }
                                ]},
                        new ExampleTreeItemData("Updates") { Icon = Icons.Material.Filled.Info, Number = 2294, Expandable = false },
                        new ExampleTreeItemData("Forums") { Icon = Icons.Material.Filled.QuestionAnswer, Number = 3566, Expandable = false },
                        new ExampleTreeItemData("Social") { Icon = Icons.Material.Filled.LocalOffer, Number = 733, Expandable = false }
                    ]
            });
        TreeItems.Add(new ExampleTreeItemData("History") { Icon = Icons.Material.Filled.Label, Number = 69 });
    }

    public async Task<IReadOnlyCollection<TreeItemData<string>>> LoadServerData(string parentValue)
    {
        // wait 500ms to simulate a server load, then recursively search through our tree to find the child items for the given value
        await Task.Delay(500);
        foreach (var item in TreeItems) {
            if (item.Value == parentValue)
                return item.Children;
            if (!item.HasChildren)
                continue;
            var descendentItem = FindTreeItemData(parentValue, item);
            if (descendentItem != null)
                return descendentItem.Children;
        }
        return null;
    }

    private TreeItemData<string> FindTreeItemData(string value, TreeItemData<string> parent)
    {
        foreach (var child in parent.Children) {
            if (child.Value == value)
                return child;
            if (!child.HasChildren)
                continue;
            var descendentItem = FindTreeItemData(value, child);
            if (descendentItem != null)
                return descendentItem;
        }
        return null;
    }

}