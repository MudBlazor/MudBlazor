@namespace MudBlazor.Docs.Examples

<MudDynamicTabs @ref="@DynamicTabs"
                Elevation="4" PanelClass="px-4 py-6"
                Rounded="true" ApplyEffectsToContainer="true"
                AddTab="AddTabCallback"
                CloseTab="@((panel) => CloseTabCallback(panel))" @bind-ActivePanelIndex="_index"
                AddIconToolTip="Click here to add a new tab"
                CloseIconToolTip="Close this tab. All data will be lost">
    @foreach (var item in UserTabs)
    {
        <MudTabPanel Text="@item.Name" Tag="@item.Id">@item.Content</MudTabPanel>
    }
</MudDynamicTabs>
<MudButton Color="Color.Primary" OnClick="Restore" Size="Size.Small" Class="ml-2 mt-1 mb-n2">Restore</MudButton>
<MudText>UserTabs index: @_index / DynamicTabs ActivePanelIndex: @DynamicTabs.ActivePanelIndex</MudText>
<MudText>UserTabs.Count: @UserTabs.Count / DynamicTabs Panels.Count: @DynamicTabs.Panels.Count</MudText>

@code {

    public class TabView
    {
        public String Name { get; set; }
        public String Content { get; set; }
        public Guid Id { get; set; }
    }

    public MudDynamicTabs DynamicTabs;
    public List<TabView> UserTabs = new();
    private int _index = 0;
    private bool _updateIndex = false;

    private void Restore()
    {
        UserTabs.Clear();
        UserTabs.Add(new TabView { Content = "First tab content", Name = "Tab A", Id = Guid.NewGuid() });
        UserTabs.Add(new TabView { Content = "Second tab content", Name = "Tab B", Id = Guid.NewGuid() });
        UserTabs.Add(new TabView { Content = "Third tab content", Name = "Tab C", Id = Guid.NewGuid() });
        _updateIndex = true;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Restore();
    }

    private void AddTabCallback()
    {
        UserTabs.Add(new TabView { Name = "Dynamic Content", Content = "A new tab", Id = Guid.NewGuid() });
        //the tab becomes available after it is rendered. Hence, we can't set the index here
        _updateIndex = true;
    }

    private void CloseTabCallback(MudTabPanel panel)
    {
        var tabView = UserTabs.FirstOrDefault(x => x.Id == (Guid)panel.Tag);
        if (tabView != null)
        {
            UserTabs.Remove(tabView);
            _updateIndex = true;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_updateIndex == true)
        {
            _index = UserTabs.Count - 1;
            StateHasChanged();
            _updateIndex = false;
        }
    }
}