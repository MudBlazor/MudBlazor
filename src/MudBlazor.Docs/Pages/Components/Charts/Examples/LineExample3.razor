@namespace MudBlazor.Docs.Examples

<div>
    <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350" ChartOptions="options"></MudChart>
    <MudButton @onclick="RandomizeData">Randomize Data</MudButton>
    <MudMenu Label="Interpolation Algorithm" FullWidth="true">
        <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.NaturalSpline)">Natural Spline</MudMenuItem>
        <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.EndSlope)">End Slope</MudMenuItem>
        <MudMenuItem OnClick="() => OnClickMenu(InterpolationOption.Periodic)">Periodic</MudMenuItem>
    </MudMenu>
</div>

@code {
    private ChartOptions options = new ChartOptions();
    public List<ChartSeries> Series = new List<ChartSeries>(2)
    {
        new ChartSeries { Name = "Series 1", Data = new List<decimal>(9) { 90m, 79m, 72m, 69m, 62m, 62m, 55m, 65m, 70m } },
        new ChartSeries { Name = "Series 2", Data = new List<decimal>(9) { 35m, 41m, 35m, 51m, 49m, 62m, 69m, 91m, 148m } },
    };
    public List<string> XAxisLabels = new List<string>(9) { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };

    Random random = new Random();
    protected override void OnInitialized()
    {
        options.InterpolationOption = InterpolationOption.NaturalSpline;
        options.YAxisFormat = "c2";
    }

    public void RandomizeData()
    {
        var new_series = new List<ChartSeries>(2)
        {
            new ChartSeries { Name = "Series 1", Data = new List<decimal>(9) },
            new ChartSeries { Name = "Series 2", Data = new List<decimal>(9) },
        };
        for (int i = 0; i < 9; i++)
        {
            new_series[0].Data[i] = new decimal(random.NextDouble() * 100);
            new_series[1].Data[i] = new decimal(random.NextDouble() * 100);
        }
        Series = new_series;
        StateHasChanged();
    }

    void OnClickMenu(InterpolationOption interpolationOption)
    {
        options.InterpolationOption = interpolationOption;
        StateHasChanged();
    }
}
