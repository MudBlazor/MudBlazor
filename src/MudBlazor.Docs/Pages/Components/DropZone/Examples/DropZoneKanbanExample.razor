@namespace MudBlazor.Docs.Examples

<div class="d-flex flex-column" style="width: 100%;">
	<MudDropContainer T="KanbanTaskItem" Items="_tasks" ItemsSelector="@((item,column) => item.Status == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row justify-space-around" Style="flex: 1 1 100%">
		<ChildContent>
			@foreach (var item in _columns)
			{
				<MudPaper Height="200px" Class="pa-4 d-flex">
					<MudDropZone T="KanbanTaskItem" Identifier="@item">
						<MudText Typo="Typo.h5">@item</MudText>
					</MudDropZone>
				</MudPaper>
			}
		</ChildContent>
		<ItemRenderer>
			<MudPaper>@context.Name</MudPaper>
		</ItemRenderer>
	</MudDropContainer>
	<MudGrid>
		<MudItem xs="12" md="6">
			<MudTextField @bind-Value="_newColumnName" Label="New Column Name" />
			<MudButton OnClick="AddColumn">Add Column</MudButton>
		</MudItem>
		<MudItem xs="12" md="6">
			<MudTextField @bind-Value="_newTaskName" Label="New Task Name" />
			<MudButton OnClick="AddTask">Add Task</MudButton>
		</MudItem>
	</MudGrid>
</div>


@code {

	/* handling board events */
	private void TaskUpdated(MudItemDropInfo<KanbanTaskItem> info)
	{
		info.Item.Status = info.DropzoneIdentifier;
	}

	/* Setup for board  */
	private List<String> _columns = new() { "Todo", "InProgress", "Done" };
	public class KanbanTaskItem
	{
		public String Name { get; init; }
		public String Status { get; set; }

		public KanbanTaskItem(String name, String status)
		{
			Name = name;
			Status = status;
		}
	}

	private List<KanbanTaskItem> _tasks = new()
		{
			new KanbanTaskItem("Write unit test", "Todo"),
			new KanbanTaskItem("Some docu stuff", "Todo"),
			new KanbanTaskItem("Walking the dog", "Todo"),
		};



	private string _newColumnName;
	private string _newTaskName;

	private void AddColumn()
	{
		_columns.Add(_newColumnName);
		_newColumnName = String.Empty;
	}

	private void AddTask()
	{
		_tasks.Add(new KanbanTaskItem(_newTaskName, _columns[0]));
		_newTaskName = String.Empty;
	}

}
