@namespace MudBlazor.Docs.Examples
@using FluentValidation

<div style="max-width: 400px;">
    <MudCard>
        <MudCardContent>
            <MudForm Model="@model">
                <MudTextField @bind-Value="model.Name"
                              Validation="@(ccValidator.ValidateValue)"
                              For="@(() => model.Name)"
                              Immediate="true"
                              Label="Name" />

                <MudTextField @bind-Value="model.CCNumber"
                              Validation="@(ccValidator.ValidateValue)"
                              For="@(() => model.CCNumber)"
                              Immediate="true"
                              Label="Credit card nr" />

                <MudTextField @bind-Value="model.MyModel2.Address"
                              Validation="@(ccValidator.ValidateValue)"
                              For="@(() => model.MyModel2.Address)"
                              Immediate="true"
                              Label="Address" />
            </MudForm>
        </MudCardContent>
    </MudCard>
</div>

@code {
    MyModelFluentValidator ccValidator = new MyModelFluentValidator();

    MyModel model = new MyModel();

    public class MyModel
    {
        public string Name { get; set; }

        public string CCNumber { get; set; } = "4012 8888 8888 1881";

        public MyModel2 MyModel2 { get; set; } = new MyModel2();
    }

    public class MyModel2
    {
        public string Address { get; set; }
    }

    /// <summary>
    /// A standard AbstractValidator which contains multiple rules and can be shared with the back end API
    /// </summary>
    /// <typeparam name="MyModel"></typeparam>
    public class MyModelFluentValidator : AbstractValidator<MyModel>
    {
        public MyModelFluentValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty()
                .Length(1,100);

            RuleFor(x => x.CCNumber)
                .NotEmpty()
                .Length(1,100)
                .CreditCard();

            RuleFor(x => x.MyModel2.Address)
                .NotEmpty()
                .Length(1,100);
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<MyModel>.CreateWithOptions(model as MyModel, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return new string[0];
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}
