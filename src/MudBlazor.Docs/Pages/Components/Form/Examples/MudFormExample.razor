@inject ISnackbar Snackbar

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@namespace MudBlazor.Docs.Examples


<MudStack>
    <MudPaper Class="pa-4">
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" SubmitOnEnter="submitOnEnter" OnEnterKey="EnterPressed">
            <MudStack>
                <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" />
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" />
                <MudTextField T="string"
                              Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))" />
                <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                    <MudRadio Option="@("Personal")">Personal</MudRadio>
                    <MudRadio Option="@("Professional")">Professional</MudRadio>
                </MudRadioGroup>
                <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" Style="width: fit-content" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
            </MudStack>
        </MudForm>
    </MudPaper>

    <MudPaper Class="pa-4 mt-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form.Validate())">Validate</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
        <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
        <MudSwitch Class="ml-2" @bind-Checked="submitOnEnter" Color="Color.Primary" Label="Submit On Enter" />
    </MudPaper>

    <MudPaper Class="pa-4 mud-height-full">
        <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
        @foreach (var error in errors)
        {
            <MudText Color="@Color.Error">@error</MudText>
        }
    </MudPaper>
</MudStack>


@code {
    bool success;
    bool submitOnEnter;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private async void EnterPressed()
    {
        await form.Validate();
        Snackbar.Add("Enter key pressed and form validated.", Severity.Info);
    }
}
