@page "/components/snackbar"


@inject MudBlazor.ISnackbar Snackbar

<DocsPage>
    <DocsPageHeader Title="Snackbar" />
    <DocsPageContent>
        <DocsPageSection>
            <MudText Typo="Typo.h6" GutterBottom="true">Note</MudText>
            <MudText>The Snackbar is dependant on <CodeInline Class="docs-code-tertiary">ISnackbar</CodeInline> service and <CodeInline>MudSnackbarProvider</CodeInline>.</MudText>
            <MudText>Check the <MudLink Href="/getting-started/installation">Installation</MudLink> page for instructions regarding default setup.</MudText>
        </DocsPageSection>

        <DocsPageSection>
            <SectionHeader>
                <Title>Usage</Title>
                <Description>This is the simplest way of using the <CodeInline>Snackbar</CodeInline>. It provides the user with a temporary closable <CodeInline>Snackbar</CodeInline></Description>
            </SectionHeader>
            <SectionContent Outlined="true">
                <SnackbarUsageExample />
            </SectionContent>
            <SectionSource Code="SnackbarUsageExample" GitHubFolderName="Snackbar" ShowCode="false" />
        </DocsPageSection>

        <DocsPageSection>
            <SectionHeader>
                <Title>Html in messages</Title>
                <Description>
                    Snackbar messages are rendered as HTML using <CodeInline>MarkupString</CodeInline>.<br />
                    Howerver, make sure not to use user-provided input, as that's not very secure.
                </Description>
            </SectionHeader>
            <SectionContent Outlined="true">
                <SnackbarHtmlInMessageExample />
            </SectionContent>
            <SectionSource Code="SnackbarHtmlInMessageExample" GitHubFolderName="Snackbar" ShowCode="false" />
        </DocsPageSection>

        <DocsPageSection>
            <SectionHeader>
                <Title>Alerts and Severity</Title>
                <Description>
                    By default no <CodeInline>Severity</CodeInline> property has to be passed and the snackbar uses the normal level.<br />
                    To change the snackbar into an alert snackbar, simply pass down the <CodeInline>Severity</CodeInline> enum after the message.
                </Description>
            </SectionHeader>
            <SectionContent Outlined="true">
                <SnackbarSeverityExample />
            </SectionContent>
            <SectionSource Code="SnackbarSeverityExample" GitHubFolderName="Snackbar" ShowCode="false" />
        </DocsPageSection>

        <DocsPageSection>
            <SectionHeader>
                <Title>Configuration</Title>
                <Description>The Snackbars default behavior can be changed in two ways, either globaly when the service is registered or pass down the <CodeInline>SnackbarConfiguration</CodeInline> class with the changes you want to make.</Description>
            </SectionHeader>
            <SectionHeader>
                <SubTitle>1. Global Service Settings</SubTitle>
                <Description>In either <CodeInline>Program.Main</CodeInline> or <CodeInline>Startup.cs</CodeInline> depending on what kind of project you have. See <MudLink Href="/getting-started/installation">installation page</MudLink> for more information regarding this.</Description>
            </SectionHeader>
            <MarkdownSnackbarConfigurationService />
            <SectionHeader>
                <SubTitle>2. Per Snackbar</SubTitle>
                <Description>
                    This can be done in many ways, below is one of them and we will continue to use it use it further down on this page.<br />
                    Below we pass along a modified configuration that differs from our globally set <CodeInline>ShowCloseIcon</CodeInline> in this case it's also the Snackbar's default value.
                </Description>
            </SectionHeader>
            <SectionContent Outlined="true">
                <SnackbarConfigurationExample />
            </SectionContent>
            <SectionSource Code="SnackbarConfigurationExample" GitHubFolderName="Snackbar" />
        </DocsPageSection>

        <MudDivider Class="my-16" Style="opacity:0;" />

        <DocsPageSection>
            <SectionHeader>
                <Title>Snackbar Position</Title>
            </SectionHeader>
            <SectionContent Outlined="true">
                <SnackbarPositionExample />
            </SectionContent>
            <SectionSource Code="SnackbarPositionExample" GitHubFolderName="Snackbar" ShowCode="false" />
        </DocsPageSection>

        <DocsPageSection>
            <SectionHeader>
                <Title>Snackbar Variants</Title>
            </SectionHeader>
            <SectionContent Outlined="true">
                <SnackbarVariantsExample />
            </SectionContent>
            <SectionSource Code="SnackbarVariantsExample" GitHubFolderName="Snackbar" ShowCode="false" />
        </DocsPageSection>

        <DocsPageSection>
            <SectionHeader>
                <Title>Close after navigation</Title>
            </SectionHeader>
            <SectionContent Outlined="true">
                <SnackbarNavigationExample />
            </SectionContent>
            <SectionSource Code="SnackbarNavigationExample" GitHubFolderName="Snackbar" ShowCode="false" />
        </DocsPageSection>

        <DocsPageSection>
            <SectionHeader>
                <Title>Custom Action Handling</Title>
            </SectionHeader>
            <SectionHeader>
                <Description>
                    A snackbar becomes clickable when a handler is defined in the <CodeInline>OnClick</CodeInline> property of the <CodeInline>SnackbarOptions</CodeInline> object.
                </Description>
            </SectionHeader>
            <SectionContent Outlined="true">
                <SnackbarOnClickExample />
            </SectionContent>
            <SectionSource Code="SnackbarOnClickExample" GitHubFolderName="Snackbar" ShowCode="true" />
            <SectionHeader>
                <Description>
                    Alternatively, the <CodeInline>OnClick</CodeInline> handler can be attached to an action button by setting a label in the <CodeInline>Action</CodeInline> property.
                </Description>
            </SectionHeader>
            <SectionContent Outlined="true">
                <SnackbarActionButtonExample />
            </SectionContent>
            <SectionSource Code="SnackbarActionButtonExample" GitHubFolderName="Snackbar" ShowCode="false" />
        </DocsPageSection>

        <DocsPageSection>
            <SectionHeader>
                <Title>Require Interaction</Title>
                <Description>With the <CodeInline>RequireInteraction</CodeInline> property set to true the snackbar will not dissapear until the user interacts with it.</Description>
            </SectionHeader>
            <SectionContent FullWidth="true" Class="pa-0" Outlined="true">
                <SnackbarRequireInteractionExample />
            </SectionContent>
            <SectionSource Code="SnackbarRequireInteractionExample" GitHubFolderName="Snackbar" ShowCode="false" />
        </DocsPageSection>

    </DocsPageContent>
</DocsPage>
