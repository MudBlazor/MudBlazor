@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using MudBlazor.Components.DataGrid;
@using MudBlazor.Examples.Data.Models
@namespace MudBlazor.Docs.Examples

    <MudDataGrid T="Model" ItemsProvider="@itemsProvider" Virtualize="true" FixedHeader="true" Height="350px">
        <Columns>
            <PropertyColumn Property="x => x.Column1" />
            <PropertyColumn Property="x => x.Column2" />
            <PropertyColumn Property="x => x.Column3" />
            <PropertyColumn Property="x => x.Column4" />
            <PropertyColumn Property="x => x.Column5" />
        </Columns>
    </MudDataGrid>


@code {
    GridItemsProvider<Model> itemsProvider;
    public record Model(string Column1, string Column2, string Column3, string Column4, string Column5);

    private List<Model> _items = new List<Model>();

    protected override void OnInitialized()
    {
        for (var i = 0; i < 20000; i++)
            _items.Add(new Model($"Value_{i}", $"Value_{i}", $"Value_{i}", $"Value_{i}", $"Value_{i}"));

        itemsProvider = async request =>
       {
           var result = _items;
           
           foreach (var s in request.SortDefinitions.OrderBy(o=>o.Index))
           {
               if (s.Descending)
               {
                  result = result.OrderByDescending(s.SortFunc).ToList();
               }
               else
               {
                  result = result.OrderBy(s.SortFunc).ToList();
               }
           }

           result = result.Skip(request.StartIndex).ToList();

           if (request.Count.HasValue)
           {
               result = result.Take(request.Count.Value).ToList();
           };
           
           return new ItemsProviderResult<Model>(result, _items.Count);
       };
    }
}
