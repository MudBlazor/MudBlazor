@using System.Text.Json
@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@namespace MudBlazor.Docs.Examples
@inject HttpClient httpClient

<MudDataGrid T="IDictionary<string, object>" MultiSelection="true" Items="@Elements" Sortable="true" Filterable="true" QuickFilter="@_quickFilter"
    Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Periodic Elements</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="IDictionary<string, object>" />
        <Column T="IDictionary<string, object>" FieldType="@typeof(int)" Field="Number" Title="Nr" Sortable="false" Filterable="false" />
        <Column T="IDictionary<string, object>" FieldType="@typeof(string)" Field="small" Title="Sign" />
        <Column T="IDictionary<string, object>" FieldType="@typeof(string)" Field="Name" SortBy="@_sortBy" />
        <Column T="IDictionary<string, object>" FieldType="@typeof(int)" Field="Position" />
        <Column T="IDictionary<string, object>" FieldType="@typeof(decimal)" Field="Molar" Title="Molar mass" />
        <Column T="IDictionary<string, object>" FieldType="@typeof(string)" Field="Group" Title="Category" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="IDictionary<string, object>" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if(_events.Count > 0) 
        {
            <div class="d-flex">
                <MudSpacer/>
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private IEnumerable<IDictionary<string, object>> Elements = new List<IDictionary<string, object>>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<IDictionary<string, object>, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x["Name"].ToString().Length;
        else
            return x["Name"].ToString();
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<IDictionary<string, object>, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x["small"].ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x["Name"].ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x["Number"]} {x["Position"]} {x["Molar"]}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        var elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
        var serialized = JsonSerializer.Serialize(elements);
        Elements = JsonSerializer.Deserialize<List<IDictionary<string, object>>>(serialized);
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<IDictionary<string, object>> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<IDictionary<string, object>> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}
