@using System.Net.Http.Json
@using MudBlazor.Examples.Data.Models
@namespace MudBlazor.Docs.Examples
@inject HttpClient httpClient

<MudDataGrid T="Element" Items="@Elements.Take(4)" EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual"
             Bordered="true" Dense="true" ReadOnly="false"
             OpenExternalEditForm="@OpenExternalEditForm">
    <Columns>
        <Column T="Element" Field="Number" Title="Nr" IsEditable="false" />
        <Column T="Element" Field="Sign" />
        <Column T="Element" Field="Name" />
        <Column T="Element" Field="Position" Hidden="true" />
        <Column T="Element" Field="Molar" Title="Molar mass" />
        <Column T="Element" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if(_events.Count > 0) 
        {
            <div class="d-flex">
                <MudSpacer/>
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    [Inject]
    public IDialogService DialogService { get; set; }

    private IEnumerable<Element> Elements = new List<Element>();
    private List<string> _events = new();

    protected override async Task OnInitializedAsync()
    {
        Elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
    }

    // events
    private async Task<bool> OpenExternalEditForm(Element item)
    {
        _events.Insert(0, $"Event = OpenExternalEditForm, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");

        var options = new DialogOptions() { MaxWidth = MaxWidth.Small };
        var parameters = new DialogParameters { ["SelectedElement"] = item };
        var dialog = DialogService?.Show<DataGridExternalEditingExample_Dialog>("Personalized Edit Dialog", parameters, options);
        var res = await dialog!.Result;

        return !res.Canceled;
    }
}
