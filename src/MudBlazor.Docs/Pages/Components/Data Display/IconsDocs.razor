@page "/components/data-display/Icons"
@using System.Reflection

<DocsPage>
    <DocsPageHeader>
        <Title>Icons</Title>
        <SubTitle>Guidance and suggestions for using icons with MudBlazor.</SubTitle>
    </DocsPageHeader>
    <DocsPageContent>
        <Typography Typo="Typo.h4">Custom Icons</Typography>
        @if (MudIconsMaterial != null)
        {
            <DocsIcons List="MudIconsCustom" />
        }
        else
        {
            <Typography Typo="Typo.h5" Align="Align.Center">Loading...</Typography>
        }
        <Typography Typo="Typo.h4">Material Icons</Typography>
        @if (MudIconsMaterial != null)
        {
            <DocsIcons List="MudIconsMaterial" />
        }
        else
        {
            <Typography Typo="Typo.h5" Align="Align.Center">Loading...</Typography>
        }
    </DocsPageContent>
</DocsPage>

@code {

    List<MudIcons> MudIconsMaterial;
    List<MudIcons> MudIconsCustom;


    protected override async Task OnInitializedAsync()
    {
        await LoadMaterialIcons();
        await LoadCustomIcons();
    }

    public async Task LoadMaterialIcons()
    {
        var result = new List<MudIcons>();

        foreach (var prop in typeof(Icons.Material).GetProperties(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy))
        {
            result.Add(new MudIcons(prop.Name, prop.GetValue(null).ToString()));
        }
        await Task.WhenAll();
        MudIconsMaterial = result;
    }

    public async Task LoadCustomIcons()
    {
        var result = new List<MudIcons>();

        foreach (var prop in typeof(Icons.Custom).GetProperties(BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy))
        {
            result.Add(new MudIcons(prop.Name, prop.GetValue(null).ToString()));
        }
        await Task.WhenAll();
        MudIconsCustom = result;
    }
}
