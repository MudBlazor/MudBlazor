@* Auto-generated markup. Any changes will be overwritten *@
@namespace MudBlazor.Docs.Examples.Markup
<div class="mud-codeblock">
<div class="html"><pre>
<span class="htmlTagDelimiter">&lt;</span><span class="htmlElementName">MudCheckBox</span> <span class="htmlAttributeName"><span class="atSign">&#64;</span>bind-Checked</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue">boolean</span><span class="quot">&quot;</span><span class="htmlTagDelimiter">&gt;</span>bool: <span class="atSign">&#64;</span>boolean<span class="htmlTagDelimiter">&lt;/</span><span class="htmlElementName">MudCheckBox</span><span class="htmlTagDelimiter">&gt;</span>
<span class="htmlTagDelimiter">&lt;</span><span class="htmlElementName">MudCheckBox</span> <span class="htmlAttributeName"><span class="atSign">&#64;</span>bind-Checked</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue">nullable</span><span class="quot">&quot;</span> <span class="htmlAttributeName">Color</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="enum">Color</span><span class="enumValue">.Primary</span><span class="quot">&quot;</span><span class="htmlTagDelimiter">&gt;</span>bool?: <span class="atSign">&#64;</span>nullable<span class="htmlTagDelimiter">&lt;/</span><span class="htmlElementName">MudCheckBox</span><span class="htmlTagDelimiter">&gt;</span>
<span class="htmlTagDelimiter">&lt;</span><span class="htmlElementName">MudCheckBox</span> <span class="htmlAttributeName"><span class="atSign">&#64;</span>bind-Checked</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue">integer</span><span class="quot">&quot;</span> <span class="htmlAttributeName">Color</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="enum">Color</span><span class="enumValue">.Secondary</span><span class="quot">&quot;</span><span class="htmlTagDelimiter">&gt;</span>int: <span class="atSign">&#64;</span>integer<span class="htmlTagDelimiter">&lt;/</span><span class="htmlElementName">MudCheckBox</span><span class="htmlTagDelimiter">&gt;</span>
<span class="htmlTagDelimiter">&lt;</span><span class="htmlElementName">MudCheckBox</span> <span class="htmlAttributeName"><span class="atSign">&#64;</span>bind-Checked</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue">str</span><span class="quot">&quot;</span> <span class="htmlAttributeName">Color</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="enum">Color</span><span class="enumValue">.Tertiary</span><span class="quot">&quot;</span><span class="htmlTagDelimiter">&gt;</span>string: &quot;<span class="atSign">&#64;</span>(str)&quot;<span class="htmlTagDelimiter">&lt;/</span><span class="htmlElementName">MudCheckBox</span><span class="htmlTagDelimiter">&gt;</span>
<span class="htmlTagDelimiter">&lt;</span><span class="htmlElementName">MudCheckBox</span> <span class="htmlAttributeName"><span class="atSign">&#64;</span>bind-Checked</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue">customstr</span><span class="quot">&quot;</span> <span class="htmlAttributeName">Color</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="enum">Color</span><span class="enumValue">.Tertiary</span><span class="quot">&quot;</span> <span class="htmlAttributeName">Converter</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue"><span class="atSign">&#64;</span>(new CustomStringToBoolConverter())</span><span class="quot">&quot;</span><span class="htmlTagDelimiter">&gt;</span> custom string: &quot;<span class="atSign">&#64;</span>(customstr)&quot;<span class="htmlTagDelimiter">&lt;/</span><span class="htmlElementName">MudCheckBox</span><span class="htmlTagDelimiter">&gt;</span>
<span class="htmlTagDelimiter">&lt;</span><span class="htmlElementName">MudCheckBox</span> <span class="htmlAttributeName"><span class="atSign">&#64;</span>bind-Checked</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue">customobj</span><span class="quot">&quot;</span> <span class="htmlAttributeName">Color</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="enum">Color</span><span class="enumValue">.Tertiary</span><span class="quot">&quot;</span> <span class="htmlAttributeName">Converter</span><span class="htmlOperator">=</span><span class="quot">&quot;</span><span class="htmlAttributeValue"><span class="atSign">&#64;</span>(new ObjectToBoolConverter())</span><span class="quot">&quot;</span><span class="htmlTagDelimiter">&gt;</span>object: &quot;<span class="atSign">&#64;</span>(customobj.ToString())&quot;<span class="htmlTagDelimiter">&lt;/</span><span class="htmlElementName">MudCheckBox</span><span class="htmlTagDelimiter">&gt;</span>
</pre></div>
<div class="csharp"><pre>
<span class="atSign">&#64;</span>code{ <span class="keyword">public</span> <span class="keyword">bool</span> boolean { <span class="keyword">get</span>; <span class="keyword">set</span>; } = <span class="keyword">true</span>;
    <span class="keyword">public</span> <span class="keyword">bool</span>? nullable { <span class="keyword">get</span>; <span class="keyword">set</span>; } = <span class="keyword">true</span>;
    <span class="keyword">public</span> <span class="keyword">int</span> integer { <span class="keyword">get</span>; <span class="keyword">set</span>; } = <span class="number">1</span>;
    <span class="keyword">public</span> <span class="keyword">string</span> str { <span class="keyword">get</span>; <span class="keyword">set</span>; } = <span class="string">&quot;on&quot;</span>;
    <span class="keyword">public</span> <span class="keyword">string</span> customstr { <span class="keyword">get</span>; <span class="keyword">set</span>; } = <span class="string">&quot;no, at all&quot;</span>;
    <span class="keyword">public</span> <span class="keyword">object</span> customobj { <span class="keyword">get</span>; <span class="keyword">set</span>; } = <span class="keyword">false</span>;

    <span class="keyword">public</span> <span class="keyword">class</span> ObjectToBoolConverter : BoolConverter&lt;<span class="keyword">object</span>&gt;
    {

        <span class="keyword">public</span> ObjectToBoolConverter()
        {
            SetFunc = OnSet;
            GetFunc = OnGet;
        }

        <span class="keyword">private</span> <span class="keyword">object</span> OnGet(<span class="keyword">bool</span>? value)
        {
            <span class="keyword">try</span>
            {
                <span class="keyword">return</span> (<span class="keyword">object</span>)(value == <span class="keyword">true</span>);
            }
            <span class="keyword">catch</span> (Exception e)
            {
                UpdateGetError(<span class="string">&quot;Conversion error: &quot;</span> + e.Message);
                <span class="keyword">return</span> <span class="keyword">default</span>(T);
            }
        }

        <span class="keyword">private</span> <span class="keyword">bool</span>? OnSet(<span class="keyword">object</span> arg)
        {
            <span class="keyword">if</span> (arg == <span class="keyword">null</span>)
                <span class="keyword">return</span> <span class="keyword">null</span>;
            <span class="keyword">try</span>
            {
                <span class="keyword">if</span> (arg <span class="keyword">is</span> <span class="keyword">bool</span>)
                    <span class="keyword">return</span> (<span class="keyword">bool</span>)(<span class="keyword">object</span>)arg;
                <span class="keyword">else</span> <span class="keyword">if</span> (arg <span class="keyword">is</span> <span class="keyword">bool</span>?)
                    <span class="keyword">return</span> (<span class="keyword">bool</span>?)(<span class="keyword">object</span>)arg;
                <span class="keyword">else</span>
                {
                    UpdateSetError(<span class="string">&quot;Unable to convert to bool? from type object&quot;</span>);
                    <span class="keyword">return</span> <span class="keyword">null</span>;
                }
            }
            <span class="keyword">catch</span> (FormatException e)
            {
                UpdateSetError(<span class="string">&quot;Conversion error: &quot;</span> + e.Message);
                <span class="keyword">return</span> <span class="keyword">null</span>;
            }
        }

    }

    <span class="keyword">public</span> <span class="keyword">class</span> CustomStringToBoolConverter : BoolConverter&lt;<span class="keyword">string</span>&gt;
    {

        <span class="keyword">public</span> CustomStringToBoolConverter()
        {
            SetFunc = OnSet;
            GetFunc = OnGet;
        }

        <span class="keyword">private</span> <span class="keyword">string</span> TrueString = <span class="string">&quot;yes, please&quot;</span>;
        <span class="keyword">private</span> <span class="keyword">string</span> FalseString = <span class="string">&quot;no, at all&quot;</span>;
        <span class="keyword">private</span> <span class="keyword">string</span> NullString = <span class="string">&quot;I don&#39;t know&quot;</span>;

        <span class="keyword">private</span> <span class="keyword">string</span> OnGet(<span class="keyword">bool</span>? value)
        {
            <span class="keyword">try</span>
            {
                <span class="keyword">return</span> (value == <span class="keyword">true</span>) ? TrueString : FalseString;
            }
            <span class="keyword">catch</span> (Exception e)
            {
                UpdateGetError(<span class="string">&quot;Conversion error: &quot;</span> + e.Message);
                <span class="keyword">return</span> NullString;
            }
        }

        <span class="keyword">private</span> <span class="keyword">bool</span>? OnSet(<span class="keyword">string</span> arg)
        {
            <span class="keyword">if</span> (arg == <span class="keyword">null</span>)
                <span class="keyword">return</span> <span class="keyword">null</span>;
            <span class="keyword">try</span>
            {
                <span class="keyword">if</span> (arg == TrueString)
                    <span class="keyword">return</span> <span class="keyword">true</span>;
                <span class="keyword">if</span> (arg == FalseString)
                    <span class="keyword">return</span> <span class="keyword">false</span>;
                <span class="keyword">else</span>
                    <span class="keyword">return</span> <span class="keyword">null</span>;
            }
            <span class="keyword">catch</span> (FormatException e)
            {
                UpdateSetError(<span class="string">&quot;Conversion error: &quot;</span> + e.Message);
                <span class="keyword">return</span> <span class="keyword">null</span>;
            }
        }

    } }
</pre></div>
</div>
