@page "/features/icons"
@using System.Reflection
@using Microsoft.AspNetCore.Components.Web.Virtualization

<MudDrawer @bind-Open="@iconDrawerOpen" ClipMode="DrawerClipMode.Always" Anchor="Anchor.End" DisableOverlay="true" Elevation="25" Width="260px" Class="mud-icondrawer" Variant="@DrawerVariant.Temporary">
    <MudToolBar Dense="true" DisableGutters="true" Class="pl-4 py-8">
        <MudIcon Size="Size.Large" Icon="@SelectedIcon.Code" Class="mr-4"/>
        <MudText Typo="Typo.subtitle1">@SelectedIcon.Name</MudText>
        <MudSpacer/>
        <MudIconButton OnClick="@(() => CloseIconDrawer())" Icon="@Icons.Material.Filled.Close" Class="pa-2"></MudIconButton>
    </MudToolBar>
    <div class="px-4">
        <MudText Typo="Typo.subtitle2">Icon Code</MudText>
        <MudPaper Class="mud-iconcode pa-2" Elevation="0">
            @IconCodeOutput
            <div class="d-flex justify-end">
                <MudIconButton OnClick="CopyTextToClipboard" Icon="@Icons.Filled.ContentCopy" Size="Size.Small" Class="pa-1 mb-n1 mr-n1" />
            </div>
        </MudPaper>
        <MudText Typo="Typo.subtitle2">Icon Preview</MudText>
        <MudPaper Class="d-flex justify-center align-center" Elevation="0" Height="228px">
            <MudIcon Size="@PreviewIconSize" Color="@PreviewIconColor" Icon="@SelectedIcon.Code" />
        </MudPaper>

        <MudSelect T="Color" @bind-Value="@PreviewIconColor" Label="Color" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense" Class="my-4">
            <DocsColorSelect Color="Color.Default" />
            <DocsColorSelect Color="Color.Primary" />
            <DocsColorSelect Color="Color.Secondary" />
            <DocsColorSelect Color="Color.Tertiary" />
            <DocsColorSelect Color="Color.Info" />
            <DocsColorSelect Color="Color.Success" />
            <DocsColorSelect Color="Color.Warning" />
            <DocsColorSelect Color="Color.Error" />
            <DocsColorSelect Color="Color.Dark" />
            <DocsColorSelect Color="Color.Surface" />
        </MudSelect>
        <MudSelect T="Size" @bind-Value="@PreviewIconSize" Label="Size" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense" Class="my-4">
            <MudSelectItem Value="Size.Small">Small</MudSelectItem>
            <MudSelectItem Value="Size.Medium">Medium</MudSelectItem>
            <MudSelectItem Value="Size.Large">Large</MudSelectItem>
        </MudSelect>
    </div>
</MudDrawer>

<DocsPage MaxWidth="MaxWidth.Large">
    <DocsPageHeader Title="MudBlazor Icons" DisableApiHeader="true" SubTitle="Over 1800 Material Design icons and a few custom ones." />
    <DocsPageContent>
        <DocsPageSection>
            <SectionHeader Title="Icons">
                <Description>
                    To use these icons in our components, you can specify the type of material icon directly <CodeInline>@@Icons.Filled.Menu</CodeInline> or specify the whole path <CodeInline>@@Icons.Material.Filled.Menu</CodeInline>
                </Description>
            </SectionHeader>
            <MudGrid Class="my-4">
                <MudItem xs="10">
                    <MudTextField Immediate="true" DebounceInterval="1000" @bind-Value="SearchText" Variant="Variant.Outlined" Placeholder="Search icons..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
                </MudItem>
                <MudItem xs="2">
                    <MudSelect T="IconOrigin" Value="SelectedIconOrigin" ValueChanged="OnSelectedValue" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="IconOrigin.Custom">Custom Icons</MudSelectItem>
                        <MudSelectItem Value="IconOrigin.Material">Material Icons</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    @if(SelectedIconOrigin == IconOrigin.Material)
                    {
                        <MudChipSet Filter="true" Mandatory="true">
                            <MudChip Default="true" Text="Filled" OnClick="@(() => ChangeIconCategory(IconType.Filled))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                            <MudChip Text="Outlined" OnClick="@(() => ChangeIconCategory(IconType.Outlined))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                            <MudChip Text="Rounded" OnClick="@(() => ChangeIconCategory(IconType.Rounded))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                            <MudChip Text="Sharp" OnClick="@(() => ChangeIconCategory(IconType.Sharp))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                            <MudChip Text="TwoTone" OnClick="@(() => ChangeIconCategory(IconType.TwoTone))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                        </MudChipSet>
                    }
                    else if(SelectedIconOrigin == IconOrigin.Custom)
                    {
                        <MudChipSet Filter="true" Mandatory="true">
                            <MudChip Default="true" Text="All" OnClick="@(() => ChangeIconCategory(IconType.All))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                            <MudChip Text="Brands" OnClick="@(() => ChangeIconCategory(IconType.Brands))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                            <MudChip Text="FileFormats" OnClick="@(() => ChangeIconCategory(IconType.FileFormats))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                            <MudChip Text="Uncategorized" OnClick="@(() => ChangeIconCategory(IconType.Uncategorized))" Variant="Variant.Outlined" Color="Color.Default" SelectedColor="Color.Primary" />
                        </MudChipSet>
                    }
                </MudItem>
            </MudGrid>
            <div class="docs-icon-container">
                @if (DisplayedIcons != null)
                {
                    <Virtualize Items="@SelectedIcons" ItemSize="128" OverscanCount="128">
                        <div class="docs-icon-panel" @onclick="@(() => SetIconDrawer(context))">
                            <MudIcon Icon="@context.Code" Title="@context.Name" />
                            <MudText Typo="Typo.caption">
                                @context.Name
                            </MudText>
                        </div>
                    </Virtualize>
                }
                else
                {
                    <MudText Typo="Typo.h5" Align="Align.Center">Loading...</MudText>
                }
            </div>
        </DocsPageSection>
    </DocsPageContent>
</DocsPage>

@code {

    [Inject] protected IJsApiService JsApiService { get; set; }

    bool iconDrawerOpen;
    List<MudIcons> DisplayedIcons;
    private IconOrigin SelectedIconOrigin { get; set; } = IconOrigin.Material;
    private string SearchText { get; set; } = string.Empty;

    private List<MudIcons> CustomAll { get; set; } = new List<MudIcons>();
    private List<MudIcons> CustomBrands { get; set; } = new List<MudIcons>();
    private List<MudIcons> CustomFileFormats { get; set; } = new List<MudIcons>();
    private List<MudIcons> CustomUncategorized { get; set; } = new List<MudIcons>();

    private List<MudIcons> MaterialFilled { get; set; }
    private List<MudIcons> MaterialOutlined { get; set; }
    private List<MudIcons> MaterialRounded { get; set; }
    private List<MudIcons> MaterialSharp { get; set; }
    private List<MudIcons> MaterialTwoTone { get; set; }

    private MudIcons SelectedIcon { get; set; } = new MudIcons("","","");
    private string IconCodeOutput { get; set; }
    private Size PreviewIconSize { get; set; } = Size.Medium;
    private Color PreviewIconColor { get; set; } = Color.Default;

    private List<MudIcons> SelectedIcons => string.IsNullOrWhiteSpace(SearchText)
        ? DisplayedIcons
        : DisplayedIcons.Where(m => m.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase)).ToList();

    private readonly IDictionary<string, object> IconTypes = new Dictionary<string, object>()
    {
        { IconType.Filled,new Filled()},
        { IconType.Outlined, new Outlined()},
        { IconType.Rounded, new Rounded()},
        { IconType.Sharp, new Sharp()},
        { IconType.TwoTone, new TwoTone()},
        { IconType.Brands, new Brands()},
        { IconType.FileFormats, new FileFormats()},
        { IconType.Uncategorized, new Uncategorized()}
    };

    protected override async Task OnInitializedAsync()
    {
        MaterialFilled = await LoadMaterialIcons(IconType.Filled);
        DisplayedIcons = MaterialFilled;

        MaterialOutlined = await LoadMaterialIcons(IconType.Outlined);
        MaterialRounded = await LoadMaterialIcons(IconType.Rounded);
        MaterialSharp = await LoadMaterialIcons(IconType.Sharp);
        MaterialTwoTone = await LoadMaterialIcons(IconType.TwoTone);

        await LoadCustomIcons();
    }

    public async Task<List<MudIcons>> LoadMaterialIcons(string type)
    {
        var result = new List<MudIcons>();
        var icons = IconTypes[type];

        foreach (var prop in icons.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.GetProperty ))
        {
            result.Add(new MudIcons(prop.Name, prop.GetValue(icons).ToString(), type));
        }

        await Task.WhenAll();

        return result;
    }

    public async Task LoadCustomIcons()
    {
        var brands = new Brands();
        foreach (var prop in typeof(Brands).GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.GetProperty))
            CustomBrands.Add(new MudIcons(prop.Name, prop.GetValue(brands).ToString(), IconType.Brands));
        CustomAll.AddRange(CustomBrands);
        var fileFormats = new FileFormats();
        foreach (var prop in typeof(FileFormats).GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.GetProperty))
            CustomFileFormats.Add(new MudIcons(prop.Name, prop.GetValue(fileFormats).ToString(), IconType.FileFormats));
        CustomAll.AddRange(CustomFileFormats);
        var uncategorized = new Uncategorized();
        foreach (var prop in typeof(Uncategorized).GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.GetProperty))
            CustomUncategorized.Add(new MudIcons(prop.Name, prop.GetValue(uncategorized).ToString(), IconType.Uncategorized));
        CustomAll.AddRange(CustomUncategorized);
        await Task.WhenAll();
    }

    public void ChangeIconCategory(string type)
    {
        switch(type)
        {
            case IconType.Filled:
                DisplayedIcons = MaterialFilled;
                break;
            case IconType.Outlined:
                DisplayedIcons = MaterialOutlined;
                break;
            case IconType.Rounded:
                DisplayedIcons = MaterialRounded;
                break;
            case IconType.Sharp:
                DisplayedIcons = MaterialSharp;
                break;
            case IconType.TwoTone:
                DisplayedIcons = MaterialTwoTone;
                break;
            case IconType.All:
                DisplayedIcons = CustomAll;
                break;
            case IconType.Brands:
                DisplayedIcons = CustomBrands;
                break;
            case IconType.FileFormats:
                DisplayedIcons = CustomFileFormats;
                break;
            case IconType.Uncategorized:
                DisplayedIcons = CustomUncategorized;
                break;
        };
    }

    private void OnSelectedValue(IconOrigin origin)
    {
        switch(origin)
        {
            case IconOrigin.Material:
                ChangeIconCategory(IconType.Filled);
                break;
            case IconOrigin.Custom:
                ChangeIconCategory(IconType.All);
                break;
        }
        SelectedIconOrigin = origin;
    }

    void SetIconDrawer(MudIcons icon)
    {
        iconDrawerOpen = true;
        SelectedIcon = new MudIcons(icon.Name, icon.Code, icon.Category);
        IconCodeOutput = $"@Icons{(SelectedIconOrigin == IconOrigin.Material? "" : ".Custom")}.{icon.Category}.{icon.Name}";
    }
    void CloseIconDrawer()
    {
        iconDrawerOpen = false;
    }

    private async Task CopyTextToClipboard()
    {
        await JsApiService.CopyToClipboardAsync(IconCodeOutput);
    }

    private struct IconType
    {
        public const string Filled = "Filled", Outlined = "Outlined", Rounded = "Rounded", Sharp = "Sharp", TwoTone = "TwoTone", All = "All", Brands = "Brands", FileFormats = "FileFormats", Uncategorized = "Uncategorized";
    }
    private enum IconOrigin
    {
        Custom,
        Material
    }
}