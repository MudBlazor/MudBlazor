@using MudBlazor.Utilities
@using System;
@using System.IO;
@using System.Linq;
@using System.Text.RegularExpressions;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components;
@using MudBlazor.Docs.Extensions;
@using MudBlazor.Docs.Models;


@if (_hasCode && ChildContent != null || Codes != null)
{
    <div class="@Classname" style="@Style">
        @if (!String.IsNullOrWhiteSpace(Code) || Codes != null)
        {
            <MudToolBar Class="docs-section-content-toolbar">
                @if(Codes != null)
                {
                    @foreach (var codefile in Codes)
                    {
                        <MudButton OnClick="@(() => SetActiveCode(codefile.code))">@codefile.title</MudButton>
                    }
                }
                <MudSpacer/>
                <MudTooltip Text="Online Playground" Arrow="true" Color="Color.Dark" Placement="Placement.Top" Delay="300" Duration="500">
                    <MudButton OnClick="RunOnTryMudBlazor" StartIcon="@Icons.Rounded.PlayArrow" IconColor="Color.Success" Color="Color.Default" Size="Size.Small">Run</MudButton>
                </MudTooltip>
                <MudButton OnClick="OnShowCode" StartIcon="@(ShowCode ? @Icons.Rounded.CodeOff : Icons.Rounded.Code)" Color="Color.Default" Size="Size.Small">
                    @(ShowCode ? "Hide code" : "Show code")
                </MudButton>
            </MudToolBar>
        }
        @if (ChildContent != null)
        {
            <div class="@InnerClassname">
                @ChildContent
            </div>
        }
    </div>
}
@if (_hasCode)
{
    <div class="@SourceClassname">
        <div class="@SourceContainerClassname">
            @CodeComponent(_activeCode)
        </div>
    </div>
}
@code {

    [Inject]
    protected IJsApiService JsApiService { get; set; }

    protected string Classname =>
    new CssBuilder("docs-section-content")
        .AddClass("show-code", _hasCode && ShowCode)
        .AddClass($"docs-section-content-outlined", Outlined)
        .AddClass($"docs-section-content-darken", DarkenBackground)
        .AddClass(Class)
    .Build();

    protected string InnerClassname =>
        new CssBuilder("docs-section-content-inner")
            .AddClass($"d-flex flex-grow-1 flex-wrap justify-center")
            .AddClass("pa-8", !_hasCode)
            .AddClass("px-8 pb-8 pt-2", _hasCode)
            .AddClass($"mud-width-full", FullWidth)
            .Build();

    protected string SourceClassname =>
        new CssBuilder("docs-section-source")
            .AddClass("show-code", _hasCode && ShowCode)
            .Build();

    protected string SourceContainerClassname =>
        new CssBuilder("docs-section-source-container")
            .AddClass("show-code", _hasCode && ShowCode)
            .Build();

    [Parameter] public string Class { get; set; }
    [Parameter] public string Style { get; set; }

    [Parameter] public bool FullWidth { get; set; }

    [Parameter] public bool DarkenBackground { get; set; }

    [Parameter] public bool Outlined { get; set; }

    [Parameter] public string Code { get; set; }

    [Parameter] public IEnumerable<CodeFile> Codes { get; set; }

    [Parameter] public bool ShowCode { get; set; } = true;

    [Parameter] public RenderFragment ChildContent { get; set; }

    private bool _hasCode;
    private string _activeCode;

    public void OnShowCode()
    {
        ShowCode = !ShowCode;
    }

    public void SetActiveCode(string value)
    {
        _activeCode = value;
    }

    protected override void OnParametersSet()
    {
        if(Codes != null)
        {
            _hasCode = true;
            _activeCode = Codes.FirstOrDefault().code;
        }
        else if(!String.IsNullOrWhiteSpace(Code))
        {
            _hasCode = true;
            _activeCode = Code;
        }
    }
    
    private async Task CopyTextToClipboard()
    {
        await JsApiService.CopyToClipboardAsync(Snippets.GetCode(Code));
    }
    
    RenderFragment CodeComponent(string code) => builder =>
    {
        try
        {
            var key = typeof(SectionSource).Assembly.GetManifestResourceNames().FirstOrDefault(x => x.Contains($".{code}Code.html"));
            using (var stream = typeof(SectionSource).Assembly.GetManifestResourceStream(key))
            using (var reader = new StreamReader(stream))
            {
                builder.AddMarkupContent(0, reader.ReadToEnd());
            }
        }
        catch (Exception)
        {
            // todo: log this
        }
    };
    
    protected virtual async void RunOnTryMudBlazor()
    {
        // We use a separator that wont be in code so we can send 2 files later
            var codeFiles = "__Main.razor" + (char)31 + Snippets.GetCode(Code);

        // Add dialogs for dialog examples
            if (Code.StartsWith("Dialog"))
            {
                var regex = new Regex(@"\Show<(Dialog.*?_Dialog)\>");
                var dialogCodeName = regex.Match(codeFiles).Groups[1].Value;
                if (dialogCodeName != string.Empty)
                {
                    var dialogCodeFile = dialogCodeName + ".razor" + (char)31 + Snippets.GetCode(dialogCodeName);
                    codeFiles = codeFiles + (char)31 + dialogCodeFile;
                }
            }

        // Data models
            if (codeFiles.Contains("MudBlazor.Examples.Data.Models"))
            {
                if (Regex.Match(codeFiles, @"\bElement\b").Success)
                {
                    var elementCodeFile = "Element.cs" + (char)31 + Snippets.GetCode("Element");
                    codeFiles = codeFiles + (char)31 + elementCodeFile;
                }

                if (Regex.Match(codeFiles, @"\bServer\b").Success)
                {
                    var serverCodeFile = "Server.cs" + (char)31 + Snippets.GetCode("Server");
                    codeFiles = codeFiles + (char)31 + serverCodeFile;
                }
            }

            var codeFileEncoded = codeFiles.ToCompressedEncodedUrl();
        // var tryMudBlazorLocation = "https://localhost:5001/";
            var tryMudBlazorLocation = "https://try.mudblazor.com/";
            var url = $"{tryMudBlazorLocation}snippet/{codeFileEncoded}";
            await JsApiService.OpenInNewTabAsync(url);
    }

}