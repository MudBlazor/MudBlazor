@using System
@using System.Linq
@using Microsoft.AspNetCore.Components
@using MudBlazor
@using MudBlazor.Docs.Models
@using MudBlazor.Docs.Extensions
@using System.Collections.Generic
@using System.Text.RegularExpressions

@*html head (for server prerendering)*@
<PageTitle>@(GetTitle())</PageTitle>
<HeadContent>
    <meta Name="keywords" Content="@GetKeywords()" />
    <meta Property="og:title" Content="@GetTitle()" />
    <meta Name="twitter:title" Content="@GetTitle()" />
    @if (!string.IsNullOrEmpty(SubTitle))
    {
        <meta Name="description" Content="@(SubTitle)" />
        <meta Property="og:description" Content="@SubTitle" />
        <meta Name="twitter:description" Content="@SubTitle" />
    }
</HeadContent>

@if (IsApiPage && !string.IsNullOrEmpty(ComponentLink))
{
    
}

<div class="docs-page-header mb-12">
    <MudText Typo="@Typo.h3">@Title</MudText>
    <MudText>@GetSubTitle() @Description</MudText>
    <DocsRenderBenchmark />
</div>
<div id="mudads">
    @if (RenderAds)
    { 
        <MudElement HtmlTag="script" async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CESDLK3E&placement=mudblazorcom" id="_carbonads_js"></MudElement>
    }
</div>
@if (!IsApiPage && GetComponentTypeName() != null && !DisableApiHeader)
{
    <DocsPageSection api-link-section>
        <SectionHeader Title="API" />
        <div class="docs-page-apilinks">
            <ul class="my-2">
                <li>
                    <MudLink Href="@GetApiLink()">
                        <CodeInline>@($"<{GetComponentTypeName()}>")</CodeInline>
                    </MudLink>
                </li>
                @if(GetChildComponents() != null)
                {
                    @foreach(var child in GetChildComponents())
                    {
                        <li>
                            <MudLink Href="@($"api/{child.Name.Replace("`1", "").ToLower().Replace("mud","")}")" Class="ms-1">
                                - <CodeInline>@($"<{child.Name.Replace("`1", "")}>")</CodeInline>
                            </MudLink>
                        </li>
                    }
                }
            </ul>
        </div>
    </DocsPageSection>
}
@if (IsApiPage && !string.IsNullOrEmpty(ComponentLink))
{
    <link Rel="canonical" Href="@($"https://mudblazor.com/{ComponentLink}")" />
    <DocsPageSection api-link-section>
        <SectionHeader Title="Pages" />
        <div class="docs-page-apilinks">
            <ul class="my-2">
                <li>
                    <MudLink Href="@GetComponentLink()">
                        <CodeInline>@($"{GetParentComponentPage()}")</CodeInline>
                    </MudLink>
                </li>
            </ul>
        </div>
    </DocsPageSection>
}

@code {

    public bool RenderAds { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            RenderAds = true;
            StateHasChanged();
        }
    }

    [Inject] public NavigationManager NavigationManager { get; set; }
    [Inject] IMenuService MenuService { get; set; }

    [Parameter] public string Title { get; set; }
    [Parameter] public string SubTitle { get; set; }
    [Parameter] public string Keywords { get; set; }
    [Parameter] public bool DisableApiHeader { get; set; }
    [Parameter] public RenderFragment Description { get; set; }
    [Parameter] public string ComponentLink { get; set; }

    private string GetApiLink() => $"api/{GetComponentName()}";
    private string ComponentPage;

    private string GetComponentName()
    {
        return NavigationManager.Uri.ToString().Split('/', StringSplitOptions.RemoveEmptyEntries).LastOrDefault();
    }

    private bool IsApiPage
    {
        get
        {
            return NavigationManager.Uri.ToString().Contains("/api/");
        }
    }

    private string GetComponentTypeName() => ApiLink.GetTypeFromComponentLink(GetComponentName())?.Name.Replace("`1", "");

    private List<Type> GetChildComponents()
    {
        return MenuService.Components.Where(c => c.Component == ApiLink.GetTypeFromComponentLink(GetComponentName()) && c.ChildComponents != null).SelectMany(l => l.ChildComponents).ToList();
    }

    private string GetComponentLink()
    {
        var currentComp = ApiLink.GetTypeFromComponentLink(GetComponentName());
        var parent = MenuService.GetParent(currentComp);

        if (parent.Component is not null) return $"components/{parent.Link}";
        
        return $"components/{parent.GroupItems.Elements.FirstOrDefault(x => x.Component == currentComp).Link}";
    }

    private string GetParentComponentPage()
    {
        var currentComp = ApiLink.GetTypeFromComponentLink(GetComponentName());
        var parent = MenuService.GetParent(currentComp);
        if (parent.Component != null)
        {
            ComponentPage = parent.Name;
        }
        else
        {
            var groupComp = parent.GroupItems.Elements.FirstOrDefault(x => x.Component == currentComp);
            ComponentPage = groupComp.Name;
        }
        return ComponentPage;
    }

    string GetTitle() => $"{Title} - MudBlazor";

    string GetSubTitle()
    {
        if (string.IsNullOrEmpty(SubTitle))
            return "";
        return SubTitle.TrimEnd('.') + ".";
    }

    string GetKeywords()
    {
        var keywords = new HashSet<string>(Regex.Split(Keywords??"", @",\s"));
        keywords.Add(Title);
        keywords.Add(GetComponentTypeName());
        keywords.Add(GetComponentTypeName()?.Replace("Mud", ""));
        keywords.Add("mudblazor");
        keywords.Add("blazor");
        keywords.Add("component");
        keywords.Add("material design");
        keywords.Remove("");
        keywords.Remove(null);
        return string.Join(", ", keywords);
    }
}