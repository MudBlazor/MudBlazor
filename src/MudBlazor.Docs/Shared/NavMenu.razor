@using System.Linq
@using MudBlazor.Docs.Extensions

<MudNavMenu Class="mudblazor-navmenu">
    <div class="docs-nav-fader"></div>
    <MudNavGroup Title="Getting Started" Icon="@Icons.Material.School" Expanded="false" ExpandIcon="@Icons.Material.ExpandMore" Style="margin-top: 40px;">
        <MudNavLink Href="getting-started/installation">Installation</MudNavLink>
        <MudNavLink Href="getting-started/usage">Usage</MudNavLink>
        <MudNavLink Href="getting-started/wireframes">Wireframes</MudNavLink>
    </MudNavGroup>
    <MudNavGroup Title="Components" Icon="@Icons.Material.Dashboard" Expanded="false" ExpandIcon="@Icons.Material.ExpandMore">
        @foreach (var item in DocsComponents.ToList().OrderBy(i => i.Name))
        {
            if (item.IsNavGroup)
            {
                <MudNavGroup Title="@item.Name" Expanded="@item.NavGroupExpanded" ExpandIcon="@Icons.Material.ExpandMore">
                    @foreach (var item in item.GroupItems.ToList().OrderBy(i => i.Name))
                    {
                        string href = $"components/{item.Link}";
                        <MudNavLink Href="@href">@item.Name</MudNavLink>
                    }
                </MudNavGroup>
            }
            else
            {
                string href = $"components/{item.Link}";
                <MudNavLink Href="@href">@item.Name</MudNavLink>
            }
        }
    </MudNavGroup>
    <MudNavGroup Title="API" Icon="@Icons.Material.Api" Expanded="false"  ExpandIcon="@Icons.Material.ExpandMore">
        @foreach (var item in DocsComponentsAPI.ToList().OrderBy(i => i.Name))
        {
            <MudNavLink Href="@ApiLink.GetApiLinkFor(item.Component)">@item.Name</MudNavLink>
        }
    </MudNavGroup>
    <MudNavGroup Title="Features" Icon="@Icons.Material.DeveloperBoard" Expanded="false" ExpandIcon="@Icons.Material.ExpandMore">
        <MudNavLink Href="features/breakpoints">Breakpoints</MudNavLink>
        <MudNavLink Href="features/border-radius">Border Radius</MudNavLink>
        <MudNavLink Href="features/colors">Colors</MudNavLink>
        <MudNavLink Href="features/converters">Converters</MudNavLink>
        <MudNavLink Href="features/display">Display</MudNavLink>
        <MudNavLink Href="features/elevation">Elevation</MudNavLink>
        <MudNavLink Href="features/flex">Flex</MudNavLink>
        <MudNavLink Href="features/icons">Icons</MudNavLink>
        <MudNavLink Href="features/spacing">Spacing</MudNavLink>
    </MudNavGroup>
    <MudNavGroup Title="Customization" Icon="@Icons.Material.Handyman" Expanded="false" ExpandIcon="@Icons.Material.ExpandMore">
        <MudNavLink Href="customization/default-theme">Default Theme</MudNavLink>
        <MudNavGroup Title="Theming" Expanded="true" ExpandIcon="@Icons.Material.ExpandMore">
            <MudNavLink Href="customization/theming/overview">Overview</MudNavLink>
            <MudNavLink Href="customization/theming/palette">Palette</MudNavLink>
            @*<MudNavLink Href="customization/theming/layoutprops">Layout Properties</MudNavLink>
                <MudNavLink Href="customization/theming/shadows">Shadows</MudNavLink>*@
            <MudNavLink Href="customization/theming/z-index">z-index</MudNavLink>
        </MudNavGroup>
    </MudNavGroup>
    <MudNavGroup Title="About" Icon="@Icons.Custom.MudBlazor" Expanded="false" ExpandIcon="@Icons.Material.ExpandMore">
        <MudNavLink Href="project/credit">Credits</MudNavLink>
        <MudNavLink Href="project/about">How it started</MudNavLink>
        <MudNavLink Href="project/team">Team & Contributors</MudNavLink>
        <MudNavLink Href="versions">Versions</MudNavLink>
    </MudNavGroup>
</MudNavMenu>
<div class="docs-nav-filler"></div>

@code {
    DocsComponents DocsComponents = new DocsComponents();
    DocsComponents DocsComponentsAPI = new DocsComponents();

    protected override void OnInitialized()
    {
        DocsComponents.AddItem("Container", typeof(MudContainer))
                            .AddItem("Grid", typeof(MudGrid))
                            .AddItem("Hidden", typeof(MudHidden))
                            .AddNavGroup("Buttons", false, new DocsComponents()
                                .AddItem("Button", typeof(MudButton))
                                .AddItem("IconButton", typeof(MudIconButton))
                                .AddItem("ToggleIconButton", typeof(MudToggleIconButton))
                                .AddItem("Button FAB", typeof(MudFab)))
                            .AddNavGroup("Charts", false, new DocsComponents()
                                    .AddItem("Donut chart", typeof(MudComponent))
                                    .AddItem("Line chart", typeof(MudComponent))
                                    .AddItem("Pie chart", typeof(MudComponent)))
                            .AddItem("Checkbox", typeof(MudCheckBox<T>))
                            .AddItem("Chips", typeof(MudChip))
                            .AddItem("ChipSet", typeof(MudChipSet))
                            .AddItem("Badge", typeof(MudBadge))
                                .AddNavGroup("Form Inputs & controls", false, new DocsComponents()
                                    .AddItem("Radio", typeof(MudRadio))
                                    .AddItem("Select", typeof(MudSelect<T>))
                                    .AddItem("Slider", typeof(MudSlider<T>))
                                    .AddItem("Switch", typeof(MudSwitch<T>))
                                    .AddItem("Text Field", typeof(MudTextField<T>))
                                    .AddItem("Form", typeof(MudForm))
                                    .AddItem("Autocomplete", typeof(MudAutocomplete<T>))
                                    .AddItem("Field", typeof(MudField))
                                )
                            .AddItem("AppBar", typeof(MudAppBar))
                            .AddItem("Drawer", typeof(MudDrawer))
                            .AddItem("Link", typeof(MudLink))
                            .AddItem("Menu", typeof(MudMenu))
                            .AddItem("Nav Menu", typeof(MudNavMenu))
                            .AddItem("Tabs", typeof(MudTabs))
                                .AddNavGroup("Pickers", false, new DocsComponents()
                                    .AddItem("Date Picker", typeof(MudDatePicker))
                                    .AddItem("Time Picker", typeof(MudTimePicker))
                                )
                            .AddItem("Progress", typeof(MudProgressCircular))
                            .AddItem("Dialog", typeof(MudDialog))
                            .AddItem("Snackbar", typeof(MudSnackbarProvider))
                            .AddItem("Avatar", typeof(MudAvatar))
                            .AddItem("Alert", typeof(MudAlert))
                            .AddItem("Card", typeof(MudCard))
                            .AddItem("Divider", typeof(MudDivider))
                            .AddItem("Expansion Panel", typeof(MudExpansionPanel))
                            .AddItem("Icons", typeof(MudIcon))
                            .AddItem("List", typeof(MudList))
                            .AddItem("Paper", typeof(MudPaper))
                            .AddItem("Rating", typeof(MudRating))
                            .AddItem("Skeleton", typeof(MudSkeleton))
                            .AddItem("Table", typeof(MudTable<T>))
                            .AddItem("Simple Table", typeof(MudSimpleTable))
                            .AddItem("Tooltip", typeof(MudTooltip))
                            .AddItem("Typography", typeof(MudText))
                            .AddItem("Overlay", typeof(MudOverlay))
                            .AddItem("Highlighter", typeof(MudHighlighter))
                            .AddItem("FileUpload", typeof(MudButton));

        @foreach (var item in DocsComponents.ToList())
        {
            if (item.IsNavGroup)
            {
                @foreach (var ApiItem in item.GroupItems.ToList())
                {
                    DocsComponentsAPI.AddItem(ApiItem.Name, ApiItem.Component);
                }
            }
            else
            {
                DocsComponentsAPI.AddItem(item.Name, item.Component);
            }
        }
    }
}
