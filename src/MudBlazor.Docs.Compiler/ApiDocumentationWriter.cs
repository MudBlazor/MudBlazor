// Copyright (c) MudBlazor 2021
// MudBlazor licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Collections.Generic;
using System.IO;

namespace MudBlazor.Docs.Compiler;

/// <summary>
/// Represents a writer for generated API documentation.
/// </summary>
/// <remarks>
/// Creates a new instance with types and the default output path.
/// </remarks>
/// <param name="types">The types to document.</param>
public sealed class ApiDocumentationWriter(IDictionary<string, DocumentedType> types, string filePath) : StreamWriter(File.Create(filePath))
{
    private IDictionary<string, DocumentedType> types = types;

    /// <summary>
    /// The current indentation level.
    /// </summary>
    public int IndentLevel { get; set; }

    /// <summary>
    /// Creates a new instance with types and the default output path.
    /// </summary>
    /// <param name="types">The types to document.</param>
    public ApiDocumentationWriter(IDictionary<string, DocumentedType> types) : this(types, Paths.ApiDocumentationFilePath)
    {
    }

    /// <summary>
    /// Writes the copyright boilerplate.
    /// </summary>
    public void WriteHeader()
    {
        WriteLine("// Copyright (c) MudBlazor 2021");
        WriteLine("// MudBlazor licenses this file to you under the MIT license.");
        WriteLine("// See the LICENSE file in the project root for more information.");
        WriteLine();
        WriteLine("//-----------------------------------------------------------------------");
        WriteLine("// Generated by MudBlazor.Docs.Compiler.ApiDocumentationWriter");
        WriteLine("// Any changes to this file will be overwritten on build");
        WriteLine("// <auto-generated />");
        WriteLine("//-----------------------------------------------------------------------");
        WriteLine();
        WriteLine("using System.Collections.Frozen;");
        WriteLine("using System.Collections.Generic;");
        WriteLine("using System.CodeDom.Compiler;");
        WriteLine();
        WriteLine("namespace MudBlazor.Docs.Models;");
        WriteLine();
    }

    /// <summary>
    /// Writes the start of the ApiDocumentation partial class.
    /// </summary>
    public void WriteClassStart()
    {
        WriteLine("[GeneratedCodeAttribute(\"MudBlazor.Docs.Compiler\", \"0.0.0.0\")]");
        WriteLine("public static partial class ApiDocumentation");
        WriteLine("{");
        Indent();
    }

    /// <summary>
    /// Writes the end of the ApiDocumentation partial class.
    /// </summary>
    public void WriteClassEnd()
    {
        Outdent();
        WriteLine("}");
    }

    /// <summary>
    /// Writes the start of the ApiDocumentation constructor.
    /// </summary>
    public void WriteConstructorStart()
    {
        WriteLineIndented("static ApiDocumentation()");
        WriteLineIndented("{");
        Indent();
        WriteLineIndented("// Build all of the documented types");
        WriteLineIndented($"var types = new Dictionary<string, DocumentedType>({types.Count});");
    }

    /// <summary>
    /// Writes text with the current indentation level.
    /// </summary>
    /// <param name="text">The text to write.</param>
    public void WriteIndented(string text)
    {
        for (var index = 0; index < IndentLevel; index++)
        {
            Write("\t");
        }
        Write(text);
    }

    /// <summary>
    /// Writes text with the current indentation level, and ends the line.
    /// </summary>
    /// <param name="text">The text to write.</param>
    public void WriteLineIndented(string text)
    {
        WriteIndented(text);
        WriteLine();
    }

    /// <summary>
    /// Writes the end of the ApiDocumentation constructor.
    /// </summary>
    public void WriteConstructorEnd()
    {
        WriteLine();
        WriteLineIndented("// Convert to a frozen dictionary");
        WriteLineIndented($"Types = types.ToFrozenDictionary();");
        Outdent();
        WriteLine("}");
    }

    /// <summary>
    /// Writes the end of the ApiDocumentation class.
    /// </summary>
    public void WriteApiDocumentationClassEnd()
    {
        Outdent();
        WriteLine("}");
    }

    /// <summary>
    /// Increases the indentation level.
    /// </summary>
    public void Indent()
    {
        IndentLevel++;
    }

    /// <summary>
    /// Decreases the indentation level.
    /// </summary>
    public void Outdent()
    {
        IndentLevel--;
    }

    /// <summary>
    /// Formats a string for use in C# code.
    /// </summary>
    /// <param name="code"></param>
    /// <returns></returns>
    public static string Escape(string code) => code?.Replace("\"", "\\\"");

    /// <summary>
    /// Serializes the specified type.
    /// </summary>
    /// <param name="type">The type to serialize.</param>
    public void WriteType(KeyValuePair<string, DocumentedType> type)
    {
        WriteIndented($"types.Add(\"{type.Value.Name}\", new()");
        WriteLine(" {");
        Indent();
        // Is there any summary?
        if (!string.IsNullOrEmpty(type.Value.Summary))
        {
            WriteLineIndented($"Summary = \"{Escape(type.Value.Summary)}\",");
        }
        // Is there any remarks?
        if (!string.IsNullOrEmpty(type.Value.Remarks))
        {
            WriteLineIndented($"Remarks = \"{Escape(type.Value.Remarks)}\",");
        }
        WriteProperties(type.Value);
        WriteFields(type.Value);

        Outdent();
        WriteLineIndented("});");
    }

    /// <summary>
    /// Serializes the specified properties.
    /// </summary>
    /// <param name="type">The type containing the properties.</param>
    /// <param name="properties">The properties to serialize.</param>
    public void WriteProperties(DocumentedType type)
    {
        /* Example:
         
            Properties = { 
				{ "JavaScriptListenerId", new() { Type = "Guid", Summary = "Gets the ID of the JavaScript listener.",  } },
				{ "BrowserWindowSize", new() { Type = "BrowserWindowSize", Summary = "Gets the browser window size.",  } },
				{ "Breakpoint", new() { Type = "Breakpoint", Summary = "Gets the breakpoint associated with the browser size.",  } },
				{ "IsImmediate", new() { Type = "Boolean",  } },
            },
          
         */

        // Anything to do?
        if (type.Properties.Count == 0)
        {
            return;
        }

        WriteLineIndented("Properties = { ");
        Indent();

        foreach (var property in type.Properties)
        {
            WriteProperty(type, property);
        }

        Outdent();
        WriteLineIndented("},");
    }

    /// <summary>
    /// Serializes the specified property.
    /// </summary>
    /// <param name="type">The current type being serialized.</param>
    /// <param name="property">The property to serialize.</param>
    public void WriteProperty(DocumentedType type, KeyValuePair<string, DocumentedProperty> property)
    {
        /* Example:
         
        	{ "BrowserWindowSize", new() { Type = "BrowserWindowSize", Summary = "Gets the browser window size.",  } },
		
         */

        WriteIndented("{ ");
        Write($"\"{property.Value.Name}\", new()");
        Write(" { ");
        Write($"Type = \"{Escape(property.Value.PropertyTypeName)}\", ");
        // Is this property declared in another type (like a base class)?
        if (!string.IsNullOrEmpty(property.Value.DeclaringTypeName) && type.Name != property.Value.DeclaringTypeName)
        {
            Write($"DeclaringType = \"{Escape(property.Value.DeclaringTypeName)}\", ");
        }
        // Is there a summary?
        if (!string.IsNullOrEmpty(property.Value.Summary))
        {
            Write($"Summary = \"{Escape(property.Value.Summary)}\", ");
        }
        // Is there any remarks?
        if (!string.IsNullOrEmpty(property.Value.Remarks))
        {
            Write($"Remarks = \"{Escape(property.Value.Remarks)}\"");
        }
        Write(" }");
        WriteLine(" },");
    }

    /// <summary>
    /// Serializes all fields for the specified type.
    /// </summary>
    /// <param name="type">The type being serialized.</param>
    public void WriteFields(DocumentedType type)
    {
        if (type.Fields.Count == 0)
        {
            return;
        }

        WriteLineIndented("Fields = { ");
        Indent();

        foreach (var field in type.Fields)
        {
            WriteField(field);
        }

        Outdent();
        WriteLineIndented("},");
    }

    /// <summary>
    /// Serializes the specified field.
    /// </summary>
    /// <param name="field">The field to document.</param>
    public void WriteField(KeyValuePair<string, DocumentedField> field)
    {
        WriteIndented("{ ");
        Write($"\"{field.Value.Name}\", new()");
        Write(" { ");

        // Is there a summary?
        if (!string.IsNullOrEmpty(field.Value.Summary))
        {
            Write($"Summary = \"{Escape(field.Value.Summary)}\"");
        }

        Write(" }");
        WriteLine(" },");
    }
}
