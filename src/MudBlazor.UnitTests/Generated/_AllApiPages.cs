// NOTE: this file is autogenerated. Any changes will be overwritten!
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.DependencyInjection;
using NUnit.Framework;
using MudBlazor.UnitTests.Mocks;
using MudBlazor.Docs.Examples;
using MudBlazor.Dialog;
using MudBlazor.Services;
using MudBlazor.Docs.Components;
using Bunit.Rendering;
using System;
using Toolbelt.Blazor.HeadElement;
using MudBlazor.UnitTests;
using MudBlazor.Charts;
using Bunit;

#if NET5_0
using ComponentParameter = Bunit.ComponentParameter;
#endif

namespace MudBlazor.UnitTests.Components
{
    [TestFixture]
    public class _AllApiPages
    {
        // These tests just check if all the API pages to see if they throw any exceptions



        [Test]
        public void Donut_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(Donut)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void Filters_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(Filters)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void Legend_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(Legend)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void Line_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(Line)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void Pie_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(Pie)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudDialogInstance_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudDialogInstance)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudDialogProvider_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudDialogProvider)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void Markdown_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(Markdown)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudAlert_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudAlert)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudAppBar_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudAppBar)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudAppBarSpacer_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudAppBarSpacer)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudAutocomplete_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudAutocomplete<T>)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudAvatar_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudAvatar)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudBadge_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudBadge)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudBooleanInput_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudBooleanInput<T>)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudButton_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudButton)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudCard_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudCard)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudCardActions_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudCardActions)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudCardContent_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudCardContent)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudCardHeader_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudCardHeader)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudCardMedia_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudCardMedia)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudChart_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudChart)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudCheckBox_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudCheckBox<T>)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudChip_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudChip)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudChipSet_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudChipSet)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudCollapse_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudCollapse)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudContainer_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudContainer)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudDatePicker_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudDatePicker)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudDialog_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudDialog)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudDivider_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudDivider)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudDrawer_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudDrawer)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudDrawerHeader_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudDrawerHeader)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudExpansionPanel_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudExpansionPanel)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudExpansionPanels_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudExpansionPanels)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudFab_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudFab)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudField_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudField)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudForm_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudForm)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudFormComponent_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudFormComponent<T>)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudGrid_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudGrid)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudHidden_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudHidden)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudHighlighter_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudHighlighter)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudIcon_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudIcon)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudIconButton_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudIconButton)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudInput_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudInput<T>)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudInputControl_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudInputControl)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudInputLabel_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudInputLabel)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudInputString_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudInputString)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudItem_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudItem)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudLayout_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudLayout)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudLink_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudLink)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudList_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudList)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudListItem_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudListItem)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudListSubheader_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudListSubheader)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudMainContent_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudMainContent)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudMenu_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudMenu)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudMenuItem_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudMenuItem)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudNavGroup_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudNavGroup)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudNavLink_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudNavLink)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudNavMenu_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudNavMenu)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudOverlay_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudOverlay)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudPaper_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudPaper)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudPicker_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudPicker)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudPickerContent_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudPickerContent)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudPickerToolbar_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudPickerToolbar)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudPopover_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudPopover)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudProgressCircular_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudProgressCircular)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudProgressLinear_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudProgressLinear)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudRadio_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudRadio)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudRadioGroup_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudRadioGroup)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudRating_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudRating)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudRatingItem_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudRatingItem)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudSelect_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudSelect<T>)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudSelectItem_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudSelectItem<T>)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudSimpleTable_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudSimpleTable)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudSkeleton_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudSkeleton)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudSlider_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudSlider<T>)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudSnackbarElement_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudSnackbarElement)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudSnackbarProvider_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudSnackbarProvider)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudSparkLine_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudSparkLine)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudSwitch_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudSwitch<T>)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudTable_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudTable<T>)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudTablePager_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudTablePager)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudTableSortLabel_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudTableSortLabel<T>)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudTabPanel_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudTabPanel)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudTabs_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudTabs)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudTd_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudTd)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudText_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudText)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudTextField_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudTextField<T>)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudTextFieldString_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudTextFieldString)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudTh_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudTh)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudThemeProvider_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudThemeProvider)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudTimePicker_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudTimePicker)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudToggleIconButton_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudToggleIconButton)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudToolBar_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudToolBar)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudToolBarSpacer_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudToolBarSpacer)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudTooltip_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudTooltip)));
                Console.WriteLine(comp.Markup);
         }


        [Test]
        public void MudTr_API_Test()
        {
                using var ctx = new Bunit.TestContext();
                ctx.Services.AddSingleton<NavigationManager>(new MockNavigationManager());
                ctx.Services.AddSingleton<IDialogService>(new DialogService());
                ctx.Services.AddSingleton<IResizeListenerService>(new MockResizeListenerService());
                ctx.Services.AddSingleton<IHeadElementHelper>(new MockHeadElementHelper());
                ctx.Services.AddSingleton<ISnackbar>(new MockSnackbar());
                var comp = ctx.RenderComponent<DocsApi>(ComponentParameter.CreateParameter("Type", typeof(MudTr)));
                Console.WriteLine(comp.Markup);
         }

    }
}

