﻿@using System.Globalization;
@namespace MudBlazor.UnitTests.TestComponents

<MudPopoverProvider></MudPopoverProvider>

@if (IsDateTimeDisabledFunc != null)
{
    <MudDateTimePicker @ref="_picker"
                       DateTime="@DateTime"
                       DateTimeChanged="DateTimeChanged"
                       ReadOnly="@Readonly"
                       PickerMonth="@PickerMonth"
                       PickerMonthChanged="PickerMonthChanged"
                       IsDateTimeDisabledFunc="@IsDateTimeDisabledFunc"
                       DateOpenTo="@DateOpenTo"
                       FixDay="@FixDay"
                       FixMonth="@FixMonth"
                       FixYear="@FixYear"
                       MinDateTime="@MinDate"
                       MaxDateTime="@MaxDate"
                       FirstDayOfWeek="@FirstDayOfWeek"
                       ShowWeekNumbers="@ShowWeekNumbers"
                       AutoClose="@AutoClose"
                       AdditionalDateClassesFunc="@AdditionalDateClassesFunc" />
}
else
{
    <MudDateTimePicker @ref="_picker"
                       DateTime="@DateTime"
                       DateTimeChanged="DateTimeChanged"
                       ReadOnly="@Readonly"
                       PickerMonth="@PickerMonth"
                       PickerMonthChanged="PickerMonthChanged"
                       DateOpenTo="@DateOpenTo"
                       FixDay="@FixDay"
                       FixMonth="@FixMonth"
                       FixYear="@FixYear"
                       MinDateTime="@MinDate"
                       MaxDateTime="@MaxDate"
                       FirstDayOfWeek="@FirstDayOfWeek"
                       ShowWeekNumbers="@ShowWeekNumbers"
                       AutoClose="@AutoClose"
                       AdditionalDateClassesFunc="@AdditionalDateClassesFunc" />
}

@code {
    private MudDateTimePicker _picker;

    public DateTime? DateTime { get; set; }

    public void DateTimeChanged(DateTime? datetime)
    {
        DateTime = datetime;
    }

    public void PickerMonthChanged(DateTime? month)
    {
        PickerMonth = month;
    }

    [Parameter] public bool ShowWeekNumbers { get; set; } = true;
    [Parameter] public DayOfWeek FirstDayOfWeek { get; set; } = DayOfWeek.Sunday;
    [Parameter] public DateTime? PickerMonth { get; set; }
    [Parameter] public bool Readonly { get; set; } = false;
    [Parameter] public Func<DateTime, bool> IsDateTimeDisabledFunc { get; set; }
    [Parameter] public OpenTo DateOpenTo { get; set; } = OpenTo.Date;
    [Parameter] public int? FixDay { get; set; }
    [Parameter] public int? FixMonth { get; set; }
    [Parameter] public int? FixYear { get; set; }
    [Parameter] public DateTime? MinDate { get; set; }
    [Parameter] public DateTime? MaxDate { get; set; }
    [Parameter] public Func<DateTime, string> AdditionalDateClassesFunc { get; set; }
    [Parameter] public bool AutoClose { get; set; } = false;

    public async Task Open() => await InvokeAsync(() => _picker.OpenAsync());
    public async Task Close() => await InvokeAsync(() => _picker.CloseAsync());
    public new void StateHasChanged() => base.StateHasChanged();
}