@namespace MudBlazor.UnitTests.TestComponents

<MudDataGrid Items="@_items" Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterRow" Bordered="true">
    <Columns>
        <Column T="Model" Field="@nameof(Model.Name)" />
        <Column T="Model" Field="@nameof(Model.Age)">
            <FilterTemplate>
                <MudIconButton OnClick="@OpenFilter" Icon="@Icons.Filled.KeyboardArrowDown" Size="@Size.Small" />
                <MudOverlay Visible="@_filterOpen" OnClick="@(() => _filterOpen = false)" />
                <MudPopover Open="@_filterOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
                    Style="width:150px">
		           <MudStack Spacing="0">
                       @foreach (var item in context.Items)
                       {
                           <MudCheckBox T="bool" Label="@($"{item.Age}")" Size="@Size.Small" Checked="@(_selectedItems.Contains(item))"
                               CheckedChanged="@((value) => SelectedChanged(value, item))" />
                       }
                       <MudStack Row="true">
                            <MudButton OnClick="@(() => ClearFilter(context))">Clear</MudButton>
                            <MudButton Color="@Color.Primary" OnClick="@(() => ApplyFilter(context))">Filter</MudButton>
                       </MudStack>
                   </MudStack>
	            </MudPopover>
            </FilterTemplate>
        </Column>
        <Column T="Model" Field="@nameof(Model.Status)" />
        <Column T="Model" Field="@nameof(Model.Hired)" />
        <Column T="Model" Field="@nameof(Model.HiredOn)" />
    </Columns>
</MudDataGrid>

@code {
    public record Model (string Name, int? Age, Severity? Status, bool? Hired, DateTime? HiredOn);

    private IEnumerable<Model> _items = new List<Model>()
    {
        new Model("Sam", 56, Severity.Normal, false, null), 
        new Model("Alicia", 54, Severity.Info, null, null), 
        new Model("Ira", 27, Severity.Success, true, new DateTime(2011, 1, 2)),
        new Model("John", 32, Severity.Warning, false, null)
    };

    HashSet<Model> _selectedItems = new();
    HashSet<Model> _filterItems = new();

    FilterDefinition<Model> _filterDefinition;

    bool _filterOpen = false;

    protected override void OnInitialized()
    {
        _selectedItems = _items.ToHashSet();
        _filterItems = _items.ToHashSet();
        _filterDefinition = new FilterDefinition<Model>
        {
            FilterFunction = x => _filterItems.Contains(x)
        };
    }

    private void OpenFilter()
    {
        _filterOpen = true;
    }

    private void SelectedChanged(bool value, Model item)
    {
        if (value)
            _selectedItems.Add(item);
        else
            _selectedItems.Remove(item);
    }

    private void ClearFilter(FilterContext<Model> context)
    {
        _selectedItems = _items.ToHashSet();
        _filterItems = _items.ToHashSet();
        context.Actions.ClearFilter(_filterDefinition);
        _filterOpen = false;
    }

    private void ApplyFilter(FilterContext<Model> context)
    {
        _filterItems = _selectedItems.ToHashSet();
        context.Actions.ApplyFilter(_filterDefinition);
        _filterOpen = false;
    }

}
