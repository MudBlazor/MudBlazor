@namespace MudBlazor.UnitTests.TestComponents
@typeparam TItem

<MudGrid>
    <MudItem xs="12">
        <MudDataGrid T="WeatherForecast"
                     @ref="MudGridRef"
                     Elevation="25"
                     Items="@forecasts"
                     Hover="true"
                     Outlined="false"
                     Filterable="true"
                     Loading="@_loading"
                     Height="500px"
                     Bordered="true"
                     FixedHeader="true">
            <Columns>
                <Column T="WeatherForecast" Field="@nameof(WeatherForecast.Id)" Title="Id" Sortable="true" />
                <Column T="WeatherForecast" Field="@nameof(WeatherForecast.Date)" Title="Date" Sortable="true" />
                <Column T="WeatherForecast" Field="@nameof(WeatherForecast.TemperatureC)" Title="Temp. (C)" Sortable="true" />
                <Column T="WeatherForecast" Field="@nameof(WeatherForecast.TemperatureF)" Title="Temp. (F)" Sortable="true" />
                <Column T="WeatherForecast" Field="@nameof(WeatherForecast.Summary)" Title="Summary" Sortable="true" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="WeatherForecast" />
            </PagerContent>
        </MudDataGrid>
    </MudItem>
</MudGrid>

@code {
    public MudDataGrid<WeatherForecast> MudGridRef { get; private set; }
    private bool _loading;
    private IEnumerable<WeatherForecast> forecasts = new List<WeatherForecast>();

    public string Guid1 => "98ee67d6-0302-40f4-935a-0014e712a9e1";
    public string Guid2 => "C3D88136-44AF-4955-B422-5EE13463FDCE";

    protected override void OnInitialized()
    {
        _loading = true;
        forecasts = new List<WeatherForecast>()
        {
            new WeatherForecast()
            {
                Id = ParseId(Guid1),
                Date = DateTime.UtcNow,
                TemperatureC = 14,
                Summary = "Bracing"
            },
            new WeatherForecast()
            {
                Id = ParseId(Guid2),
                Date = DateTime.UtcNow,
                TemperatureC = 64,
                Summary = "Bracing"
            },
        };
        _loading = false;
    }

    private TItem ParseId(string id)
    {
        return Guid.Parse(id) as dynamic;
    }

    public class WeatherForecast
    {
        public TItem Id { get; set; }

        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}