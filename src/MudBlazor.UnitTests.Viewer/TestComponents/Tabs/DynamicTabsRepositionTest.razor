@namespace MudBlazor.UnitTests.TestComponents

<MudForm>
	<MudSwitch T="bool" @bind-Checked="@_isCentered" Label="Centered Tabs"/>
	<MudSwitch T="bool" @bind-Checked="@_isEnableRepositioning" Label="Enable repositioning"/>
	<MudRadioGroup @bind-SelectedOption="@_position">
		<MudRadio Option="@(Position.Bottom)">Bottom</MudRadio>
		<MudRadio Option="@(Position.Center)">Center</MudRadio>
		<MudRadio Option="@(Position.Top)">Top</MudRadio>
		<MudRadio Option="@(Position.Left)">Left</MudRadio>
		<MudRadio Option="@(Position.Right)">Right</MudRadio>
		<MudRadio Option="@(Position.Start)">Start</MudRadio>
		<MudRadio Option="@(Position.End)">End</MudRadio>
	</MudRadioGroup>
</MudForm>

<MudDynamicTabs
		CloseIconClass="my-close-icon-class" CloseTab="OnCloseClicked"
		AddIconClass="my-add-icon-class" AddTab="OnAddClicked"
		Centered="@_isCentered"
		Position="@_position"
		EnableRepositioning="@_isEnableRepositioning"
>
	@foreach(var panel in _panels)
	{
		<MudTabPanel Text="@panel">
			Content of panel: @panel
		</MudTabPanel>
	}
</MudDynamicTabs>

@code {

	public static string __description__ = @"Should be able to reposition tabs
										 	after adding/deleting tabs and
										 	changing positions (centered, top,
										 	left, etc).";

	bool _isCentered = false;
	bool _isEnableRepositioning = true;
	Position _position { get; set; } = Position.Top;
	List<string> _panels = new List<string>() { "Untitled" };

	public Int32 AddClickCounter { get; private set; }

	private void OnAddClicked()
	{
		AddClickCounter++;
		_panels.Add($"Untitled {AddClickCounter}");
	}

	private void OnCloseClicked(MudTabPanel panel)
	{
		_panels.Remove(panel.Text);
	}
}
