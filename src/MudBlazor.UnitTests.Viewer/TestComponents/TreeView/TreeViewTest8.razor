@namespace MudBlazor.UnitTests.TestComponents

<MudTreeView T="TreeItemData" Items="@TreeItems" Hover="true" Width="100%" ServerData="LoadServerData" @ref="Tree">
    <ItemTemplate Context="item">
        <MudTreeViewItem T="TreeItemData" Items="@item.TreeItems" CanExpand=@item.CanExpand>
            <BodyContent>
                <MudIcon Icon="@item.Icon" Size="Size.Small"></MudIcon>
                <MudText>@item.Title</MudText>
                <MudText Typo="Typo.caption">@item.Number</MudText>
            </BodyContent>
        </MudTreeViewItem>
    </ItemTemplate>
</MudTreeView>

@code {
    #nullable enable
    public MudTreeView<TreeItemData>? Tree { get; set; }

    public HashSet<TreeItemData> TreeItems { get; set; } = new HashSet<TreeItemData>();

    public class TreeItemData
    {
        public string Title { get; set; }

        public string Icon { get; set; }

        public int? Number { get; set; }

        public bool CanExpand { get; set; }

        public HashSet<TreeItemData>? TreeItems { get; set; }

        public TreeItemData(string title, string icon, int? number = null, bool canExpand = true)
        {
            Title = title;
            Icon = icon;
            Number = number;
            CanExpand = canExpand;
        }
    }

    protected override void OnInitialized()
    {
        TreeItems.Add(new TreeItemData("All Mail", Icons.Material.Filled.Email));
        TreeItems.Add(new TreeItemData("Trash", Icons.Material.Filled.Delete));
        TreeItems.Add(new TreeItemData("Categories", Icons.Material.Filled.Label)
            {
                TreeItems = new HashSet<TreeItemData>()
            {
                new TreeItemData("Social", Icons.Material.Filled.Group, 90),
                new TreeItemData("Updates", Icons.Material.Filled.Info, 2294),
                new TreeItemData("Forums", Icons.Material.Filled.QuestionAnswer, 3566),
                new TreeItemData("Promotions", Icons.Material.Filled.LocalOffer, 733)
            }
            });
        TreeItems.Add(new TreeItemData("History", Icons.Material.Filled.Label, null, false));
    }

    public async Task<IReadOnlyCollection<TreeItemData>?> LoadServerData(TreeItemData parentNode)
    {
        if (parentNode == null) throw new Exception("Parent node is null!");
        await Task.Delay(500);
        return parentNode.TreeItems;
    }
}