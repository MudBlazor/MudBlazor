@implements IDisposable

<div class="d-flex flex-column">
    <MudPaper Class="mud-width-full pa-4" Elevation="0">
        <MudProgressLinear Color="Color.Error" Rounded="true" Size="Size.Small" Value="@Value" />
        <MudProgressLinear Color="Color.Warning" Rounded="true" Size="Size.Medium" Value="@Value" Class="my-7" />
        <MudProgressLinear Color="Color.Success" Rounded="true" Size="Size.Large" Value="@Value" />
    </MudPaper>
    
    <MudPaper Class="mud-width-full pa-4" Elevation="0">
        <MudProgressLinear Color="Color.Error" Rounded="true" Size="Size.Small" Value="@SmoothValue" />
        <MudProgressLinear Color="Color.Warning" Rounded="true" Size="Size.Medium" Value="@SmoothValue" Class="my-7" />
        <MudProgressLinear Color="Color.Success" Rounded="true" Size="Size.Large" Value="@SmoothValue" />
    </MudPaper>

    <MudPaper Class="mud-width-full pa-4" Elevation="0">
        <MudProgressLinear Color="Color.Secondary" Striped="true" Size="Size.Medium" Value="@Value" Class="my-7" />
        <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Value="@Value" Class="my-7" />
    </MudPaper>
    
    <MudPaper Class="mud-width-full pa-4" Elevation="0">
        <MudProgressLinear Color="Color.Secondary" Striped="true" Size="Size.Medium" Value="@SmoothValue" Class="my-7" />
        <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Value="@SmoothValue" Class="my-7" />
    </MudPaper>
    
    <MudPaper Class="mud-width-full pa-4" Elevation="0">
        <MudProgressLinear Color="Color.Primary" Buffer="true" Value="@Value" BufferValue="@BufferValue" Class="my-7" />
        <MudProgressLinear Color="Color.Secondary" Buffer="true" Value="@Value" BufferValue="@BufferValue" Class="my-7" />
        <MudProgressLinear Color="Color.Tertiary" Buffer="true" Value="@Value" BufferValue="@BufferValue" Class="my-7" />
        <MudProgressLinear Color="Color.Info" Buffer="true" Value="@Value" BufferValue="@BufferValue" Class="my-7" />
        <MudProgressLinear Color="Color.Warning" Buffer="true" Value="@Value" BufferValue="@BufferValue" Class="my-7" />
        <MudProgressLinear Color="Color.Error" Buffer="true" Value="@Value" BufferValue="@BufferValue" Class="my-7" />
    </MudPaper>
    
    <MudPaper Class="mud-width-full pa-4" Elevation="0">
        <MudProgressLinear Color="Color.Primary" Buffer="true" Value="@SmoothValue" BufferValue="@SmoothBufferValue" Class="my-7" />
        <MudProgressLinear Color="Color.Secondary" Buffer="true" Value="@SmoothValue" BufferValue="@SmoothBufferValue" Class="my-7" />
        <MudProgressLinear Color="Color.Tertiary" Buffer="true" Value="@SmoothValue" BufferValue="@SmoothBufferValue" Class="my-7" />
        <MudProgressLinear Color="Color.Info" Buffer="true" Value="@SmoothValue" BufferValue="@SmoothBufferValue" Class="my-7" />
        <MudProgressLinear Color="Color.Warning" Buffer="true" Value="@SmoothValue" BufferValue="@SmoothBufferValue" Class="my-7" />
        <MudProgressLinear Color="Color.Error" Buffer="true" Value="@SmoothValue" BufferValue="@SmoothBufferValue" Class="my-7" />
    </MudPaper>


    <MudPaper Class="mud-width-full" Elevation="0">
    <MudProgressLinear Color="Color.Info" Size="Size.Large" Value="@Value" Class="my-7">
        <MudText Typo="Typo.subtitle1" Color="Color.Dark">
            <b>@Value%</b>
        </MudText>
    </MudProgressLinear>
    </MudPaper>

    <MudPaper Class="mud-width-full pa-4" Elevation="0">
        <MudProgressLinear Color="Color.Info" Size="Size.Large" Value="@SmoothValue" Class="my-7">
            <MudText Typo="Typo.subtitle1" Color="Color.Dark">
                <b>@SmoothValue%</b>
            </MudText>
        </MudProgressLinear>
    </MudPaper>

    <MudPaper Height="360px" Class="d-flex justify-space-around mud-width-full pa-4" Elevation="0">
        <MudProgressLinear Vertical="true" Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
        <MudProgressLinear Vertical="true" Color="Color.Primary" Size="Size.Medium" Value="@Value" />
        <MudProgressLinear Vertical="true" Color="Color.Primary" Size="Size.Medium" Value="25">
            <MudText Typo="Typo.subtitle1" Color="Color.Dark"><b>25</b></MudText>
        </MudProgressLinear>
        <MudProgressLinear Vertical="true" Color="Color.Primary" Size="Size.Small" Buffer="true" Value="@Value" BufferValue="@BufferValue" />
        <MudProgressLinear Vertical="true" Color="Color.Primary" Striped="true" Size="Size.Large" Value="@Value" />
    </MudPaper>

    <MudPaper Height="360px" Class="d-flex justify-space-around mud-width-full pa-4" Elevation="0">
        <MudProgressLinear Vertical="true" Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
        <MudProgressLinear Vertical="true" Color="Color.Primary" Size="Size.Medium" Value="@SmoothValue" />
        <MudProgressLinear Vertical="true" Color="Color.Primary" Size="Size.Medium" Value="25">
            <MudText Typo="Typo.subtitle1" Color="Color.Dark"><b>25</b></MudText>
        </MudProgressLinear>
        <MudProgressLinear Vertical="true" Color="Color.Primary" Size="Size.Small" Buffer="true" Value="@SmoothValue" BufferValue="@SmoothBufferValue" />
        <MudProgressLinear Vertical="true" Color="Color.Primary" Striped="true" Size="Size.Large" Value="@SmoothValue" />
    </MudPaper>
</div>
@code {
    public static string __description__ = "Simple MudProgressLinear test";

    public int Value { get; set; }
    public int BufferValue { get; set; }
    public int SmoothValue { get; set; }
    public int SmoothBufferValue { get; set; }

    public async void SimulateProgress()
    {
        Value = 5;
        BufferValue = 10;

        do
        {
            if (_disposed)
            {
                return;
            }

            Value += 4;
            BufferValue += 5;
            StateHasChanged();
            await Task.Delay(500);

        } while (Value < 100);

        SimulateProgress();
    }

    public async void SimulateSmoothProgress()
    {
        SmoothValue = 0;
        SmoothBufferValue = 5;
        do
        {
            if (_disposed)
            {
                return;
            }

            SmoothValue += 1;
            SmoothBufferValue += 1;
            StateHasChanged();
            await Task.Delay(500);

        } while (SmoothValue < 100);

        SimulateSmoothProgress();
    }

    protected override void OnInitialized() {
        SimulateSmoothProgress();
        SimulateProgress();
    }

    bool _disposed;
    public void Dispose() => _disposed = true;
}