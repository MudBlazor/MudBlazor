@inherits MudComponentBase
@namespace MudBlazor.UnitTests

<ParameterStateChildBindingTestComp Id="1" @ref="Child1Instance" @bind-IsExpanded="IsExpandedChild1BindSyntax" />
<ParameterStateChildBindingTestComp Id="2" @ref="Child2Instance" IsExpanded="IsExpandedChild2VariableAndCallback" IsExpandedChanged="IsExpandedChangedChild2" />
<ParameterStateChildBindingTestComp Id="3" @ref="Child3Instance" IsExpandedChanged="IsExpandedChangedChild3" />
<ParameterStateChildBindingTestComp Id="4" @ref="Child4Instance" IsExpanded="IsExpandedChild4OneWay" />

<MudButton id="parentBtn1" OnClick="ToggleAsync1">@(IsExpandedChild1BindSyntax ? "Show" : "Hide")</MudButton>
<MudButton id="parentBtn2" OnClick="ToggleAsync2">@(IsExpandedChild2VariableAndCallback ? "Show" : "Hide")</MudButton>
<MudButton id="parentBtn4" OnClick="ToggleAsync4">@(IsExpandedChild4OneWay ? "Show" : "Hide")</MudButton>

@code {
#nullable enable
    public ParameterStateChildBindingTestComp Child1Instance = null!;
    public ParameterStateChildBindingTestComp Child2Instance = null!;
    public ParameterStateChildBindingTestComp Child3Instance = null!;
    public ParameterStateChildBindingTestComp Child4Instance = null!;

    public bool IsExpandedChild1BindSyntax { get; set; }

    public bool IsExpandedChild2VariableAndCallback { get; set; }

    public bool IsExpandedChild4OneWay { get; set; }

    private void IsExpandedChangedChild2(bool newValue)
    {
        IsExpandedChild2VariableAndCallback = newValue;
    }

    private void IsExpandedChangedChild3(bool newValue)
    {
    }

    private void ToggleAsync1()
    {
        IsExpandedChild1BindSyntax = !IsExpandedChild1BindSyntax;
    }

    private void ToggleAsync2()
    {
        IsExpandedChild2VariableAndCallback = !IsExpandedChild2VariableAndCallback;
    }

    private void ToggleAsync4()
    {
        IsExpandedChild4OneWay = !IsExpandedChild4OneWay;
    }
}
