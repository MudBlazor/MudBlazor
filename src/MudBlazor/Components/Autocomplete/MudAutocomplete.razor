@namespace MudBlazor
@inherits MudBaseInput<T>
@typeparam T

<CascadingValue Name="Standalone" Value="false" IsFixed="true">
    <div class="@AutocompleteClassname" id="@_elementId">
        <MudInputControl Label="@Label" Variant="@Variant" HelperText="@HelperText" HelperTextOnFocus="@HelperTextOnFocus" FullWidth="@FullWidth" Margin="@Margin" Class="@Classname" Style="@Style"
                         Error="@Error" ErrorText="@ErrorText" Disabled="@Disabled" @onclick="@ToggleMenu" Required="@Required" ForId="@FieldId">
            <InputContent>
                    
                <MudInput @ref="_elementReference" InputType="InputType.Text"
                          Class="mud-select-input" Margin="@Margin"
                          Variant="@Variant"
                          TextUpdateSuppression="@TextUpdateSuppression"
                          Value="@Text" DisableUnderLine="@DisableUnderLine"
                          Disabled="@Disabled" ReadOnly="@ReadOnly" Error="@Error"
                          OnAdornmentClick="@OnAdornmentClick" AdornmentIcon="@CurrentIcon" Adornment="@Adornment" AdornmentColor="@AdornmentColor" IconSize="@IconSize" AdornmentText="@AdornmentText"
                          Clearable="@Clearable" OnClearButtonClick="@OnClearButtonClick"
                          @attributes="UserAttributes"
                          TextChanged="OnTextChanged" OnBlur="OnInputBlurred"
                          autocomplete=@("mud-disabled-"+Guid.NewGuid()) KeyUpPreventDefault="KeyUpPreventDefault"
                          Placeholder="@Placeholder" Immediate="true"
                          InputMode="@InputMode" Pattern="@Pattern"
                          T="string">
                    <DataVisualiser>
                        @if (MultiSelection && SelectedValues.Any())
                        {
                            <MudChipSet>
                                @foreach (var val in SelectedValues)
                                {
                                    <MudChip Value="@val" OnClose="ChipClose">@val.ToString()</MudChip>
                                }
                            </MudChipSet>
                        }
                    </DataVisualiser>
                </MudInput>
                @if (ShowProgressIndicator && IsLoading)
                {
                    @if (ProgressIndicatorTemplate != null)
                    {
                        @ProgressIndicatorTemplate
                    }
                    else
                    {
                        <div class="@CircularProgressClassname">
                            <MudProgressCircular Color="ProgressIndicatorColor" Indeterminate="true" Size="Size.Small"/>
                        </div>
                    }
                }

                <MudPopover Open="@IsOpen" MaxHeight="@MaxHeight" AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin" Class="@PopoverClass" RelativeWidth="true">
                    @if(ProgressIndicatorInPopoverTemplate != null && IsLoading)
                    {
                        @ProgressIndicatorInPopoverTemplate
                    } 
                    else if (_items != null && _items.Length != 0)
                    {
                        <CascadingValue Value="@this" IsFixed="true">
                            <MudList @ref="_list" T="T" Clickable="true" MultiSelection="@MultiSelection" Dense="@Dense" SelectValueOnTab="@SelectValueOnTab"
                                 @bind-SelectedValue="Value" @bind-SelectedValues="SelectedValues" @bind-SelectedItem="SelectedListItem">

                                @for (var index = 0; index < _items.Length; index++)
                                {
                                    var item = _items[index];
                                    bool is_selected = index == _selectedListItemIndex;
                                    bool is_disabled = !_enabledItemIndices.Contains(index);
                                    <MudListItem T="T" Value="item" Disabled="@(is_disabled)" OnClick="@(() => SelectOption(item))">

                                        @if (ItemTemplate == null)
                                        {
                                            @GetItemString(item)
                                        }
                                        else if (is_disabled && ItemDisabledTemplate != null)
                                        {
                                            @ItemDisabledTemplate(item)
                                        }
                                        else if (is_selected)
                                        {
                                            @if (ItemSelectedTemplate == null)
                                                @ItemTemplate(item)
                                            else
                                                @ItemSelectedTemplate(item)


                                        }
                                        else
                                        {
                                            @ItemTemplate(item)
                                        }
                                    </MudListItem>
                                }
                                @if (MoreItemsTemplate != null && _itemsReturned > MaxItems)
                                {
                                    <div class="pa-1">
                                        @MoreItemsTemplate
                                    </div>
                                }
                            </MudList>
                        </CascadingValue>
                    }
                    else if (NoItemsTemplate != null)
                    {
                        <div class="pa-1">
                            @NoItemsTemplate
                        </div>
                    }
                </MudPopover>
            </InputContent>
        </MudInputControl>
    </div>
</CascadingValue>

<MudOverlay Visible="IsOpen" OnClick="@ToggleMenu" @ontouchstart="@ToggleMenu" LockScroll="false" />