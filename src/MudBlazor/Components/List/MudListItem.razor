@namespace MudBlazor
@inherits MudComponentBase
@typeparam T

<div tabindex="0" @attributes="UserAttributes" class="@Classname" style="@Style" @onclick="OnClickHandlerAsync" @onclick:stopPropagation="true">
    @if (AvatarContent is not null) {
        <div class="mud-list-item-avatar">
            @AvatarContent
        </div>
    }
    else if (!string.IsNullOrWhiteSpace(Icon)) {
        <div class="mud-list-item-icon">
            <MudIcon Icon="@Icon" Color="@IconColor" Size="@IconSize" />
        </div>
    }
    @if (MultiSelection && NestedList is null) {
        <MudCheckBox T="bool?" TriState ReadOnly="@ReadOnly" Class="mud-list-item-checkbox my-n2 ms-n2" Disabled="@GetDisabled()"
                     CheckedIcon="@GetCheckedIcon()" UncheckedIcon="@GetUncheckedIcon()" IndeterminateIcon="@GetIndeterminateIcon()" Color="@GetCheckBoxColor()" UncheckedColor="@GetCheckBoxColor()"
                    @bind-Value:get="GetCheckBoxState()" @bind-Value:set="@(x=>OnCheckboxChangedAsync())"/>
    }
    <div class="mud-list-item-text @(Inset? "mud-list-item-text-inset" : "")">
        <MudText Typo="@TextTypo">
            @if (ChildContent != null) {
                @ChildContent
            }
            else {
                @Text
            }
        </MudText>
    </div>
    @if (NestedList != null) {
        <MudIcon Icon="@($"{(_expandedState.Value ? ExpandLessIcon : ExpandMoreIcon)}")" Size="@IconSize" Color="@ExpandIconColor" />
    }
</div>
@if (NestedList != null) {
    <MudCollapse Expanded="@_expandedState.Value">
        <MudList T="T" Class="mud-nested-list" Comparer="@Comparer" SelectionMode="@SelectionMode" ReadOnly="@ReadOnly" Color="@(MudList?.Color ?? Color.Primary)"
                 Padding="false" Disabled="@GetDisabled()" Dense="@GetDense()">
            @NestedList
        </MudList>
    </MudCollapse>
}