@namespace MudBlazor
@inherits MudBasePicker


<MudPicker @ref="Picker" Class="@Class" PickerVariant="@PickerVariant" Orientation="@Orientation" Label="@Label" @bind-Value="@Value" HelperText="@HelperText" Editable="@Editable" InputVariant="@InputVariant" Disabled="@Disabled" Adornment="@Adornment" IconSize="@IconSize" InputIcon="@InputIcon" Elevation="@Elevation" Square="@Square" Rounded="@Rounded">
    <MudPickerToolbar Class="mud-picker-datepicker-toolbar" DisableToolbar="@DisableToolbar" Orientation="@Orientation" Color="@Color">
        <MudButton Variant="Variant.Text" Color="Color.Inherit" Class="mud-button-year" OnClick="@OnYearClick">@GetFormattedYearString()</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Inherit" Class="mud-button-date" OnClick="@OnFormattedDateClick">@GetFormattedDateString()</MudButton>
    </MudPickerToolbar>
    <MudPickerContent>
        @if (OpenTo == OpenTo.Year)
        {
            <div id="pickerYears" class="mud-picker-year-container">
                @for (int i = GetMinYear(); i <= GetMaxYear(); i++)
                {
                    var year = i;
                    <div class="mud-picker-year" id="@(_componentId + year)" @onclick="@(() => OnYearClicked(year))"  @onclick:stopPropagation="true">
                        <MudText Typo="@GetYearTypo(year)" Class="@GetYearClasses(year)">@year</MudText>
                    </div>
                }
            </div>
        }
        else if (OpenTo == OpenTo.Month)
        {
            <div class="mud-picker-month-container">
                @foreach (var month in GetAllMonths())
                {
                    <div class="mud-picker-month" @onclick="@(() => OnMonthSelected(month))" @onclick:stopPropagation="true">
                        <MudText Typo="@GetMonthTypo(month)" Class="@GetMonthClasses(month)">@GetAbbreviatedMontName(month)</MudText>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="mud-picker-calendar-header">
                <div class="mud-picker-calendar-header-switch">
                    <MudIconButton Icon="@Icons.Material.ChevronLeft" OnClick="@OnPreviousMonthClick"/>
                    <div class="mud-picker-slide-transition mud-picker-calendar-header-transition" @onclick="OnMonthClicked"  @onclick:stopPropagation="true">
                        <MudText Typo="Typo.body1" Align="Align.Center">@GetMonthName()</MudText>
                    </div>
                    <MudIconButton Icon="@Icons.Material.ChevronRight" OnClick="@OnNextMonthClick"/>
                </div>
                <div class="mud-picker-calendar-header-day">
                    @foreach (var dayname in GetAbbreviatedDayNames())
                    {
                        <MudText Typo="Typo.caption" Class="mud-day-label">@dayname</MudText>
                    }
                </div>
            </div>
            <div class="mud-picker-calendar-transition mud-picker-slide-transition">
                <div class="mud-picker-calendar">
                    @for (int week = 0; week < 6; week++)
                    {
                        <div class="mud-picker-calendar-week">
                            @foreach (var day in GetWeek(week))
                            {
                                <div role="presentation" class="mud-picker-calendar-day">
                                    <MudIconButton Class="@GetDayClasses(day)" OnClick="@(() =>{ var d = day; OnDayClicked(d); })" Disabled="@((day < MinDate) || (day > MaxDate))">@day.Day</MudIconButton>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </MudPickerContent>
</MudPicker>