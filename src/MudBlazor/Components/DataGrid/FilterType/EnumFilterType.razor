@namespace MudBlazor
@typeparam T
@using MudBlazor.Extensions
@inherits ComponentBase
@implements IFilterType<T>

@Render

@code {
#nullable enable

    /// <summary>
    /// Renders the component to the supplied <see cref="BuildRenderTree"/>.
    /// </summary>
    public RenderFragment Render => base.BuildRenderTree;

    /// <inheritdoc />
    public bool CanBeMapped(FilterDefinition<T> filterDefinition)
    {
        return filterDefinition.FieldType.IsEnum;
    }

    /// <inheritdoc />
    public RenderFragment<(FilterDefinition<T> filterDefinition, Filter<T> filter)> RenderFilterFragment => context =>
        @<MudSelect T="Enum"
                    Value="@context.filter._valueEnum"
                    ValueChanged="@context.filter.EnumValueChanged"
                    FullWidth="true"
                    Dense="true"
                    Margin="@Margin.Dense"
                    Class="filter-input">
            <MudSelectItem T="Enum"
                           Value="@(null)"/>
        @foreach (var item in EnumExtensions.GetSafeEnumValues(context.filterDefinition.dataType))
            {
                <MudSelectItem T="Enum" Value="@(item)">@item</MudSelectItem>
            }
        </MudSelect>;
}
