@namespace MudBlazor
@inherits MudComponentBase
@typeparam T

@if (IsOnlyHeader)
{
    <th scope="col" class="mud-table cell @_classname" style="" @attributes="@UserAttributes">
        @ChildContent
    </th>
}
else if (Column != null && !Column.Hidden)
{
    <th @ref=@_headerElement scope="col" class="@_classname" style="@_style" colspan="@Column.HeaderColSpan" @attributes="@UserAttributes">
        <span class="column-header">
            @if (sortable)
            {
                <span class="@_sortHeaderClass" @onclick="SortChangedAsync">
                    @if (Column.HeaderTemplate != null)
                    {
                        @Column.HeaderTemplate(Column.headerContext)
                    }
                    else 
                    {
                        @computedTitle
                    }
                </span>
            }
            else
            { 
                @if (Column.HeaderTemplate != null)
                {
                    @Column.HeaderTemplate(Column.headerContext)
                }
                else 
                {
                    @computedTitle
                }
            }
            <span class="@_optionsClass">
                @if (sortable)
                {
                    if (_initialDirection == SortDirection.None)
                    {
                        <MudIconButton Icon="@Column.SortIcon" Class="@sortIconClass" Size="@Size.Small" OnClick="@SortChangedAsync"></MudIconButton>
                    }
                    else
                    {
                        <MudIconButton Icon="@Column.SortIcon" Class="@sortIconClass" Size="@Size.Small" OnClick="@SortChangedAsync"></MudIconButton>
                        if(DataGrid.SortMode == SortMode.Multiple)
                        {
                            <span class="mud-sort-index mud-text-disabled">@(Column.SortIndex + 1)</span>
                        }
                    }
                }

                @if (DataGrid.FilterMode != DataGridFilterMode.ColumnFilterRow)
                {
                    if (hasFilter)
                    {
                        <MudIconButton Class="filter-button filtered" Icon="@Icons.Material.Filled.FilterAlt" Size="@Size.Small" OnClick="@OpenFilters"></MudIconButton>
                    }
                    else if (showFilterIcon)
                    {
                        <MudIconButton Class="filter-button" Icon="@Icons.Material.Outlined.FilterAlt" Size="@Size.Small" OnClick="@OpenFilters"></MudIconButton>
                    }
                }

                @if (showColumnOptions)
                {
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" AnchorOrigin="Origin.BottomCenter" Dense="true">
                        <MudMenuItem Disabled="@(_initialDirection == SortDirection.None)" OnClick="@RemoveSortAsync">Unsort</MudMenuItem>
                        @if (filterable && DataGrid.FilterMode != DataGridFilterMode.ColumnFilterRow)
                        {
                            <MudMenuItem OnClick="@AddFilter">Filter</MudMenuItem>
                        }
                        @if (hideable)
                        {
                            <MudMenuItem OnClick="@HideColumnAsync">Hide</MudMenuItem>
                        }
                        @if (groupable)
                        {
                            if (Column?.grouping ?? false)
                            {
                                <MudMenuItem OnClick="@UngroupColumn">Ungroup</MudMenuItem>
                            }
                            else
                            {
                                <MudMenuItem OnClick="@GroupColumn">Group</MudMenuItem>
                            }
                        }
                    </MudMenu>
                }
            </span>
        </span>
        @if (resizable)
        {
            <div @onmousedown=OnResizerMouseDown @onmouseover=OnResizerMouseOver @onmouseleave=OnResizerMouseLeave
                class="@_resizerClass" style="@_resizerStyle" />
        }

        @if (filterable && DataGrid.FilterMode == DataGridFilterMode.ColumnFilterMenu)
        {
            <MudOverlay Visible="@_filtersMenuVisible" OnClick="@(() => _filtersMenuVisible = false)" />
            <MudPopover Open="@_filtersMenuVisible" AnchorOrigin="@Origin.BottomRight" TransformOrigin="@Origin.TopRight" Class="pa-4 column-filter-popup">
                @if (Column.FilterTemplate != null)
                {
                    @Column.FilterTemplate(Column.filterContext) 
                }
                else
                {
                    <MudGrid>
                        <MudItem xs="12">
                            <Filter T="T" Column="@Column" @bind-Operator="@Column.filterContext.FilterDefinition.Operator" @bind-Value="@Column.filterContext.FilterDefinition.Value" />
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-end">
                            <MudButton Class="clear-filter-button" OnClick="@ClearFilter">Clear</MudButton>
                            <MudButton Class="apply-filter-button" Color="@Color.Primary" OnClick="@ApplyFilter">Filter</MudButton>
                        </MudItem>
                    </MudGrid>
                }
            </MudPopover>
        }
    </th>
}