@namespace MudBlazor
@inherits MudBasePicker


<MudPicker @ref="Picker" Class="@Class" PickerVariant="@PickerVariant" 
        Orientation="@Orientation" Label="@Label" @bind-Value="@Value" HelperText="@HelperText" InputVariant="@InputVariant" 
        Editable="@Editable" Disabled="@Disabled" Adornment="@Adornment" IconSize="@IconSize" InputIcon="@InputIcon" 
        Elevation="@Elevation" Square="@Square" Rounded="@Rounded" PickerOpened="OnPickerOpened">
    <MudPickerToolbar Class="@ToolbarClass" DisableToolbar="@DisableToolbar" Orientation="@Orientation" Color="@Color">
        <div class="mud-timepicker-hourminute">
            <MudButton Variant="Variant.Text" Color="Color.Inherit" Class="@HoursButtonClass" OnClick="@OnHourClick">@GetHourString()</MudButton>
            <MudText Typo="Typo.h2" Class="mud-timepicker-separator">:</MudText>
            <MudButton Variant="Variant.Text" Color="Color.Inherit" Class="@MinuteButtonClass" OnClick="@OnMinutesClick">@GetMinuteString()</MudButton>
        </div>
        @if (AmPm)
        {
            <div class="mud-timepicker-ampm">
                <MudButton Variant="Variant.Text" Color="Color.Inherit" Class="@AmButtonClass" OnClick="@OnAmClicked">AM</MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Inherit" Class="@PmButtonClass" OnClick="@OnPmClicked">PM</MudButton>
            </div>
        }
    </MudPickerToolbar>
    <MudPickerContent>
        <div class="mud-picker-time-container">
            <div class="mud-picker-time-clock">
                <div role="menu" tabindex="-1" class="mud-picker-time-clock-mask" @onmousedown="@OnMouseDown" @onmouseup="@OnMouseUp">
                    <div class="@GetClockPinColor()"></div>
                    <div class="@GetClockPointerColor()" style="height: @GetPointerHeight(); transform: @GetPointerRotation()">
                        <div class="@GetClockPointerThumbColor()"></div>
                    </div>
                    <div class="@HourDialClass">
                        @if (AmPm)
                        {
                            @*Hours from 1 to 12*@
                            for(int i = 1; i <= 12; ++i)
                            {
                                var angle =  (6 - i) * 30;
                                <MudText Class="@GetNumberColor(i)" Style="@($"transform: translate{Math.Sin(angle) * 109}px, {(Math.Cos(angle) + 1) * 109 + 5}px);")">i</MudText>
                            }
                            for(int i = 1; i <= 12; ++i)
                            {
                                var _i = i;
                                <div class="mud-picker-stick mud-hour" style="@($"transform: rotateZ({i * 30}deg);")" @onclick="@(() => OnMouseClickHour(_i))" @onmouseover="@(() => OnMouseOverHour(_i))" @onclick:stopPropagation="true"></div>
                            }
                        }
                        else
                        {
                            @*Hours from 13 to 24 (00)*@
                            for(int i = 1; i <= 12; ++i)
                            {
                                var angle =  (6 - i) * 30;
                                <MudText Class="@GetNumberColor((i + 12) % 24)" Style="@($"transform: translate{Math.Sin(angle) * 109}px, {(Math.Cos(angle) + 1) * 109 + 5}px);")">((i + 12) % 24).ToString("D2")</MudText>
                            }
                            @*Hours from 1 to 12*@
                            for(int i = 1; i <= 12; ++i)
                            {
                                var angle =  (6 - i) * 30;
                                <MudText Class="@GetNumberColor(i)" Typo="Typo.body2" Style="@($"transform: translate{Math.Sin(angle) * 74}px, {(Math.Cos(angle) + 1) * 138 + 40}px);")">i.ToString("D2")</MudText>
                            }
                            for(int i = 1; i <= 12; ++i)
                            {
                                var _i = i;
                                <div class="mud-picker-stick" style="@($"transform: rotateZ({i * 30}deg);")">
                                    <div class="mud-picker-stick-inner mud-hour" @onclick="@(() => OnMouseClickHour(_i))" @onmouseover="@(() => OnMouseOverHour(_i))" @onclick:stopPropagation="true"></div>
                                    <div class="mud-picker-stick-outer mud-hour" @onclick="@(() => OnMouseClickHour(_i + 12))" @onmouseover="@(() => OnMouseOverHour(_i + 12))" @onclick:stopPropagation="true"></div>
                                </div>
                            }
                        }
                    </div>
                    <div class="@MinuteDialClass">   
                        @*Minutes from 05 to 60 (00) - step 5*@                     
                        @for (int i = 0; i < 12; ++i)
                        {
                            var angle =  (6 - i) * 30;
                            <MudText Class="@GetNumberColor(i * 5)" Style="@($"transform: translate{Math.Sin(angle) * 109}px, {(Math.Cos(angle) + 1) * 109 + 5}px);")">(i * 5).ToString("D2")</MudText>
                        }
                        @for (int i = 0; i < 60; ++i)
                        {
                            var _i = i;
                            <div class="mud-picker-stick mud-minute" style="@($"transform: rotateZ({i * 6}deg);")" @onclick="@(() => OnMouseClickMinute(_i))" @onmouseover="@(() => OnMouseOverMinute(_i))" @onclick:stopPropagation="true"></div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </MudPickerContent>
</MudPicker>
