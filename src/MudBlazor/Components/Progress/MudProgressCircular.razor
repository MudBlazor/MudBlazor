@namespace MudBlazor
@using MudBlazor.Utilities;
@using MudBlazor.Extensions;
@inherits MudComponentBase

<div class="@DivClassname" role="progressbar" style="width: 40px; height: 40px; transform: rotate(-90deg);" aria-valuenow="@Value">
    <svg class="mud-progress-circular-svg" viewBox="22 22 44 44">
        @if (Indeterminate)
        {
            <circle class="@SvgClassname" cx="44" cy="44" r="20.2" fill="none" stroke-width="@StrokeWidth"></circle>
        }
        else
        {
            <circle class="@SvgClassname" cx="44" cy="44" r="20.2" fill="none" stroke-width="@StrokeWidth" style="stroke-dasharray: @MagicNumber; stroke-dashoffset: @_svg_value;"></circle>
        }
    </svg>
</div>


@code {
    private const int MagicNumber = 126; // weird, but required for the SVG to work

    protected string DivClassname =>
    new CssBuilder("mud-progress-circular")
        .AddClass($"mud-{Color.ToDescriptionString()}-text")
        .AddClass($"mud-progress-indeterminate", Indeterminate)
        .AddClass($"mud-progress-static", !Indeterminate)
        .AddClass(Class)
    .Build();

    protected string SvgClassname =>
        new CssBuilder("mud-progress-circular-circle")
            .AddClass($"mud-progress-indeterminate", Indeterminate)
        .AddClass($"mud-progress-static", !Indeterminate)
        .Build();

    /// <summary>
    /// The color of the component. It supports the theme colors.
    /// </summary>
    [Parameter] public Color Color { get; set; } = Color.Default;

    /// <summary>
    /// The size of the component.
    /// </summary>
    [Parameter] public Size Size { get; set; } = Size.Medium;
    [Parameter] public bool Indeterminate { get; set; }

    [Parameter] public double Minimum { get; set; } = 0.0;

    [Parameter] public double Maximum { get; set; } = 100.0;

    private int _svg_value;
    private double _value;

    [Parameter]
    public double Value
    {
        get => _value;
        set
        {
            if (_value.Equals(value))
                return;
            _value = value;
            _svg_value = ToSvgValue(_value);
            InvokeAsync(StateHasChanged);
        }
    }

    private int ToSvgValue(double in_value)
    {
        var value = Math.Min(Math.Max(Minimum, in_value), Maximum);
        // calculate fraction, which is a value between 0 and 1
        var fraction = (value - Minimum) / (Maximum - Minimum);
        // now project into the range of the SVG value (126 .. 0)
        return (int)Math.Round(MagicNumber - MagicNumber * fraction);
    }

    [Parameter] public int StrokeWidth { get; set; } = 3;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _svg_value = ToSvgValue(_value);
    }

}
