@namespace MudBlazor
@using MudBlazor.Utilities
@inherits MudComponentBase
@implements IAsyncDisposable

@code {
    private bool _disposed;

    [CascadingParameter]
    private MudStepper Parent { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string SecondaryText { get; set; }
    
    /// <summary>
    /// The color of the completed step. It supports the theme colors.
    /// </summary>
    [Parameter]
    public Color? CompletedStepColor { get; set; }

    /// <summary>
    /// The color of the error step. It supports the theme colors.
    /// </summary>
    [Parameter]
    public Color? ErrorStepColor { get; set; }
    
    [Parameter]
    public bool Skippable { get; set; }


    private bool _completed;
    
    /// <summary>
    /// Sets whether the step is completed, this can be used for reviving lost position of process. Default is false.
    /// </summary>
    [Parameter]
    public bool Completed { get; set; }
    
    [Parameter]
    public EventCallback<bool> CompletedChanged { get; set; }

    [Parameter]
    public bool Disabled { get; set; }
    
    [Parameter]
    public bool HasError { get; set; }

    /// <summary>
    /// Raised when tab is clicked TODO: Probably should be called OnActivated or OnCLicked
    /// </summary>
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Parent?.AddStep(this);
    }

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        
        await SetCompleted(Completed);
    }


    public async Task SetCompleted(bool value)
    {
        if (_completed != value)
        {
            _completed = value;
            Completed = _completed;
            await CompletedChanged.InvokeAsync(Completed);
            StateHasChanged();
        }
    }

    internal string Styles => new StyleBuilder()
        .AddStyle(Style)
        .Build();

    internal string LabelIconClassname =>
        new CssBuilder("mud-stepper-nav-step-label-icon")
            .AddClass($"mud-{(CompletedStepColor.HasValue ? CompletedStepColor.Value.ToDescriptionString() : Parent?.CompletedStepColor.ToDescriptionString())}", Completed && Parent?.CompletedStepColor != Color.Default && Parent?.ActiveStep != this)
            .AddClass($"mud-{(ErrorStepColor.HasValue ? ErrorStepColor.Value.ToDescriptionString() : Parent?.ErrorStepColor.ToDescriptionString())}", !Completed && HasError)
            .AddClass($"mud-{Parent?.CurrentStepColor.ToDescriptionString()}", Parent?.ActiveStep == this)
            .Build();

    internal string LabelContentClassname =>
        new CssBuilder("mud-stepper-nav-step-label-content")
            .AddClass($"mud-{(ErrorStepColor.HasValue ? ErrorStepColor.Value.ToDescriptionString() : Parent?.ErrorStepColor.ToDescriptionString())}-text", !Completed && HasError)
            .Build();
    
    internal string Classname => new CssBuilder("mud-stepper-content")
        .AddClass(Parent?.StepClass, !string.IsNullOrEmpty(Parent?.StepClass))
        .AddClass(Class)
        .Build();

    
    public async ValueTask DisposeAsync()
    {
        if(_disposed)
            return;

        _disposed = true;
        if (Parent is not null)
            await Parent.RemovePanel(this);
    }

}