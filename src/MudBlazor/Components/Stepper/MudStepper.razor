@namespace MudBlazor
@using MudBlazor.Utilities
@inherits MudComponentBase

@inject InternalMudLocalizer Localizer

<div @attributes="@UserAttributes" class="@Classname" style="@Style">

    <div class="@NavClassname" role="tablist">
        @foreach (var step in _steps) {
            bool isActive = ActiveStep == step;
            string stepClassname = new CssBuilder()
                .AddClass("mud-stepper-nav-step")
                .AddClass("active", isActive)
                .AddClass("mud-ripple", NonLinear && !step.Disabled)
                .AddClass("mud-stepper-nav-step-disabled", step.Disabled)
                .AddClass("mud-stepper-nav-step-error", step.HasError)
                .AddClass("mud-stepper-nav-step-completed", step.Completed)
                .Build();

            <div class="@stepClassname" role="tab" aria-controls="@step.Title" aria-selected="@(isActive ? "true" : "false")"
                 @onclick="@(async e => await OnStepClickAsync(step, e))">
                @RenderStepLabel(step, isActive)
            </div>

            if (Vertical) {
                @StepContent(step)
            }

            if (_steps[^1] != step) {
                if (ConnectorTemplate is not null) {
                    @ConnectorTemplate(step)
                }
                else {
                    <div class="mud-stepper-nav-connector">
                        <div class="mud-stepper-nav-connector-line"></div>
                    </div>
                }
            }
        }
    </div>

    @if (!Vertical && ActiveStep is not null) {
        if (IsCompleted && CompletedContent is not null) {
            <div class="@StepClassname" style="@StepStyle">
                @CompletedContent
            </div>
        }
        else {
            @StepContent(ActiveStep)
        }
    }
    <CascadingValue Value="this" IsFixed="true">
        @ChildContent
    </CascadingValue>


    <MudCardActions>
        <MudButton OnClick="PreviousStepAsync" Disabled="@(!PreviousStepEnabled)">@Localizer["MudStepper.Previous"]</MudButton>
        <MudSpacer/>
        @if (!IsCompleted) {
            <MudButton OnClick="SkipCurrentStepAsync" Disabled="@(!IsCurrentStepSkippable)">@Localizer["MudStepper.Skip"]</MudButton>
            <MudButton OnClick="NextStepAsync" Color="Color.Primary" Disabled="@(!CanGoToNextStep)">@Localizer["MudStepper.Next"]</MudButton>
        }
        else {
            <MudButton OnClick="@(async () => await ResetAsync())">Reset</MudButton>
        }
    </MudCardActions>
</div>

@code {

    RenderFragment RenderStepLabel(MudStep step, bool isActive) =>
        @<div class="mud-stepper-nav-step-label">
            @if (LabelTemplate is not null) {
                @LabelTemplate(step)
            }
            else {
                <div class="@step.LabelIconClassname">
                    @if (step.Completed) {
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Outlined.Done"/>
                    }
                    else if (step.HasError) {
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Outlined.PriorityHigh"/>
                    }
                    else {
                        <MudText Typo="Typo.caption">@(_steps.IndexOf(step) + 1)</MudText>
                    }
                </div>
            }
            @if (TitleTemplate is not null) {
                @TitleTemplate(step)
            }
            else {
                <div class="@step.LabelContentClassname">

                    <MudText Typo="@(isActive ? Typo.subtitle2 : Typo.body2)"
                             Style="line-height: var(--mud-typography-body2-lineheight)">
                        @step.Title
                    </MudText>
                    @if (!string.IsNullOrEmpty(step.SecondaryText)) {
                        <MudText Typo="Typo.caption">@step.SecondaryText</MudText>
                    }
                </div>
            }
    </div>;

    RenderFragment StepContent(MudStep step) =>
        @<div @attributes="@step.UserAttributes" class="@step.Classname" style="@step.Styles" role="tabpanel" aria-labelledby="@step.Title" tabindex="0">
            @if (Vertical) {
                <MudCollapse Expanded="step == ActiveStep">
                    @step.ChildContent
                </MudCollapse>
            }
            else {
                @step.ChildContent
            }
    </div>;

}