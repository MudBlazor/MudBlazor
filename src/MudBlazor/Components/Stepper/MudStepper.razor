@namespace MudBlazor
@using MudBlazor.Utilities
@inherits MudComponentBase

<div @attributes="@UserAttributes" class="@Classname" style="@Style" role="tablist">
    @foreach (var step in _steps)
    {
        bool isActive = ActiveStep == step;
        string stepClassname = new CssBuilder()
            .AddClass("mud-stepper-step")
            .AddClass("active", isActive)
            .AddClass("mud-ripple", NonLinear)
            .Build();

        @if (NonLinear)
        {
            <div class="@stepClassname" role="tab" aria-controls="" aria-selected="@isActive"
                 @onclick="@((e) => ProcessStep(step, e, StepInteractionType.Activate))">
                @RenderStepLabel(step, isActive)
            </div>
        }
        else
        {
            <div class="mud-stepper-step @(isActive ? "active" : "")" role="tab" aria-controls="" aria-selected="@isActive">
                @RenderStepLabel(step, isActive)
            </div>
        }

        if (_steps[^1] != step)
        {
            <div class="mud-stepper-connector">
                <div class="mud-stepper-connector-line"></div>
            </div>
        }
    }
</div>

<CascadingValue Value="this" IsFixed="true">
    @ChildContent
    @if (IsCompleted)
    {
        @CompletedContent
    }
</CascadingValue>


<MudCardActions>
    <MudButton OnClick="PreviousStep" Disabled="!CanGoBack">Previous</MudButton>
    <MudSpacer/>
    @if (!IsCompleted)
    {
        <MudButton OnClick="SkipCurrentStep" Disabled="!IsCurrentStepSkippable">Skip</MudButton>
        <MudButton OnClick="CompleteCurrentStep" Color="Color.Primary">Next</MudButton>
    }
    else
    {
        <MudButton OnClick="Reset">Reset</MudButton>
    }
</MudCardActions>

@code {

    RenderFragment RenderStepLabel(MudStepperStep step, bool isActive) =>
        @<div class="mud-stepper-step-label">
            <div class="@step.LabelIconClassname">
                @if (step.Completed)
                {
                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Outlined.Done"/>
                }
                else
                {
                    <MudText Typo="Typo.caption">@(_steps.IndexOf(step) + 1)</MudText>
                }
            </div>
            <div class="mud-stepper-step-label-content">
                <MudText Typo="@(isActive ? Typo.subtitle2 : Typo.body2)" Color="Color.Default"
                         Style="line-height: var(--mud-typography-body2-lineheight)">
                    @step.Title
                </MudText>
                @if (!string.IsNullOrEmpty(step.SecondaryText))
                {
                    <MudText Typo="Typo.caption">@step.SecondaryText</MudText>
                }
            </div>
        </div>;

}