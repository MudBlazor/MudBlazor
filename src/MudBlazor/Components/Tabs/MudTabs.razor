@namespace MudBlazor

@inherits MudComponentBase

<div @attributes="UserAttributes" class="@TabsClassnames" style="@Style">
    <CascadingValue Value="this" IsFixed="true">
        <div class="@TabBarClassnames">
            <div class="mud-tabs-tabbar-inner" style="@MaxHeightStyles">
                @if (HeaderPosition == TabHeaderPosition.Before && Header != null)
                {
                    <div class="mud-tabs-header mud-tabs-header-before">
                        @Header(this)
                    </div>
                }
                @if (_showScrollButtons)
                {
                    <MudIconButton Icon="@_prevIcon"
                                   Class="mud-tabs-scroll-button"
                                   Color="@ScrollIconColor"
                                   OnClick="@(_ => ScrollPrev())"
                                   Disabled="@_prevButtonDisabled" />
                }
                <div @ref="@_tabsContentRef" class="mud-tabs-tabbar-content">
                    <div aria-orientation="@GetAriaOrientation()"
                         class="@WrapperClassnames"
                         role="tablist"
                         style="@WrapperScrollStyle">
                        @foreach (var panel in _panels)
                        {
                            if (panel.TabContent == null && panel.TabWrapperContent == null && !string.IsNullOrWhiteSpace(panel.ToolTip))
                            {
                                <MudTooltip @key="@panel"
                                            Placement="@GetTooltipPlacement()"
                                            Text="@panel.ToolTip">
                                    @RenderTab(panel)
                                </MudTooltip>
                            }
                            else
                            {
                                <div @key="@panel"
                                     class="d-inline-block"
                                     role="none"
                                     style="width: fit-content;">
                                    @if (panel.TabWrapperContent is null)
                                    {
                                        @RenderTab(panel)
                                    }
                                    else
                                    {
                                        @panel.TabWrapperContent(RenderTab(panel))
                                    }
                                </div>
                            }
                        }
                        @if (!HideSlider && IsSliderPositionDetermined)
                        {
                            <div class="@SliderClass"
                                 role="none"
                                 style="@SliderStyle">
                            </div>
                        }
                    </div>
                </div>
                @if (_showScrollButtons)
                {
                    <MudIconButton Icon="@_nextIcon"
                                   Class="mud-tabs-scroll-button"
                                   Color="@ScrollIconColor"
                                   OnClick="@(_ => ScrollNext())"
                                   Disabled="@_nextButtonDisabled" />
                }
                @if (HeaderPosition == TabHeaderPosition.After && Header != null)
                {
                    <div class="mud-tabs-header mud-tabs-header-after">
                        @Header(this)
                    </div>
                }
            </div>
        </div>
        @if (PrePanelContent != null)
        {
            @PrePanelContent(ActivePanel)
        }
        <div class="@PanelsClassnames"
             role="none">
            @ChildContent
        </div>
    </CascadingValue>
</div>

@code {
#nullable enable
    // ReSharper disable once InconsistentNaming UnusedParameter.local
    private RenderFragment RenderTab(MudTabPanel panel) => __builder =>
    {
        <div @ref="panel.PanelRef"
             aria-controls="@GetTabPanelId(panel)"
             aria-selected="@((panel == ActivePanel).ToString().ToLowerInvariant())"
             id="@GetTabId(panel)"
             class="@GetTabClass(panel)"
             role="tab"
             style="@GetTabStyle(panel)"
             tabindex="@GetTabindexForTab(panel)"
             @onclick="@(e => ActivatePanel(panel, e))">
            @if (TabPanelHeaderPosition == TabHeaderPosition.Before && TabPanelHeader != null)
            {
                <div class="mud-tabs-panel-header mud-tabs-panel-header-before">
                    @TabPanelHeader(panel)
                </div>
            }
            @if (panel.TabContent != null)
            {
                @panel.TabContent
            }
            @if (!string.IsNullOrWhiteSpace(panel.Icon))
            {
                <MudIcon Icon="@panel.Icon"
                         Color="@GetPanelIconColor(panel)"
                         Class="@(string.IsNullOrWhiteSpace(panel.Text) ? string.Empty : "mud-tab-icon-text")" />
            }
            @if (!string.IsNullOrWhiteSpace(panel.Text))
            {
                @panel.Text
            }
            @if (panel.BadgeData != null || panel.BadgeDot)
            {
                <MudBadge Dot="@panel.BadgeDot"
                          Content="@panel.BadgeData"
                          Color="@panel.BadgeColor"
                          Class="mud-tab-badge" />
            }
            @if (TabPanelHeaderPosition == TabHeaderPosition.After && TabPanelHeader != null)
            {
                <div class="mud-tabs-panel-header mud-tabs-panel-header-after"
                     role="none">
                    @TabPanelHeader(panel)
                </div>
            }
        </div>
    };
}