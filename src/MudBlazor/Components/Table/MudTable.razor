@namespace MudBlazor
@inherits MudTableBase
@using MudBlazor.Extensions
@typeparam T

<div @attributes="UserAttributes" class="@Classname" style="@Style">
    <CascadingValue Value="TableContext" IsFixed="true">
        @if (ToolBarContent != null)
        {
            <MudToolBar Class="mud-table-toolbar">
                @ToolBarContent
            </MudToolBar>
        }
        @if (Context.SortLabels.Any())
        {
            <div Class="mud-table-smalldevices-sortselect">
                <MudSelect Value="@Context.CurrentSortLabel" Label="@SortLabel" ValueChanged="@(v => Context.SetSortFunc(v, override_direction_none:true))" T="MudTableSortLabel<T>">
                    @foreach (var label in Context.SortLabels)
                    {
                        <MudSelectItem Value="@label">@label.ChildContent</MudSelectItem>
                    }
                </MudSelect>
            </div>

        }
        <div class="mud-table-container" style="@TableStyle">
            <table class="mud-table-root">
                @if (ColGroup != null)
                {
                    <colgroup>
                        @ColGroup
                    </colgroup>
                }
                @if (HeaderContent != null)
                {
                    <thead class="mud-table-head">
                        <MudTr IsHeader="true" IsCheckable="MultiSelection" IsEditable="RowEditingTemplate != null" IsCheckedChanged="@OnHeaderCheckboxClicked" @ref="TableContext.HeaderRow">
                            @HeaderContent
                        </MudTr>
                    </thead>
                }
                <tbody class="mud-table-body">
                    @if (CurrentPageItems != null)
                    {
                        @foreach (var item in CurrentPageItems)
                        {
                            <MudTr Item="item" @key="item" IsCheckable="MultiSelection" IsEditable="RowEditingTemplate != null" IsCheckedChanged="@((value) => { var x = item; OnRowCheckboxChanged(value, x); })">
                                @if (RowEditingTemplate != null && object.Equals(_editingItem, item))
                                    @RowEditingTemplate(item)
                                    else
                                        @RowTemplate(item)
                            </MudTr>

                            @*@if(RowEditingTemplate != null && object.Equals(_editingItem, item))
                                {
                                    <MudTr Item="item" @key="item" IsCheckable="MultiSelection" IsEditable="RowEditingTemplate != null" IsEditing="true" IsCheckedChanged="@((value) => {var x=item; OnRowCheckboxChanged(value, x); })">
                                            @RowEditingTemplate(item)
                                    </MudTr>
                                }
                                else
                                {
                                    <MudTr Item="item" @key="item" IsCheckable="MultiSelection" IsEditable="RowEditingTemplate != null" IsCheckedChanged="@((value) => {var x=item; OnRowCheckboxChanged(value, x); })">
                                            @RowTemplate(item)
                                    </MudTr>
                                }*@
                        }
                    }
                </tbody>
            </table>
        </div>
        @if (PagerContent != null)
        {
            <div class="mud-table-pagination">
                @PagerContent
            </div>
        }
    </CascadingValue>
</div>


@code
{
    // note: the MudTable code is split. Everything that has nothing to do with the type parameter of MudTable<T> is in MudTableBase

    /// <summary>
    /// Defines how a table row looks like. Use MudTd to define the table cells and their content.
    /// </summary>
    [Parameter] public RenderFragment<T> RowTemplate { get; set; }

    /// <summary>
    /// Defines how a table row looks like in edit mode (for selected row). Use MudTd to define the table cells and their content.
    /// </summary>
    [Parameter] public RenderFragment<T> RowEditingTemplate { get; set; }

    /// <summary>
    /// The data to display in the table. MudTable will render one row per item
    /// </summary>
    [Parameter] public IEnumerable<T> Items { get; set; }

    /// <summary>
    /// A function that returns whether or not an item should be displayed in the table. You can use this to implement your own search function.
    /// </summary>
    [Parameter] public Func<T, bool> Filter { get; set; } = null;

    /// <summary>
    /// Returns the item which was last clicked on in single selection mode (that is, if MultiSelection is false)
    /// </summary>
    [Parameter]
    public T SelectedItem
    {
        get => _selectedItem;
        set
        {
            if (Object.ReferenceEquals(SelectedItem, value))
                return;
            _selectedItem = value;
            SelectedItemChanged.InvokeAsync(value);
        }
    }
    private T _selectedItem;

    /// <summary>
    /// Callback is called when a row has been clicked and returns the selected item.
    /// </summary>
    [Parameter] public EventCallback<T> SelectedItemChanged { get; set; }

    /// <summary>
    /// If MultiSelection is true, this returns the currently selected items. You can bind this property and the initial content of the HashSet you bind it to will cause these rows to be selected initially.
    /// </summary>
    [Parameter]
    public HashSet<T> SelectedItems
    {
        get
        {
            if (!MultiSelection)
                return new HashSet<T>(new T[] { _selectedItem });
            else
                return Context.Selection;
        }
        set
        {
            if (value == Context.Selection)
                return;
            if (value == null)
            {
                if (Context.Selection.Count == 0)
                    return;
                Context.Selection = new HashSet<T>();
            }
            else
                Context.Selection = value;
            SelectedItemsChanged.InvokeAsync(Context.Selection);
            InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// Callback is called whenever items are selected or deselected in multi selection mode.
    /// </summary>
    [Parameter] public EventCallback<HashSet<T>> SelectedItemsChanged { get; set; }

    protected IEnumerable<T> FilteredItems
    {
        get
        {
            if (Filter == null)
                return Context.Sort(Items);
            return Context.Sort(Items.Where(Filter));
        }
    }

    protected IEnumerable<T> CurrentPageItems
    {
        get
        {
            if (@PagerContent == null)
                return FilteredItems; // we have no pagination
            return GetItemsOfPage(CurrentPage, RowsPerPage);
        }
    }

    protected IEnumerable<T> GetItemsOfPage(int n, int pageSize)
    {
        if (n < 0 || pageSize <= 0)
            return new T[0];
        return FilteredItems.Skip(n * pageSize).Take(pageSize);
    }

    protected override int NumPages => (int)Math.Ceiling(FilteredItems.Count() / (double)RowsPerPage);

    public override int GetFilteredItemsCount() => FilteredItems.Count();

    public override void SetSelectedItem(object item)
    {
        SelectedItem = item.As<T>();
    }

    public override void SetEditingItem(object item)
    {
        if (!Object.ReferenceEquals(_editingItem, item))
            _editingItem = item;
    }

    public override TableContext TableContext
    {
        get
        {
            Context.Table = this;
            Context.TableStateHasChanged = this.StateHasChanged;
            return Context;
        }
    }

    // TableContext provides shared functionality between all table sub-components
    public TableContext<T> Context { get; } = new TableContext<T>();

    private void OnRowCheckboxChanged(bool value, T item)
    {
        if (value)
            Context.Selection.Add(item);
        else
            Context.Selection.Remove(item);
        SelectedItemsChanged.InvokeAsync(SelectedItems);
    }

    private void OnHeaderCheckboxClicked(bool value)
    {
        if (!value)
            Context.Selection.Clear();
        else
        {
            foreach (var item in FilteredItems)
                Context.Selection.Add(item);
        }
        Context.UpdateRowCheckBoxes();
        SelectedItemsChanged.InvokeAsync(SelectedItems);
    }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        TableContext.UpdateRowCheckBoxes();
        return base.OnAfterRenderAsync(firstRender);
    }

}
