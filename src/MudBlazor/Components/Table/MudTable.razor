@namespace MudBlazor
@inherits MudTableBase
@using MudBlazor.Extensions
@using MudBlazor.Utilities
@typeparam T

<div @attributes="UserAttributes" class="@Classname" style="@Style">
    <CascadingValue Value="TableContext" IsFixed="true">
        @if (ToolBarContent != null)
        {
            <MudToolBar Class="mud-table-toolbar">
                @ToolBarContent
            </MudToolBar>
        }
        @if (Context.SortLabels.Any())
        {
            <div Class="mud-table-smalldevices-sortselect">
                <MudSelect Value="@Context.CurrentSortLabel" Label="@SortLabel" ValueChanged="@(v => Context.SetSortFunc(v, override_direction_none:true))" T="MudTableSortLabel<T>">
                    @foreach (var label in Context.SortLabels)
                    {
                        <MudSelectItem Value="@label">@label.ChildContent</MudSelectItem>
                    }
                </MudSelect>
            </div>

        }
        <div class="mud-table-container" style="@TableStyle @(GetHorizontalScrollbarStyle())">
            <table class="mud-table-root">
                @if (ColGroup != null)
                {
                    <colgroup>
                        @ColGroup
                    </colgroup>
                }
                @if (HeaderContent != null)
                {
                    <thead class="@HeadClassname">
                        @if (CustomHeader)
                        {
                            @HeaderContent
                        }
                        else
                        {
                            <MudTHeadRow IsCheckable="MultiSelection">
                                @HeaderContent
                            </MudTHeadRow>
                        }
                    </thead>
                }
                <tbody class="mud-table-body">
                    @if (Loading)
                    {
                        <tr>
                            <td colspan="1000">
                                <MudProgressLinear Color="@LoadingProgressColor" Indeterminate="true" />
                            </td>
                        </tr>
                    }
                    @if(GroupBy != null)
                    {
                        @RenderGroupedRows(GroupBy, FilteredItems)
                    }
                    else
                    {
                        @if (CurrentPageItems != null)
                        {
                            @RenderRows(CurrentPageItems)
                        }
                    }
                </tbody>
                @if (FooterContent != null)
                {
                    <tfoot class="@FootClassname">
                        @if (CustomFooter)
                        {
                            @FooterContent
                        }
                        else
                        {
                            <MudTFootRow IsCheckable="MultiSelection">
                                @FooterContent
                            </MudTFootRow>
                        }
                    </tfoot>
                }
            </table>
        </div>
        @if (PagerContent != null)
        {
            <div class="mud-table-pagination">
                @PagerContent
            </div>
        }
    </CascadingValue>
</div>

@code {

    // moved to code to avoid repeatidelly code on markup block
    private RenderFragment RenderRows(IEnumerable<T> source)
    {
        var rowIndex = 0;
        return @<text>
            @foreach (T item in source)
            {
                var rowClass = new CssBuilder(RowClass).AddClass(RowClassFunc?.Invoke(item, rowIndex)).Build();
                var rowStyle = new StyleBuilder().AddStyle(RowStyle).AddStyle(RowStyleFunc?.Invoke(item, rowIndex)).Build();
                <MudTr Class="@rowClass" Style="@rowStyle" Item="item" @key="item" IsCheckable="MultiSelection" IsEditable="RowEditingTemplate != null" 
                       IsCheckedChanged="((value) => { var x = item; OnRowCheckboxChanged(value, x); })">

                        @if ((!ReadOnly) && RowEditingTemplate != null && object.Equals(_editingItem, item))
                        {
                            <CascadingValue Value="Validator" IsFixed="true">
                                @RowEditingTemplate(item)
                            </CascadingValue>
                        }
                        else
                        {
                            @RowTemplate(item)
                        }
                </MudTr>
                @if (ChildRowContent != null)
                {
                    @ChildRowContent(item)
                }
                rowIndex++;
            }
        </text>;
    }

    // rendering groups here to allow recursive calls
    private RenderFragment RenderGroupedRows(TableGroupDefinition<T> parent, IEnumerable<T> source)
    {
        IEnumerable<IGrouping<object, T>> groupitems = GetItemsOfGroup(parent, source);

        return @<text>
            @foreach (var group in groupitems)
            {
                var items = group.ToList();

                // Group Header
                <MudTr IsGroup IsHeader Item="group" @key="@(new object[] { "header", group })" IsCheckable="MultiSelection" IsEditable="false" Class="@GroupHeaderClass" Style="@GroupHeaderStyle"
                       IsCheckedChanged="((value) => { var x = items; OnGroupHeaderCheckboxClicked(value, x); })">
                    @GroupHeaderTemplate(group)
                </MudTr>

                if (parent.InnerGroup != null)
                {
                    @RenderGroupedRows(parent.InnerGroup, items);
                }
                else
                {
                    // Group Items
                    @RenderRows(items);
                }

                // Group Footer
                <MudTr IsGroup IsHeader Item="group" @key="@(new object[] { "footer", group })" IsCheckable="false" IsEditable="false" Class="@GroupFooterClass" Style="@GroupFooterStyle">
                    @if (MultiSelection)
                    {
                        <MudTd/>
                    }
                    @GroupFooterTemplate(group)
                </MudTr>
            }
        </text>;
    }

}