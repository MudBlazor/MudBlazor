@using MudBlazor.Internal
@namespace MudBlazor
@inherits MudFormComponent<T, string>
@typeparam T


@code
{

    protected virtual RenderFragment InputContent =>
        // note: Mask needs to remain before Text!
        @<MudTextField 
             T="string" 
             @ref="_inputReference" 
             @attributes="UserAttributes" 
             Style="@Style"
             Label="@Label" 
             Mask="@_mask"
             @bind-Value="@Text" 
             Placeholder="@Placeholder"
             HelperText="@HelperText" 
             HelperTextOnFocus="@HelperTextOnFocus" 
             Variant="@Variant" 
             ReadOnly="@(!Editable || ReadOnly)" 
             Disabled="@Disabled"
             OnAdornmentClick="ToggleState" 
             Adornment="@Adornment"
             AdornmentIcon="@AdornmentIcon" 
             AdornmentColor="@AdornmentColor" 
             AdornmentAriaLabel="@AdornmentAriaLabel"
             IconSize="@IconSize" 
             Margin="@Margin" 
             Required="@Required" 
             RequiredError="@RequiredError" 
             Error="@Error" 
             ErrorText="@ErrorText" 
             @onclick="@(() => { if (!Editable) ToggleState(); })" 
             @onkeydown="HandleKeyDown" 
             />;

    protected virtual RenderFragment PickerContent => null;

    protected virtual RenderFragment Render =>
    @<CascadingValue Value="@this" IsFixed="true">
        <div class="@PickerClass" id="@_elementId">
            @if (PickerVariant != PickerVariant.Static)
            {
                <CascadingValue Name="Standalone" Value="false" IsFixed="true">
					@if(InputContent != null) {    
						@InputContent
					}
                </CascadingValue>
            }
            @if (IsOpen && PickerVariant == PickerVariant.Inline)
            {
				<MudPopover Open="IsOpen" Fixed="true" AnchorOrigin="@(AnchorOrigin)" TransformOrigin="@(TransformOrigin)" OverflowBehavior="OverflowBehavior.FilpOnOpen" Paper="false">
				   <div @ref="_pickerInlineRef" class="@PickerInlineClass">
					   <MudPaper @attributes="UserAttributes" Class="@PickerPaperClass" Elevation="@_pickerElevation" Square="@_pickerSquare">
						   <div class="@PickerContainerClass">
							   @if(PickerContent != null){
								   @PickerContent
							   }
						   </div>
							@if (PickerActions != null)
							{
								<div class="@ActionClass">
									@PickerActions(this)
								</div>
							}
					   </MudPaper>
				   </div>
			   </MudPopover>
            }
            else if (PickerVariant == PickerVariant.Static)
            {
               <MudPaper @attributes="UserAttributes" Class="@PickerPaperClass" Elevation="@_pickerElevation" Square="@_pickerSquare">
                   <div class="@PickerContainerClass">
					   @if(PickerContent != null){
						   @PickerContent
					   }
                   </div>
                    @if (PickerActions != null)
                    {
                        <div class="@ActionClass">
                            @PickerActions(this)
                        </div>
                    }
               </MudPaper>
            }
            else if(IsOpen && PickerVariant == PickerVariant.Dialog)
            {
               <MudOverlay Visible="IsOpen" OnClick="CloseOverlay" DarkBackground="true" Class="mud-overlay-dialog">
                   <MudPaper @attributes="UserAttributes" Class="@PickerPaperClass" Elevation="@_pickerElevation" Square="@_pickerSquare">
                       <div class="@PickerContainerClass">
							@if(PickerContent != null){
								@PickerContent
							}
                       </div>
                        @if (PickerActions != null)
                        {
                            <div class="@ActionClass">
                                @PickerActions(this)
                            </div>
                        }
                   </MudPaper>
               </MudOverlay>
            }
        </div>
        @if (PickerVariant == PickerVariant.Inline)
        {
            <MudOverlay Visible="IsOpen" OnClick="CloseOverlay" LockScroll="false" />
        }
    </CascadingValue>;
}


