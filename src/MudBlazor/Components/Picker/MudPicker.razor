@namespace MudBlazor
@using Microsoft.JSInterop
@using MudBlazor.Interop
@using MudBlazor.Providers
@using MudBlazor.Utilities
@inherits MudBasePicker
@inject IJSRuntime JSRuntime
@inject IBrowserWindowSizeProvider WindowSizeListener

<div class="@PickerClass">
    @if (PickerVariant != PickerVariant.Static)
    {
        <MudTextField Label="@Label" @bind-Value="@Value" HelperText="@HelperText" Variant="@InputVariant" ReadOnly="@(!Editable)" 
                      @onclick="@(() => { if (!Editable) ToggleOpen(); })" OnAdornmentClick="ToggleOpen" Disabled="@Disabled" Adornment="@Adornment" AdornmentIcon="@InputIcon" IconSize="@IconSize" />
    }
    <CascadingValue Value="@this" IsFixed="true">
        @if (isOpen && PickerVariant != PickerVariant.Dialog)
        {
            <MudPaper @attributes="UserAttributes" Class="@PickerPaperClass" Elevation="@PickerElevation" Square="@PickerSquare">
                <div @ref="PickerContainerRef" class="@PickerContainerClass">
                    @ChildContent
                </div>
            </MudPaper>
        }
        else if (isOpen && PickerVariant == PickerVariant.Dialog)
        {
            <MudOverlay Visible="isOpen" OnClick="@Close" DarkBackground="true" Class="mud-overlay-dialog">
                <MudPaper @attributes="UserAttributes" Class="@PickerPaperClass" Elevation="@PickerElevation" Square="@PickerSquare">
                    <div @ref="PickerContainerRef" class="@PickerContainerClass">
                        @ChildContent
                    </div>
                </MudPaper>
            </MudOverlay>
        }
    </CascadingValue>
</div>
@if (PickerVariant == PickerVariant.Inline)
{
    <MudOverlay Visible="isOpen" OnClick="@Close" LockScroll="false" />
}

@code {
    enum PickerPaperPosition
    {
        Unknown,
        Below,
        Above,
        Top,
        Bottom
    }

    protected string PickerClass =>
    new CssBuilder("mud-picker")
       .AddClass($"mud-picker-inline", PickerVariant != PickerVariant.Static)
       .AddClass($"mud-picker-static", PickerVariant == PickerVariant.Static)
       .AddClass($"mud-rounded", PickerVariant == PickerVariant.Static && !PickerSquare)
       .AddClass($"mud-elevation-{PickerElevation.ToString()}", PickerVariant == PickerVariant.Static)
       .AddClass($"mud-picker-input-button", !AllowKeyboardInput && PickerVariant != PickerVariant.Static)
       .AddClass($"mud-picker-input-text", AllowKeyboardInput && PickerVariant != PickerVariant.Static)
       .AddClass($"mud-disabled", Disabled && PickerVariant != PickerVariant.Static)
       .AddClass(Class)
    .Build();

    protected string PickerPaperClass =>
    new CssBuilder("mud-picker-paper")
      .AddClass("mud-picker-view", PickerVariant == PickerVariant.Inline)
      .AddClass("mud-picker-open", isOpen && PickerVariant == PickerVariant.Inline)
      .AddClass("mud-picker-popover-paper", PickerVariant == PickerVariant.Inline)
      .AddClass("mud-dialog", PickerVariant == PickerVariant.Dialog)
      .AddClass("mud-picker-hidden", pickerPaperPosition == PickerPaperPosition.Unknown)
      .AddClass("mud-picker-pos-top", pickerPaperPosition == PickerPaperPosition.Top)
      .AddClass("mud-picker-pos-above", pickerPaperPosition == PickerPaperPosition.Above)
      .AddClass("mud-picker-pos-bottom", pickerPaperPosition == PickerPaperPosition.Bottom)
    .Build();

    protected string PickerContainerClass =>
    new CssBuilder("mud-picker-container")
      .AddClass("mud-paper-square", PickerSquare)
      .AddClass("mud-picker-container-landscape", Orientation == Orientation.Landscape && PickerVariant == PickerVariant.Static)
    .Build();

    [Parameter] public string InputIcon { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    private bool PickerSquare { get; set; }
    private int PickerElevation { get; set; }
    private bool isRendered = false;
    private ElementReference PickerContainerRef { get; set; }

    private PickerPaperPosition pickerPaperPosition = PickerPaperPosition.Unknown;

    protected override void OnInitialized()
    {
        if (PickerVariant == PickerVariant.Static)
        {
            isOpen = true;
            if (Elevation == 8)
            {
                PickerElevation = 0;
            }
            else
            {
                PickerElevation = Elevation;
            }

            if (!Rounded)
            {
                PickerSquare = true;
            }
        }
        else
        {
            PickerSquare = Square;
            PickerElevation = Elevation;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (PickerVariant == PickerVariant.Inline)
        {
            if (!isRendered && isOpen)
            {
                isRendered = true;
                await DeterminePosition();
                StateHasChanged();
            }
            else if (isRendered && !isOpen)
            {
                isRendered = false;
                pickerPaperPosition = PickerPaperPosition.Unknown;
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task DeterminePosition()
    {
        if (WindowSizeListener == null || JSRuntime == null)
        {
            pickerPaperPosition = PickerPaperPosition.Below;
            return;
        }

        var size = await WindowSizeListener.GetBrowserWindowSize();
        var clientRect = await JSRuntime.InvokeAsync<BoundingClientRect>("getMudBoundingClientRect", PickerContainerRef);

        if (size == null || clientRect == null)
        {
            pickerPaperPosition = PickerPaperPosition.Below;
            return;
        }

        if (size.Height < clientRect.Height)
        {
            pickerPaperPosition = PickerPaperPosition.Top;
        }
        else if (size.Height < clientRect.Bottom)
        {
            if (clientRect.Top > clientRect.Height)
            {
                pickerPaperPosition = PickerPaperPosition.Above;
            }
            else if (clientRect.Top > size.Height / 2)
            {
                pickerPaperPosition = PickerPaperPosition.Bottom;
            }
            else
            {
                pickerPaperPosition = PickerPaperPosition.Top;
            }
        }
        else if (clientRect.Top < 0)
        {
            pickerPaperPosition = PickerPaperPosition.Top;
        }
        else
        {
            pickerPaperPosition = PickerPaperPosition.Below;
        }
    }
}