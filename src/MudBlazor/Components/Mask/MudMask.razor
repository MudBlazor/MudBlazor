@namespace MudBlazor
@inherits MudBaseInput<string>
@using MudBlazor.Internal

<div id="@_elementId" class="@Classname" style="@Style">
    @if (Adornment == Adornment.Start)
    {
        <MudInputAdornment Class="@AdornmentClassname"
                           Icon="@AdornmentIcon"
                           Color="@AdornmentColor"
                           Size="@IconSize"
                           Text="@AdornmentText"
                           Edge="@Edge.Start"
                           AdornmentClick="@OnAdornmentClick"/>
    }

    <input class="@InputClassname"
           @ref="_elementReference"
           @attributes="UserAttributes"
           type="@InputType.ToDescriptionString()"
           value="@Text"
           placeholder="@Placeholder"
           disabled=@GetDisabledState()
           readonly="@GetReadOnlyState()"
           @onblur="@OnBlurredAsync"
           @onfocus="OnFocused"
           @oncut="OnCut"
           @oncopy="OnCopy"
           inputmode="@InputMode.ToString()"
           />

    @if (GetDisabledState())
    {
         @*Note: this div must always be there to avoid crashes in WASM, but it is hidden most of the time except if ChildContent should be shown.
                       In Disabled state the tabindex attribute must NOT be set at all or else it will get focus on click
         *@
        <div class="@InputClassname"
             style="@("display:" + (InputType == InputType.Hidden && ChildContent != null ? "inline" : "none"))"
             @onblur="@OnBlurredAsync" @ref="@_elementReference1">
            @ChildContent
        </div>
    }
    else
    {
         @*Note: this div must always be there to avoid crashes in WASM, but it is hidden most of the time except if ChildContent should be shown.*@
        <div class="@InputClassname"
             style="@("display:" + (InputType == InputType.Hidden && ChildContent != null ? "inline" : "none"))"
             tabindex="@(InputType == InputType.Hidden && ChildContent != null ? 0 : -1)"
             @onblur="@OnBlurredAsync" @ref="@_elementReference1">
            @ChildContent
        </div>
    }


    @if (_showClearable && !GetDisabledState())
    {
        <MudIconButton Class="@ClearButtonClassname"
                       Color="@Color.Default"
                       Icon="@ClearIcon"
                       Size="@Size.Small"
                       OnClick="@HandleClearButton"/>
    }

    @if (Adornment == Adornment.End)
    {
        <MudInputAdornment Class="@AdornmentClassname"
                           Icon="@AdornmentIcon"
                           Color="@AdornmentColor"
                           Size="@IconSize"
                           Text="@AdornmentText"
                           Edge="@Edge.End"
                           AdornmentClick="@OnAdornmentClick"/>
    }

    @if (Variant == Variant.Outlined)
    {
        <div class="mud-input-outlined-border"></div>
    }

</div>